{"version":3,"file":"core.mjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/util/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/case.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/listeners.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-sequential-scope.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/fast-calls.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/utils.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/operations.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/virtual-element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/error-handling.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/execute-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/constants.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render-dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/visitor.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/event.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/qrl-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/pause.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/resume.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/signals.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/notify-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-watch.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-resource.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/serializers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/common.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/factory.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/ssr/render-ssr.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-ref.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-env-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/scoped-stylesheet.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-error-boundary.js"],"sourcesContent":["export const qDev = globalThis.qDev === true;\nexport const qSerialize = globalThis.qSerialize !== false;\nexport const qDynamicPlatform = globalThis.qDynamicPlatform !== false;\nexport const qTest = globalThis.qTest === true;\nexport const qRuntimeQrl = globalThis.qRuntimeQrl === true;\nexport const seal = (obj) => {\n    if (qDev) {\n        Object.seal(obj);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3FkZXYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxLQUFLLEtBQUssQ0FBQztBQUMxRCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLEtBQUssS0FBSyxDQUFDO0FBQ3RFLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQztBQUMvQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUM7QUFFM0QsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUU7SUFDL0IsSUFBSSxJQUFJLEVBQUU7UUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2xCO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHFEZXYgPSBnbG9iYWxUaGlzLnFEZXYgPT09IHRydWU7XG5leHBvcnQgY29uc3QgcVNlcmlhbGl6ZSA9IGdsb2JhbFRoaXMucVNlcmlhbGl6ZSAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcUR5bmFtaWNQbGF0Zm9ybSA9IGdsb2JhbFRoaXMucUR5bmFtaWNQbGF0Zm9ybSAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcVRlc3QgPSBnbG9iYWxUaGlzLnFUZXN0ID09PSB0cnVlO1xuZXhwb3J0IGNvbnN0IHFSdW50aW1lUXJsID0gZ2xvYmFsVGhpcy5xUnVudGltZVFybCA9PT0gdHJ1ZTtcblxuZXhwb3J0IGNvbnN0IHNlYWwgPSAob2JqOiBhbnkpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBPYmplY3Quc2VhbChvYmopO1xuICB9XG59O1xuXG5kZWNsYXJlIGNvbnN0IGdsb2JhbFRoaXM6IGFueTtcbiJdfQ==","import { qDev } from './qdev';\nexport const isNode = (value) => {\n    return value && typeof value.nodeType === 'number';\n};\nexport const isDocument = (value) => {\n    return value && value.nodeType === 9;\n};\nexport const isElement = (value) => {\n    return value.nodeType === 1;\n};\nexport const isQwikElement = (value) => {\n    return isNode(value) && (value.nodeType === 1 || value.nodeType === 111);\n};\nexport const isVirtualElement = (value) => {\n    return value.nodeType === 111;\n};\nexport const isText = (value) => {\n    return value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return value.nodeType === 8;\n};\nexport function assertQwikElement(el) {\n    if (qDev) {\n        if (!isQwikElement(el)) {\n            console.error('Not a Qwik Element, got', el);\n            throw new Error('Not a Qwik Element');\n        }\n    }\n}\nexport function assertElement(el) {\n    if (qDev) {\n        if (!isElement(el)) {\n            console.error('Not a Element, got', el);\n            throw new Error('Not an Element');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQWlCLEVBQUU7SUFDbEQsT0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztBQUNyRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFVLEVBQXFCLEVBQUU7SUFDMUQsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBNEIsRUFBb0IsRUFBRTtJQUMxRSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQVUsRUFBd0IsRUFBRTtJQUNoRSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDM0UsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUE0QixFQUEyQixFQUFFO0lBQ3hGLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUM7QUFDaEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVyxFQUFpQixFQUFFO0lBQ25ELE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVyxFQUFvQixFQUFFO0lBQ3pELE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQU87SUFDdkMsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1NBQ3ZDO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUF5QjtJQUNyRCxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDbEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QyxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDbkM7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFF3aWtFbGVtZW50LCBWaXJ0dWFsRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuL3FkZXYnO1xuXG5leHBvcnQgY29uc3QgaXNOb2RlID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBOb2RlID0+IHtcbiAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5ub2RlVHlwZSA9PT0gJ251bWJlcic7XG59O1xuXG5leHBvcnQgY29uc3QgaXNEb2N1bWVudCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgRG9jdW1lbnQgPT4ge1xuICByZXR1cm4gdmFsdWUgJiYgdmFsdWUubm9kZVR5cGUgPT09IDk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNFbGVtZW50ID0gKHZhbHVlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiB2YWx1ZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIHZhbHVlLm5vZGVUeXBlID09PSAxO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzUXdpa0VsZW1lbnQgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIFF3aWtFbGVtZW50ID0+IHtcbiAgcmV0dXJuIGlzTm9kZSh2YWx1ZSkgJiYgKHZhbHVlLm5vZGVUeXBlID09PSAxIHx8IHZhbHVlLm5vZGVUeXBlID09PSAxMTEpO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzVmlydHVhbEVsZW1lbnQgPSAodmFsdWU6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCk6IHZhbHVlIGlzIFZpcnR1YWxFbGVtZW50ID0+IHtcbiAgcmV0dXJuIHZhbHVlLm5vZGVUeXBlID09PSAxMTE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNUZXh0ID0gKHZhbHVlOiBOb2RlKTogdmFsdWUgaXMgVGV4dCA9PiB7XG4gIHJldHVybiB2YWx1ZS5ub2RlVHlwZSA9PT0gMztcbn07XG5leHBvcnQgY29uc3QgaXNDb21tZW50ID0gKHZhbHVlOiBOb2RlKTogdmFsdWUgaXMgQ29tbWVudCA9PiB7XG4gIHJldHVybiB2YWx1ZS5ub2RlVHlwZSA9PT0gODtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRRd2lrRWxlbWVudChlbDogYW55KTogYXNzZXJ0cyBlbCBpcyBRd2lrRWxlbWVudCB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKCFpc1F3aWtFbGVtZW50KGVsKSkge1xuICAgICAgY29uc29sZS5lcnJvcignTm90IGEgUXdpayBFbGVtZW50LCBnb3QnLCBlbCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIFF3aWsgRWxlbWVudCcpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RWxlbWVudChlbDogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogYXNzZXJ0cyBlbCBpcyBFbGVtZW50IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoIWlzRWxlbWVudChlbCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05vdCBhIEVsZW1lbnQsIGdvdCcsIGVsKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGFuIEVsZW1lbnQnKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==","import { isElement, isNode } from './element';\nimport { qDev } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    const err = message instanceof Error ? message : new Error(message);\n    // eslint-disable-next-line no-console\n    console.error('%cQWIK ERROR', STYLE, err.message, ...printParams(optionalParams), err.stack);\n    return err;\n};\nexport const logErrorAndStop = (message, ...optionalParams) => {\n    const err = logError(message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    return err;\n};\nexport const logWarn = (message, ...optionalParams) => {\n    // eslint-disable-next-line no-console\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const tryGetContext = (element) => {\n    return element['_qc_'];\n};\nconst printParams = (optionalParams) => {\n    if (qDev) {\n        return optionalParams.map((p) => {\n            if (isNode(p) && isElement(p)) {\n                return printElement(p);\n            }\n            return p;\n        });\n    }\n    return optionalParams;\n};\nconst printElement = (el) => {\n    const ctx = tryGetContext(el);\n    const isServer = /*#__PURE__*/ (() => typeof process !== 'undefined' && !!process.versions && !!process.versions.node)();\n    return {\n        tagName: el.tagName,\n        renderQRL: ctx?.$componentQrl$?.getSymbol(),\n        element: isServer ? undefined : el,\n        ctx: isServer ? undefined : ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxLQUFLLEdBQUcsSUFBSTtJQUNoQixDQUFDLENBQUMsNEZBQTRGO0lBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFUCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDbEUsTUFBTSxHQUFHLEdBQUcsT0FBTyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRSxzQ0FBc0M7SUFDdEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdGLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ3pFLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztJQUNqRCx1Q0FBdUM7SUFDdkMsUUFBUSxDQUFDO0lBQ1QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDakUsc0NBQXNDO0lBQ3RDLElBQUksSUFBSSxFQUFFO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0tBQzdFO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBZ0IsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUNyRSxJQUFJLElBQUksRUFBRTtRQUNSLHNDQUFzQztRQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7S0FDekU7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFvQixFQUF3QixFQUFFO0lBQzFFLE9BQVEsT0FBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLENBQUMsY0FBcUIsRUFBRSxFQUFFO0lBQzVDLElBQUksSUFBSSxFQUFFO1FBQ1IsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUM3QixPQUFPLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4QjtZQUNELE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sY0FBYyxDQUFDO0FBQ3hCLENBQUMsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLENBQUMsRUFBVyxFQUFFLEVBQUU7SUFDbkMsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sUUFBUSxHQUFZLGFBQWEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUM1QyxPQUFPLE9BQU8sS0FBSyxXQUFXLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUVyRixPQUFPO1FBQ0wsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPO1FBQ25CLFNBQVMsRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRTtRQUMzQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDbEMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHO0tBQ2hDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFF3aWtFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHR5cGUgeyBRQ29udGV4dCB9IGZyb20gJy4uL3N0YXRlL2NvbnRleHQnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc05vZGUgfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmNvbnN0IFNUWUxFID0gcURldlxuICA/IGBiYWNrZ3JvdW5kOiAjNTY0Q0UwOyBjb2xvcjogd2hpdGU7IHBhZGRpbmc6IDJweCAzcHg7IGJvcmRlci1yYWRpdXM6IDJweDsgZm9udC1zaXplOiAwLjhlbTtgXG4gIDogJyc7XG5cbmV4cG9ydCBjb25zdCBsb2dFcnJvciA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgY29uc3QgZXJyID0gbWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yID8gbWVzc2FnZSA6IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS5lcnJvcignJWNRV0lLIEVSUk9SJywgU1RZTEUsIGVyci5tZXNzYWdlLCAuLi5wcmludFBhcmFtcyhvcHRpb25hbFBhcmFtcyksIGVyci5zdGFjayk7XG4gIHJldHVybiBlcnI7XG59O1xuXG5leHBvcnQgY29uc3QgbG9nRXJyb3JBbmRTdG9wID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICBjb25zdCBlcnIgPSBsb2dFcnJvcihtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICBkZWJ1Z2dlcjtcbiAgcmV0dXJuIGVycjtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2dXYXJuID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBpZiAocURldikge1xuICAgIGNvbnNvbGUud2FybignJWNRV0lLIFdBUk4nLCBTVFlMRSwgbWVzc2FnZSwgLi4ucHJpbnRQYXJhbXMob3B0aW9uYWxQYXJhbXMpKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGxvZ0RlYnVnID0gKG1lc3NhZ2U/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICBpZiAocURldikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5kZWJ1ZygnJWNRV0lLJywgU1RZTEUsIG1lc3NhZ2UsIC4uLnByaW50UGFyYW1zKG9wdGlvbmFsUGFyYW1zKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0cnlHZXRDb250ZXh0ID0gKGVsZW1lbnQ6IFF3aWtFbGVtZW50KTogUUNvbnRleHQgfCB1bmRlZmluZWQgPT4ge1xuICByZXR1cm4gKGVsZW1lbnQgYXMgYW55KVsnX3FjXyddO1xufTtcblxuY29uc3QgcHJpbnRQYXJhbXMgPSAob3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgcmV0dXJuIG9wdGlvbmFsUGFyYW1zLm1hcCgocCkgPT4ge1xuICAgICAgaWYgKGlzTm9kZShwKSAmJiBpc0VsZW1lbnQocCkpIHtcbiAgICAgICAgcmV0dXJuIHByaW50RWxlbWVudChwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBvcHRpb25hbFBhcmFtcztcbn07XG5cbmNvbnN0IHByaW50RWxlbWVudCA9IChlbDogRWxlbWVudCkgPT4ge1xuICBjb25zdCBjdHggPSB0cnlHZXRDb250ZXh0KGVsKTtcbiAgY29uc3QgaXNTZXJ2ZXI6IGJvb2xlYW4gPSAvKiNfX1BVUkVfXyovICgoKSA9PlxuICAgIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAhIXByb2Nlc3MudmVyc2lvbnMgJiYgISFwcm9jZXNzLnZlcnNpb25zLm5vZGUpKCk7XG5cbiAgcmV0dXJuIHtcbiAgICB0YWdOYW1lOiBlbC50YWdOYW1lLFxuICAgIHJlbmRlclFSTDogY3R4Py4kY29tcG9uZW50UXJsJD8uZ2V0U3ltYm9sKCksXG4gICAgZWxlbWVudDogaXNTZXJ2ZXIgPyB1bmRlZmluZWQgOiBlbCxcbiAgICBjdHg6IGlzU2VydmVyID8gdW5kZWZpbmVkIDogY3R4LFxuICB9O1xufTtcbiJdfQ==","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1; // 'Can not serialize a HTML Node that is not an Element'\nexport const QError_runtimeQrlNoElement = 2; // `Q-ERROR: '${qrl}' is runtime but no instance found on element.`\nexport const QError_verifySerializable = 3; // 'Only primitive and object literals can be serialized', value,\nexport const QError_errorWhileRendering = 4; // Crash while rendering\nexport const QError_cannotRenderOverExistingContainer = 5; //'You can render over a existing q:container. Skipping render().'\nexport const QError_setProperty = 6; //'Set property'\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const QError_immutableJsxProps = 19;\nexport const QError_useInvokeContext = 20;\nexport const QError_containerAlreadyPaused = 21;\nexport const QError_canNotMountUseServerMount = 22;\nexport const QError_rootNodeMustBeHTML = 23;\nexport const QError_strictHTMLChildren = 24;\nexport const QError_invalidJsxNodeType = 25;\nexport const QError_trackUseStore = 26;\nexport const QError_missingObjectId = 27;\nexport const QError_invalidContext = 28;\nexport const QError_canNotRenderHTML = 29;\nexport const QError_qrlMissingContainer = 30;\nexport const QError_qrlMissingChunk = 31;\nexport const QError_invalidRefValue = 32;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code);\n    return logErrorAndStop(text, ...parts);\n};\nexport const codeToText = (code) => {\n    if (qDev) {\n        const MAP = [\n            'Error while serializing class attribute',\n            'Can not serialize a HTML Node that is not an Element',\n            'Rruntime but no instance found on element.',\n            'Only primitive and object literals can be serialized',\n            'Crash while rendering',\n            'You can render over a existing q:container. Skipping render().',\n            'Set property',\n            \"Only function's and 'string's are supported.\",\n            \"Only objects can be wrapped in 'QObject'\",\n            `Only objects literals can be wrapped in 'QObject'`,\n            'QRL is not a function',\n            'Dynamic import not found',\n            'Unknown type argument',\n            'Actual value for useContext() can not be found, make sure some ancestor component has set a value using useContextProvider()',\n            \"Invoking 'use*()' method outside of invocation context.\",\n            'Cant access renderCtx for existing context',\n            'Cant access document for existing context',\n            'props are inmutable',\n            '<div> component can only be used at the root of a Qwik component$()',\n            'Props are immutable by default.',\n            'use- method must be called only at the root level of a component$()',\n            'Container is already paused. Skipping',\n            'Components using useServerMount() can only be mounted in the server, if you need your component to be mounted in the client, use \"useMount$()\" instead',\n            'When rendering directly on top of Document, the root node must be a <html>',\n            'A <html> node must have 2 children. The first one <head> and the second one a <body>',\n            'Invalid JSXNode type. It must be either a function or a string. Found:',\n            'Tracking value changes can only be done to useStore() objects and component props',\n            'Missing Object ID for captured object',\n            'The provided Context reference is not a valid context created by createContext()',\n            '<html> is the root container, it can not be rendered inside a component',\n            'QRLs can not be resolved because it does not have an attached container. This means that the QRL does not know where it belongs inside the DOM, so it cant dynamically import() from a relative path.',\n            'QRLs can not be dynamically resolved, because it does not have a chunk path',\n            'The JSX ref attribute must be a Signal', // 32\n        ];\n        return `Code(${code}): ${MAP[code] ?? ''}`;\n    }\n    else {\n        return `Code(${code})`;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvZXJyb3IvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLENBQUMsQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLENBQUMsQ0FBQyx5REFBeUQ7QUFDdEcsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUVBQW1FO0FBQ2hILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQUMsQ0FBQyxDQUFDLGlFQUFpRTtBQUM3RyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLENBQUMsQ0FBQyx3QkFBd0I7QUFDckUsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQUcsQ0FBQyxDQUFDLENBQUMsa0VBQWtFO0FBQzdILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxDQUFDLGdCQUFnQjtBQUNyRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7QUFDbkMsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQUMsQ0FBQztBQUMzQyxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxFQUFFLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsRUFBRSxDQUFDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFFLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsRUFBRSxDQUFDO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxFQUFFLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLEVBQUUsQ0FBQztBQUNoRCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxFQUFFLENBQUM7QUFDbkQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsRUFBRSxDQUFDO0FBQzVDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLEVBQUUsQ0FBQztBQUM1QyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxFQUFFLENBQUM7QUFDNUMsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztBQUN6QyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFFLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLElBQVksRUFBRSxHQUFHLEtBQVksRUFBUyxFQUFFO0lBQzdELE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixPQUFPLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN6QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUNqRCxJQUFJLElBQUksRUFBRTtRQUNSLE1BQU0sR0FBRyxHQUFHO1lBQ1YseUNBQXlDO1lBQ3pDLHNEQUFzRDtZQUN0RCw0Q0FBNEM7WUFDNUMsc0RBQXNEO1lBQ3RELHVCQUF1QjtZQUN2QixnRUFBZ0U7WUFDaEUsY0FBYztZQUNkLDhDQUE4QztZQUM5QywwQ0FBMEM7WUFDMUMsbURBQW1EO1lBQ25ELHVCQUF1QjtZQUN2QiwwQkFBMEI7WUFDMUIsdUJBQXVCO1lBQ3ZCLDhIQUE4SDtZQUM5SCx5REFBeUQ7WUFDekQsNENBQTRDO1lBQzVDLDJDQUEyQztZQUMzQyxxQkFBcUI7WUFDckIscUVBQXFFO1lBQ3JFLGlDQUFpQztZQUNqQyxxRUFBcUU7WUFDckUsdUNBQXVDO1lBQ3ZDLHdKQUF3SjtZQUN4Siw0RUFBNEU7WUFDNUUsc0ZBQXNGO1lBQ3RGLHdFQUF3RTtZQUN4RSxtRkFBbUY7WUFDbkYsdUNBQXVDO1lBQ3ZDLGtGQUFrRjtZQUNsRix5RUFBeUU7WUFDekUsdU1BQXVNO1lBQ3ZNLDZFQUE2RTtZQUM3RSx3Q0FBd0MsRUFBRSxLQUFLO1NBQ2hELENBQUM7UUFDRixPQUFPLFFBQVEsSUFBSSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztLQUM1QztTQUFNO1FBQ0wsT0FBTyxRQUFRLElBQUksR0FBRyxDQUFDO0tBQ3hCO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nRXJyb3JBbmRTdG9wIH0gZnJvbSAnLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbmV4cG9ydCBjb25zdCBRRXJyb3Jfc3RyaW5naWZ5Q2xhc3NPclN0eWxlID0gMDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfY2Fubm90U2VyaWFsaXplTm9kZSA9IDE7IC8vICdDYW4gbm90IHNlcmlhbGl6ZSBhIEhUTUwgTm9kZSB0aGF0IGlzIG5vdCBhbiBFbGVtZW50J1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9ydW50aW1lUXJsTm9FbGVtZW50ID0gMjsgLy8gYFEtRVJST1I6ICcke3FybH0nIGlzIHJ1bnRpbWUgYnV0IG5vIGluc3RhbmNlIGZvdW5kIG9uIGVsZW1lbnQuYFxuZXhwb3J0IGNvbnN0IFFFcnJvcl92ZXJpZnlTZXJpYWxpemFibGUgPSAzOyAvLyAnT25seSBwcmltaXRpdmUgYW5kIG9iamVjdCBsaXRlcmFscyBjYW4gYmUgc2VyaWFsaXplZCcsIHZhbHVlLFxuZXhwb3J0IGNvbnN0IFFFcnJvcl9lcnJvcldoaWxlUmVuZGVyaW5nID0gNDsgLy8gQ3Jhc2ggd2hpbGUgcmVuZGVyaW5nXG5leHBvcnQgY29uc3QgUUVycm9yX2Nhbm5vdFJlbmRlck92ZXJFeGlzdGluZ0NvbnRhaW5lciA9IDU7IC8vJ1lvdSBjYW4gcmVuZGVyIG92ZXIgYSBleGlzdGluZyBxOmNvbnRhaW5lci4gU2tpcHBpbmcgcmVuZGVyKCkuJ1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9zZXRQcm9wZXJ0eSA9IDY7IC8vJ1NldCBwcm9wZXJ0eSdcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsT3JFcnJvciA9IDc7XG5leHBvcnQgY29uc3QgUUVycm9yX29ubHlPYmplY3RXcmFwcGVkID0gODtcbmV4cG9ydCBjb25zdCBRRXJyb3Jfb25seUxpdGVyYWxXcmFwcGVkID0gOTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsSXNOb3RGdW5jdGlvbiA9IDEwO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9keW5hbWljSW1wb3J0RmFpbGVkID0gMTE7XG5leHBvcnQgY29uc3QgUUVycm9yX3Vua25vd25UeXBlQXJndW1lbnQgPSAxMjtcbmV4cG9ydCBjb25zdCBRRXJyb3Jfbm90Rm91bmRDb250ZXh0ID0gMTM7XG5leHBvcnQgY29uc3QgUUVycm9yX3VzZU1ldGhvZE91dHNpZGVDb250ZXh0ID0gMTQ7XG5leHBvcnQgY29uc3QgUUVycm9yX21pc3NpbmdSZW5kZXJDdHggPSAxNTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfbWlzc2luZ0RvYyA9IDE2O1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9pbW11dGFibGVQcm9wcyA9IDE3O1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9ob3N0Q2FuT25seUJlQXRSb290ID0gMTg7XG5leHBvcnQgY29uc3QgUUVycm9yX2ltbXV0YWJsZUpzeFByb3BzID0gMTk7XG5leHBvcnQgY29uc3QgUUVycm9yX3VzZUludm9rZUNvbnRleHQgPSAyMDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfY29udGFpbmVyQWxyZWFkeVBhdXNlZCA9IDIxO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9jYW5Ob3RNb3VudFVzZVNlcnZlck1vdW50ID0gMjI7XG5leHBvcnQgY29uc3QgUUVycm9yX3Jvb3ROb2RlTXVzdEJlSFRNTCA9IDIzO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9zdHJpY3RIVE1MQ2hpbGRyZW4gPSAyNDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfaW52YWxpZEpzeE5vZGVUeXBlID0gMjU7XG5leHBvcnQgY29uc3QgUUVycm9yX3RyYWNrVXNlU3RvcmUgPSAyNjtcbmV4cG9ydCBjb25zdCBRRXJyb3JfbWlzc2luZ09iamVjdElkID0gMjc7XG5leHBvcnQgY29uc3QgUUVycm9yX2ludmFsaWRDb250ZXh0ID0gMjg7XG5leHBvcnQgY29uc3QgUUVycm9yX2Nhbk5vdFJlbmRlckhUTUwgPSAyOTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsTWlzc2luZ0NvbnRhaW5lciA9IDMwO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9xcmxNaXNzaW5nQ2h1bmsgPSAzMTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfaW52YWxpZFJlZlZhbHVlID0gMzI7XG5leHBvcnQgY29uc3QgcUVycm9yID0gKGNvZGU6IG51bWJlciwgLi4ucGFydHM6IGFueVtdKTogRXJyb3IgPT4ge1xuICBjb25zdCB0ZXh0ID0gY29kZVRvVGV4dChjb2RlKTtcbiAgcmV0dXJuIGxvZ0Vycm9yQW5kU3RvcCh0ZXh0LCAuLi5wYXJ0cyk7XG59O1xuXG5leHBvcnQgY29uc3QgY29kZVRvVGV4dCA9IChjb2RlOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICBpZiAocURldikge1xuICAgIGNvbnN0IE1BUCA9IFtcbiAgICAgICdFcnJvciB3aGlsZSBzZXJpYWxpemluZyBjbGFzcyBhdHRyaWJ1dGUnLCAvLyAwXG4gICAgICAnQ2FuIG5vdCBzZXJpYWxpemUgYSBIVE1MIE5vZGUgdGhhdCBpcyBub3QgYW4gRWxlbWVudCcsIC8vIDFcbiAgICAgICdScnVudGltZSBidXQgbm8gaW5zdGFuY2UgZm91bmQgb24gZWxlbWVudC4nLCAvLyAyXG4gICAgICAnT25seSBwcmltaXRpdmUgYW5kIG9iamVjdCBsaXRlcmFscyBjYW4gYmUgc2VyaWFsaXplZCcsIC8vIDNcbiAgICAgICdDcmFzaCB3aGlsZSByZW5kZXJpbmcnLCAvLyA0XG4gICAgICAnWW91IGNhbiByZW5kZXIgb3ZlciBhIGV4aXN0aW5nIHE6Y29udGFpbmVyLiBTa2lwcGluZyByZW5kZXIoKS4nLCAvLyA1XG4gICAgICAnU2V0IHByb3BlcnR5JywgLy8gNlxuICAgICAgXCJPbmx5IGZ1bmN0aW9uJ3MgYW5kICdzdHJpbmcncyBhcmUgc3VwcG9ydGVkLlwiLCAvLyA3XG4gICAgICBcIk9ubHkgb2JqZWN0cyBjYW4gYmUgd3JhcHBlZCBpbiAnUU9iamVjdCdcIiwgLy8gOFxuICAgICAgYE9ubHkgb2JqZWN0cyBsaXRlcmFscyBjYW4gYmUgd3JhcHBlZCBpbiAnUU9iamVjdCdgLCAvLyA5XG4gICAgICAnUVJMIGlzIG5vdCBhIGZ1bmN0aW9uJywgLy8gMTBcbiAgICAgICdEeW5hbWljIGltcG9ydCBub3QgZm91bmQnLCAvLyAxMVxuICAgICAgJ1Vua25vd24gdHlwZSBhcmd1bWVudCcsIC8vIDEyXG4gICAgICAnQWN0dWFsIHZhbHVlIGZvciB1c2VDb250ZXh0KCkgY2FuIG5vdCBiZSBmb3VuZCwgbWFrZSBzdXJlIHNvbWUgYW5jZXN0b3IgY29tcG9uZW50IGhhcyBzZXQgYSB2YWx1ZSB1c2luZyB1c2VDb250ZXh0UHJvdmlkZXIoKScsIC8vIDEzXG4gICAgICBcIkludm9raW5nICd1c2UqKCknIG1ldGhvZCBvdXRzaWRlIG9mIGludm9jYXRpb24gY29udGV4dC5cIiwgLy8gMTRcbiAgICAgICdDYW50IGFjY2VzcyByZW5kZXJDdHggZm9yIGV4aXN0aW5nIGNvbnRleHQnLCAvLyAxNVxuICAgICAgJ0NhbnQgYWNjZXNzIGRvY3VtZW50IGZvciBleGlzdGluZyBjb250ZXh0JywgLy8gMTZcbiAgICAgICdwcm9wcyBhcmUgaW5tdXRhYmxlJywgLy8gMTdcbiAgICAgICc8ZGl2PiBjb21wb25lbnQgY2FuIG9ubHkgYmUgdXNlZCBhdCB0aGUgcm9vdCBvZiBhIFF3aWsgY29tcG9uZW50JCgpJywgLy8gMThcbiAgICAgICdQcm9wcyBhcmUgaW1tdXRhYmxlIGJ5IGRlZmF1bHQuJywgLy8gMTlcbiAgICAgICd1c2UtIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBvbmx5IGF0IHRoZSByb290IGxldmVsIG9mIGEgY29tcG9uZW50JCgpJywgLy8gMjBcbiAgICAgICdDb250YWluZXIgaXMgYWxyZWFkeSBwYXVzZWQuIFNraXBwaW5nJywgLy8gMjFcbiAgICAgICdDb21wb25lbnRzIHVzaW5nIHVzZVNlcnZlck1vdW50KCkgY2FuIG9ubHkgYmUgbW91bnRlZCBpbiB0aGUgc2VydmVyLCBpZiB5b3UgbmVlZCB5b3VyIGNvbXBvbmVudCB0byBiZSBtb3VudGVkIGluIHRoZSBjbGllbnQsIHVzZSBcInVzZU1vdW50JCgpXCIgaW5zdGVhZCcsIC8vIDIyXG4gICAgICAnV2hlbiByZW5kZXJpbmcgZGlyZWN0bHkgb24gdG9wIG9mIERvY3VtZW50LCB0aGUgcm9vdCBub2RlIG11c3QgYmUgYSA8aHRtbD4nLCAvLyAyM1xuICAgICAgJ0EgPGh0bWw+IG5vZGUgbXVzdCBoYXZlIDIgY2hpbGRyZW4uIFRoZSBmaXJzdCBvbmUgPGhlYWQ+IGFuZCB0aGUgc2Vjb25kIG9uZSBhIDxib2R5PicsIC8vIDI0XG4gICAgICAnSW52YWxpZCBKU1hOb2RlIHR5cGUuIEl0IG11c3QgYmUgZWl0aGVyIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmcuIEZvdW5kOicsIC8vIDI1XG4gICAgICAnVHJhY2tpbmcgdmFsdWUgY2hhbmdlcyBjYW4gb25seSBiZSBkb25lIHRvIHVzZVN0b3JlKCkgb2JqZWN0cyBhbmQgY29tcG9uZW50IHByb3BzJywgLy8gMjZcbiAgICAgICdNaXNzaW5nIE9iamVjdCBJRCBmb3IgY2FwdHVyZWQgb2JqZWN0JywgLy8gMjdcbiAgICAgICdUaGUgcHJvdmlkZWQgQ29udGV4dCByZWZlcmVuY2UgaXMgbm90IGEgdmFsaWQgY29udGV4dCBjcmVhdGVkIGJ5IGNyZWF0ZUNvbnRleHQoKScsIC8vIDI4XG4gICAgICAnPGh0bWw+IGlzIHRoZSByb290IGNvbnRhaW5lciwgaXQgY2FuIG5vdCBiZSByZW5kZXJlZCBpbnNpZGUgYSBjb21wb25lbnQnLCAvLyAyOVxuICAgICAgJ1FSTHMgY2FuIG5vdCBiZSByZXNvbHZlZCBiZWNhdXNlIGl0IGRvZXMgbm90IGhhdmUgYW4gYXR0YWNoZWQgY29udGFpbmVyLiBUaGlzIG1lYW5zIHRoYXQgdGhlIFFSTCBkb2VzIG5vdCBrbm93IHdoZXJlIGl0IGJlbG9uZ3MgaW5zaWRlIHRoZSBET00sIHNvIGl0IGNhbnQgZHluYW1pY2FsbHkgaW1wb3J0KCkgZnJvbSBhIHJlbGF0aXZlIHBhdGguJywgLy8gMzBcbiAgICAgICdRUkxzIGNhbiBub3QgYmUgZHluYW1pY2FsbHkgcmVzb2x2ZWQsIGJlY2F1c2UgaXQgZG9lcyBub3QgaGF2ZSBhIGNodW5rIHBhdGgnLCAvLyAzMVxuICAgICAgJ1RoZSBKU1ggcmVmIGF0dHJpYnV0ZSBtdXN0IGJlIGEgU2lnbmFsJywgLy8gMzJcbiAgICBdO1xuICAgIHJldHVybiBgQ29kZSgke2NvZGV9KTogJHtNQVBbY29kZV0gPz8gJyd9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYENvZGUoJHtjb2RlfSlgO1xuICB9XG59O1xuIl19","/**\n * @private\n */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isSerializableObject = (v) => {\n    const proto = Object.getPrototypeOf(v);\n    return proto === Object.prototype || proto === null;\n};\nexport const isObject = (v) => {\n    return v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVMsRUFBbUIsRUFBRTtJQUMxRCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFO0lBQzdDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ3RELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBWSxFQUFFO0lBQzNDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFNLEVBQWMsRUFBRTtJQUM1QyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBTSxFQUFlLEVBQUU7SUFDOUMsT0FBTyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBTSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBQ2pDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGlzSHRtbEVsZW1lbnQgPSAobm9kZTogYW55KTogbm9kZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLm5vZGVUeXBlID09PSAxIDogZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTZXJpYWxpemFibGVPYmplY3QgPSAodjogYW55KSA9PiB7XG4gIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHYpO1xuICByZXR1cm4gcHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUgfHwgcHJvdG8gPT09IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAodjogYW55KTogdiBpcyBhbnkgPT4ge1xuICByZXR1cm4gdiAmJiB0eXBlb2YgdiA9PT0gJ29iamVjdCc7XG59O1xuXG5leHBvcnQgY29uc3QgaXNBcnJheSA9ICh2OiBhbnkpOiB2IGlzIGFueVtdID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAodjogYW55KTogdiBpcyBzdHJpbmcgPT4ge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAodjogYW55KTogdiBpcyBGdW5jdGlvbiA9PiB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbi8qKlxuICogVHlwZSByZXByZXNlbnRpbmcgYSB2YWx1ZSB3aGljaCBpcyBlaXRoZXIgcmVzb2x2ZSBvciBhIHByb21pc2UuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFZhbHVlT3JQcm9taXNlPFQ+ID0gVCB8IFByb21pc2U8VD47XG4iXX0=","import { qDynamicPlatform } from '../util/qdev';\nimport { isObject } from '../util/types';\nexport const createPlatform = () => {\n    return {\n        isServer: false,\n        importSymbol(containerEl, url, symbolName) {\n            const urlDoc = toUrl(containerEl.ownerDocument, containerEl, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            urlCopy.search = '';\n            const importURL = urlCopy.href;\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                return findSymbol(mod, symbolName);\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol() {\n            return undefined;\n        },\n    };\n};\nconst findSymbol = (module, symbol) => {\n    if (symbol in module) {\n        return module[symbol];\n    }\n    for (const v of Object.values(module)) {\n        if (isObject(v) && symbol in v) {\n            return v[symbol];\n        }\n    }\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *    - `Element` use `base.ownerDocument.baseURI`\n *    - `Document` use `base.baseURI`\n *    - `string` use `base` as is\n *    - `QConfig` use `base.baseURI`\n * @param url - relative URL\n * @returns fully qualified URL.\n */\nexport const toUrl = (doc, containerEl, url) => {\n    const baseURI = doc.baseURI;\n    const base = new URL(containerEl.getAttribute('q:base') ?? baseURI, baseURI);\n    return new URL(url, base);\n};\nlet _platform = createPlatform();\n// <docs markdown=\"./readme.md#setPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#setPlatform instead)\n/**\n * Sets the `CorePlatform`.\n *\n * This is useful to override the platform in tests to change the behavior of,\n * `requestAnimationFrame`, and import resolution.\n *\n * @param doc - The document of the application for which the platform is needed.\n * @param platform - The platform to use.\n * @alpha\n */\n// </docs>\nexport const setPlatform = (plt) => (_platform = plt);\n// <docs markdown=\"./readme.md#getPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#getPlatform instead)\n/**\n * Retrieve the `CorePlatform`.\n *\n * The `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings\n * from symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but\n * is specific to the application currently running. On server it is possible that many different\n * applications are running in a single server instance, and for this reason the `CorePlatform`\n * is associated with the application document.\n *\n * @param docOrNode - The document (or node) of the application for which the platform is needed.\n * @alpha\n */\n// </docs>\nexport const getPlatform = () => {\n    return _platform;\n};\nexport const isServer = () => {\n    if (qDynamicPlatform) {\n        return _platform.isServer;\n    }\n    return false;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0uanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcGxhdGZvcm0vcGxhdGZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHekMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLEdBQWlCLEVBQUU7SUFDL0MsT0FBTztRQUNMLFFBQVEsRUFBRSxLQUFLO1FBQ2YsWUFBWSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsVUFBVTtZQUN2QyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDN0UsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDaEMsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7WUFDbEIsT0FBTyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDcEIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztZQUMvQixPQUFPLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDdkQsT0FBTyxVQUFVLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ1YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUM3QixxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7b0JBQ3pCLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ2YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUM3QixVQUFVLENBQUMsR0FBRyxFQUFFO29CQUNkLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELGNBQWM7WUFDWixPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBVyxFQUFFLE1BQWMsRUFBRSxFQUFFO0lBQ2pELElBQUksTUFBTSxJQUFJLE1BQU0sRUFBRTtRQUNwQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN2QjtJQUNELEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNyQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQzlCLE9BQVEsQ0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzNCO0tBQ0Y7QUFDSCxDQUFDLENBQUM7QUFFRjs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBYSxFQUFFLFdBQXdCLEVBQUUsR0FBaUIsRUFBTyxFQUFFO0lBQ3ZGLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7SUFDNUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsT0FBTyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUIsQ0FBQyxDQUFDO0FBRUYsSUFBSSxTQUFTLEdBQUcsY0FBYyxFQUFFLENBQUM7QUFFakMsNENBQTRDO0FBQzVDLHlDQUF5QztBQUN6Qyx5Q0FBeUM7QUFDekM7Ozs7Ozs7OztHQVNHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBRXBFLDRDQUE0QztBQUM1Qyx5Q0FBeUM7QUFDekMseUNBQXlDO0FBQ3pDOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLEVBQUU7SUFDOUIsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtJQUMzQixJQUFJLGdCQUFnQixFQUFFO1FBQ3BCLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQztLQUMzQjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IHFEeW5hbWljUGxhdGZvcm0gfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgQ29yZVBsYXRmb3JtIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVQbGF0Zm9ybSA9ICgpOiBDb3JlUGxhdGZvcm0gPT4ge1xuICByZXR1cm4ge1xuICAgIGlzU2VydmVyOiBmYWxzZSxcbiAgICBpbXBvcnRTeW1ib2woY29udGFpbmVyRWwsIHVybCwgc3ltYm9sTmFtZSkge1xuICAgICAgY29uc3QgdXJsRG9jID0gdG9VcmwoY29udGFpbmVyRWwub3duZXJEb2N1bWVudCwgY29udGFpbmVyRWwsIHVybCkudG9TdHJpbmcoKTtcbiAgICAgIGNvbnN0IHVybENvcHkgPSBuZXcgVVJMKHVybERvYyk7XG4gICAgICB1cmxDb3B5Lmhhc2ggPSAnJztcbiAgICAgIHVybENvcHkuc2VhcmNoID0gJyc7XG4gICAgICBjb25zdCBpbXBvcnRVUkwgPSB1cmxDb3B5LmhyZWY7XG4gICAgICByZXR1cm4gaW1wb3J0KC8qIEB2aXRlLWlnbm9yZSAqLyBpbXBvcnRVUkwpLnRoZW4oKG1vZCkgPT4ge1xuICAgICAgICByZXR1cm4gZmluZFN5bWJvbChtb2QsIHN5bWJvbE5hbWUpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICByYWY6IChmbikgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG5leHRUaWNrOiAoZm4pID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKGZuKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2h1bmtGb3JTeW1ib2woKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gIH07XG59O1xuY29uc3QgZmluZFN5bWJvbCA9IChtb2R1bGU6IGFueSwgc3ltYm9sOiBzdHJpbmcpID0+IHtcbiAgaWYgKHN5bWJvbCBpbiBtb2R1bGUpIHtcbiAgICByZXR1cm4gbW9kdWxlW3N5bWJvbF07XG4gIH1cbiAgZm9yIChjb25zdCB2IG9mIE9iamVjdC52YWx1ZXMobW9kdWxlKSkge1xuICAgIGlmIChpc09iamVjdCh2KSAmJiBzeW1ib2wgaW4gdikge1xuICAgICAgcmV0dXJuICh2IGFzIGFueSlbc3ltYm9sXTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ29udmVydCByZWxhdGl2ZSBiYXNlIFVSSSBhbmQgcmVsYXRpdmUgVVJMIGludG8gYSBmdWxseSBxdWFsaWZpZWQgVVJMLlxuICpcbiAqIEBwYXJhbSBiYXNlIC1gUVJMYHMgYXJlIHJlbGF0aXZlLCBhbmQgdGhlcmVmb3JlIHRoZXkgbmVlZCBhIGJhc2UgZm9yIHJlc29sdXRpb24uXG4gKiAgICAtIGBFbGVtZW50YCB1c2UgYGJhc2Uub3duZXJEb2N1bWVudC5iYXNlVVJJYFxuICogICAgLSBgRG9jdW1lbnRgIHVzZSBgYmFzZS5iYXNlVVJJYFxuICogICAgLSBgc3RyaW5nYCB1c2UgYGJhc2VgIGFzIGlzXG4gKiAgICAtIGBRQ29uZmlnYCB1c2UgYGJhc2UuYmFzZVVSSWBcbiAqIEBwYXJhbSB1cmwgLSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIGZ1bGx5IHF1YWxpZmllZCBVUkwuXG4gKi9cbmV4cG9ydCBjb25zdCB0b1VybCA9IChkb2M6IERvY3VtZW50LCBjb250YWluZXJFbDogUXdpa0VsZW1lbnQsIHVybDogc3RyaW5nIHwgVVJMKTogVVJMID0+IHtcbiAgY29uc3QgYmFzZVVSSSA9IGRvYy5iYXNlVVJJO1xuICBjb25zdCBiYXNlID0gbmV3IFVSTChjb250YWluZXJFbC5nZXRBdHRyaWJ1dGUoJ3E6YmFzZScpID8/IGJhc2VVUkksIGJhc2VVUkkpO1xuICByZXR1cm4gbmV3IFVSTCh1cmwsIGJhc2UpO1xufTtcblxubGV0IF9wbGF0Zm9ybSA9IGNyZWF0ZVBsYXRmb3JtKCk7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi9yZWFkbWUubWQjc2V0UGxhdGZvcm1cIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuL3JlYWRtZS5tZCNzZXRQbGF0Zm9ybSBpbnN0ZWFkKVxuLyoqXG4gKiBTZXRzIHRoZSBgQ29yZVBsYXRmb3JtYC5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCB0byBvdmVycmlkZSB0aGUgcGxhdGZvcm0gaW4gdGVzdHMgdG8gY2hhbmdlIHRoZSBiZWhhdmlvciBvZixcbiAqIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgLCBhbmQgaW1wb3J0IHJlc29sdXRpb24uXG4gKlxuICogQHBhcmFtIGRvYyAtIFRoZSBkb2N1bWVudCBvZiB0aGUgYXBwbGljYXRpb24gZm9yIHdoaWNoIHRoZSBwbGF0Zm9ybSBpcyBuZWVkZWQuXG4gKiBAcGFyYW0gcGxhdGZvcm0gLSBUaGUgcGxhdGZvcm0gdG8gdXNlLlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCBzZXRQbGF0Zm9ybSA9IChwbHQ6IENvcmVQbGF0Zm9ybSkgPT4gKF9wbGF0Zm9ybSA9IHBsdCk7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi9yZWFkbWUubWQjZ2V0UGxhdGZvcm1cIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuL3JlYWRtZS5tZCNnZXRQbGF0Zm9ybSBpbnN0ZWFkKVxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYENvcmVQbGF0Zm9ybWAuXG4gKlxuICogVGhlIGBDb3JlUGxhdGZvcm1gIGlzIGFsc28gcmVzcG9uc2libGUgZm9yIHJldHJpZXZpbmcgdGhlIE1hbmlmZXN0LCB0aGF0IGNvbnRhaW5zIG1hcHBpbmdzXG4gKiBmcm9tIHN5bWJvbHMgdG8gamF2YXNjcmlwdCBpbXBvcnQgY2h1bmtzLiBGb3IgdGhpcyByZWFzb24sIGBDb3JlUGxhdGZvcm1gIGNhbid0IGJlIGdsb2JhbCwgYnV0XG4gKiBpcyBzcGVjaWZpYyB0byB0aGUgYXBwbGljYXRpb24gY3VycmVudGx5IHJ1bm5pbmcuIE9uIHNlcnZlciBpdCBpcyBwb3NzaWJsZSB0aGF0IG1hbnkgZGlmZmVyZW50XG4gKiBhcHBsaWNhdGlvbnMgYXJlIHJ1bm5pbmcgaW4gYSBzaW5nbGUgc2VydmVyIGluc3RhbmNlLCBhbmQgZm9yIHRoaXMgcmVhc29uIHRoZSBgQ29yZVBsYXRmb3JtYFxuICogaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0gZG9jT3JOb2RlIC0gVGhlIGRvY3VtZW50IChvciBub2RlKSBvZiB0aGUgYXBwbGljYXRpb24gZm9yIHdoaWNoIHRoZSBwbGF0Zm9ybSBpcyBuZWVkZWQuXG4gKiBAYWxwaGFcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IGdldFBsYXRmb3JtID0gKCkgPT4ge1xuICByZXR1cm4gX3BsYXRmb3JtO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU2VydmVyID0gKCkgPT4ge1xuICBpZiAocUR5bmFtaWNQbGF0Zm9ybSkge1xuICAgIHJldHVybiBfcGxhdGZvcm0uaXNTZXJ2ZXI7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiJdfQ==","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport function assertDefined(value, text, ...parts) {\n    if (qDev) {\n        if (value != null)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertEqual(value1, value2, text, ...parts) {\n    if (qDev) {\n        if (value1 === value2)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertTrue(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === true)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertNumber(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'number')\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2Vycm9yL2Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFcEMsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsS0FBUSxFQUNSLElBQVksRUFDWixHQUFHLEtBQVk7SUFFZixJQUFJLElBQUksRUFBRTtRQUNSLElBQUksS0FBSyxJQUFJLElBQUk7WUFBRSxPQUFPO1FBQzFCLE1BQU0sZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQ3pCLE1BQVcsRUFDWCxNQUFXLEVBQ1gsSUFBWSxFQUNaLEdBQUcsS0FBWTtJQUVmLElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxNQUFNLEtBQUssTUFBTTtZQUFFLE9BQU87UUFDOUIsTUFBTSxlQUFlLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7S0FDdkM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLEdBQUcsS0FBWTtJQUNuRSxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksTUFBTSxLQUFLLElBQUk7WUFBRSxPQUFPO1FBQzVCLE1BQU0sZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxHQUFHLEtBQVk7SUFDckUsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVE7WUFBRSxPQUFPO1FBQ3ZDLE1BQU0sZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZ0Vycm9yQW5kU3RvcCB9IGZyb20gJy4uL3V0aWwvbG9nJztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RGVmaW5lZDxUPihcbiAgdmFsdWU6IFQsXG4gIHRleHQ6IHN0cmluZyxcbiAgLi4ucGFydHM6IGFueVtdXG4pOiBhc3NlcnRzIHZhbHVlIGlzIE5vbk51bGxhYmxlPFQ+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkgcmV0dXJuO1xuICAgIHRocm93IGxvZ0Vycm9yQW5kU3RvcCh0ZXh0LCAuLi5wYXJ0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEVxdWFsKFxuICB2YWx1ZTE6IGFueSxcbiAgdmFsdWUyOiBhbnksXG4gIHRleHQ6IHN0cmluZyxcbiAgLi4ucGFydHM6IGFueVtdXG4pOiBhc3NlcnRzIHZhbHVlMSBpcyB0eXBlb2YgdmFsdWUyIHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodmFsdWUxID09PSB2YWx1ZTIpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUcnVlKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIHRydWUge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPT09IHRydWUpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROdW1iZXIodmFsdWUxOiBhbnksIHRleHQ6IHN0cmluZywgLi4ucGFydHM6IGFueVtdKTogYXNzZXJ0cyB2YWx1ZTEgaXMgbnVtYmVyIHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlMSA9PT0gJ251bWJlcicpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG4iXX0=","export const isPromise = (value) => {\n    return value instanceof Promise;\n};\nexport const safeCall = (call, thenFn, rejectFn) => {\n    try {\n        const promise = call();\n        if (isPromise(promise)) {\n            return promise.then(thenFn, rejectFn);\n        }\n        else {\n            return thenFn(promise);\n        }\n    }\n    catch (e) {\n        return rejectFn(e);\n    }\n};\nexport const then = (promise, thenFn) => {\n    return isPromise(promise) ? promise.then(thenFn) : thenFn(promise);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const promiseAllLazy = (promises) => {\n    if (promises.length > 0) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\nexport const delay = (timeout) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9wcm9taXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFVLEVBQXlCLEVBQUU7SUFDN0QsT0FBTyxLQUFLLFlBQVksT0FBTyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixJQUE2QixFQUM3QixNQUE4QyxFQUM5QyxRQUE0QixFQUNMLEVBQUU7SUFDekIsSUFBSTtRQUNGLE1BQU0sT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDOUM7YUFBTTtZQUNMLE9BQU8sTUFBTSxDQUFDLE9BQWMsQ0FBQyxDQUFDO1NBQy9CO0tBQ0Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQ2xCLE9BQTBCLEVBQzFCLE1BQThDLEVBQzNCLEVBQUU7SUFDckIsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFjLENBQUMsQ0FBQztBQUNuRixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsUUFBVyxFQUNrRCxFQUFFO0lBQy9ELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsSUFBSSxVQUFVLEVBQUU7UUFDZCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLFFBQWUsQ0FBQztBQUN6QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FDNUIsUUFBVyxFQUNXLEVBQUU7SUFDeEIsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN2QixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFRLENBQUM7S0FDckM7SUFDRCxPQUFPLFFBQWUsQ0FBQztBQUN6QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBSSxDQUFJLEVBQXVCLEVBQUU7SUFDNUQsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBWYWx1ZU9yUHJvbWlzZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBQcm9taXNlVHJlZTxUPiA9IFQgfCBQcm9taXNlPFQ+IHwgUHJvbWlzZTxUW10+IHwgQXJyYXk8UHJvbWlzZVRyZWU8VD4+O1xuXG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBQcm9taXNlPGFueT4gPT4ge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhZmVDYWxsID0gPFQsIEIsIEM+KFxuICBjYWxsOiAoKSA9PiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPixcbiAgcmVqZWN0Rm46IChyZWFzb246IGFueSkgPT4gQ1xuKTogVmFsdWVPclByb21pc2U8QiB8IEM+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwcm9taXNlID0gY2FsbCgpO1xuICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4odGhlbkZuIGFzIGFueSwgcmVqZWN0Rm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcmVqZWN0Rm4oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0aGVuID0gPFQsIEI+KFxuICBwcm9taXNlOiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPlxuKTogVmFsdWVPclByb21pc2U8Qj4gPT4ge1xuICByZXR1cm4gaXNQcm9taXNlKHByb21pc2UpID8gcHJvbWlzZS50aGVuKHRoZW5GbiBhcyBhbnkpIDogdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9taXNlQWxsID0gPFQgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10gfCBbXT4oXG4gIHByb21pc2VzOiBUXG4pOiBWYWx1ZU9yUHJvbWlzZTx7IC1yZWFkb25seSBbUCBpbiBrZXlvZiBUXTogQXdhaXRlZDxUW1BdPiB9PiA9PiB7XG4gIGNvbnN0IGhhc1Byb21pc2UgPSBwcm9taXNlcy5zb21lKGlzUHJvbWlzZSk7XG4gIGlmIChoYXNQcm9taXNlKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZXMgYXMgYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IHByb21pc2VBbGxMYXp5ID0gPFQgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10gfCBbXT4oXG4gIHByb21pc2VzOiBUXG4pOiBWYWx1ZU9yUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmIChwcm9taXNlcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKSBhcyBhbnk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2VzIGFzIGFueTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc05vdE51bGxhYmxlID0gPFQ+KHY6IFQpOiB2IGlzIE5vbk51bGxhYmxlPFQ+ID0+IHtcbiAgcmV0dXJuIHYgIT0gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWxheSA9ICh0aW1lb3V0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgc2V0VGltZW91dChyZXNvbHZlLCB0aW1lb3V0KTtcbiAgfSk7XG59O1xuIl19","import { qDev } from './qdev';\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nif (qDev) {\n    Object.freeze(EMPTY_ARRAY);\n    Object.freeze(EMPTY_OBJ);\n    Error.stackTraceLimit = 9999;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZmx5d2VpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBRTVCLElBQUksSUFBSSxFQUFFO0lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pCLEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0NBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9O1xuXG5pZiAocURldikge1xuICBPYmplY3QuZnJlZXplKEVNUFRZX0FSUkFZKTtcbiAgT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkopO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSA5OTk5O1xufVxuIl19","import { EMPTY_ARRAY } from '../util/flyweight';\nimport { assertQrl, createQRL, emitEvent, getSymbolHash } from './qrl-class';\nimport { isFunction, isString } from '../util/types';\nimport { qError, QError_dynamicImportFailed, QError_qrlMissingChunk, QError_unknownTypeArgument, } from '../error/error';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { getPlatform } from '../platform/platform';\nimport { assertDefined, assertTrue } from '../error/assert';\nimport { assertElement } from '../util/element';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\nconst announcedQRL = /*@__PURE__*/ new Set();\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @see `QRL`, `$(...)`\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - a set of lexically scoped variables to capture.\n * @alpha\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY, stackOffset = 0) => {\n    let chunk = null;\n    let symbolFn = null;\n    if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        if (qSerialize) {\n            let match;\n            const srcCode = String(chunkOrFn);\n            if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n                chunk = match[2];\n            }\n            else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n                const ref = 'QWIK-SELF';\n                const frames = new Error(ref).stack.split('\\n');\n                const start = frames.findIndex((f) => f.includes(ref));\n                const frame = frames[start + 2 + stackOffset];\n                match = frame.match(EXTRACT_FILE_NAME);\n                if (!match) {\n                    chunk = 'main';\n                }\n                else {\n                    chunk = match[1];\n                }\n            }\n            else {\n                throw qError(QError_dynamicImportFailed, srcCode);\n            }\n        }\n    }\n    else if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    if (announcedQRL.has(symbol)) {\n        // Emit event\n        announcedQRL.add(symbol);\n        emitEvent('qprefetch', {\n            symbols: [getSymbolHash(symbol)],\n        });\n    }\n    // Unwrap subscribers\n    return createQRL(chunk, symbol, null, symbolFn, null, lexicalScopeCapture, null);\n};\n/**\n * @internal\n */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return createQRL(null, symbolName, symbol, null, null, lexicalScopeCapture, null);\n};\n/**\n * @internal\n */\nexport const qrlDEV = (chunkOrFn, symbol, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const newQrl = qrl(chunkOrFn, symbol, lexicalScopeCapture, 1);\n    newQrl.$dev$ = opts;\n    return newQrl;\n};\n/**\n * @internal\n */\nexport const inlinedQrlDEV = (symbol, symbolName, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const qrl = inlinedQrl(symbol, symbolName, lexicalScopeCapture);\n    qrl.$dev$ = opts;\n    return qrl;\n};\nexport const serializeQRL = (qrl, opts = {}) => {\n    assertTrue(qSerialize, 'In order to serialize a QRL, qSerialize must be true');\n    assertQrl(qrl);\n    let symbol = qrl.$symbol$;\n    let chunk = qrl.$chunk$;\n    const refSymbol = qrl.$refSymbol$ ?? symbol;\n    const platform = getPlatform();\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol);\n        if (result) {\n            chunk = result[1];\n            if (!qrl.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    if (qRuntimeQrl && !chunk) {\n        chunk = '/runtimeQRL';\n        symbol = '_';\n    }\n    if (!chunk) {\n        throw qError(QError_qrlMissingChunk, qrl);\n    }\n    if (chunk.startsWith('./')) {\n        chunk = chunk.slice(2);\n    }\n    const parts = [chunk, '#', symbol];\n    const capture = qrl.$capture$;\n    const captureRef = qrl.$captureRef$;\n    if (captureRef && captureRef.length) {\n        if (opts.$getObjId$) {\n            const capture = captureRef.map(opts.$getObjId$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n        else if (opts.$addRefMap$) {\n            const capture = captureRef.map(opts.$addRefMap$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n    }\n    else if (capture && capture.length > 0) {\n        parts.push(`[${capture.join(' ')}]`);\n    }\n    return parts.join('');\n};\nexport const serializeQRLs = (existingQRLs, elCtx) => {\n    assertElement(elCtx.$element$);\n    const opts = {\n        $element$: elCtx.$element$,\n        $addRefMap$: (obj) => addToArray(elCtx.$refMap$, obj),\n    };\n    return existingQRLs.map((qrl) => serializeQRL(qrl, opts)).join('\\n');\n};\n/**\n * `./chunk#symbol[captures]\n */\nexport const parseQRL = (qrl, containerEl) => {\n    const endIdx = qrl.length;\n    const hashIdx = indexOf(qrl, 0, '#');\n    const captureIdx = indexOf(qrl, hashIdx, '[');\n    const chunkEndIdx = Math.min(hashIdx, captureIdx);\n    const chunk = qrl.substring(0, chunkEndIdx);\n    const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;\n    const symbolEndIdx = captureIdx;\n    // TODO\n    const symbol = symbolStartIdx == symbolEndIdx ? 'default' : qrl.substring(symbolStartIdx, symbolEndIdx);\n    const captureStartIdx = captureIdx;\n    const captureEndIdx = endIdx;\n    const capture = captureStartIdx === captureEndIdx\n        ? EMPTY_ARRAY\n        : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(' ');\n    const iQrl = createQRL(chunk, symbol, null, null, capture, null, null);\n    if (containerEl) {\n        iQrl.$setContainer$(containerEl);\n    }\n    return iQrl;\n};\nconst indexOf = (text, startIdx, char) => {\n    const endIdx = text.length;\n    const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);\n    return charIdx == -1 ? endIdx : charIdx;\n};\nconst addToArray = (array, obj) => {\n    const index = array.indexOf(obj);\n    if (index === -1) {\n        array.push(obj);\n        return array.length - 1;\n    }\n    return index;\n};\nexport const inflateQrl = (qrl, elCtx) => {\n    assertDefined(qrl.$capture$, 'invoke: qrl capture must be defined inside useLexicalScope()', qrl);\n    return (qrl.$captureRef$ = qrl.$capture$.map((idx) => {\n        const int = parseInt(idx, 10);\n        const obj = elCtx.$refMap$[int];\n        assertTrue(elCtx.$refMap$.length > int, 'out of bounds inflate access', idx);\n        return obj;\n    }));\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * State factory of the component.\n */\nexport const OnRenderProp = 'q:renderFn';\n/**\n * Component style host prefix\n */\nexport const ComponentStylesPrefixHost = '💎';\n/**\n * Component style content prefix\n */\nexport const ComponentStylesPrefixContent = '⭐️';\n/**\n * Prefix used to identify on listeners.\n */\nexport const EventPrefix = 'on:';\n/**\n * Attribute used to mark that an event listener is attached.\n */\nexport const EventAny = 'on:.';\n/**\n * `<some-element q:slot=\"...\">`\n */\nexport const QSlot = 'q:slot';\nexport const QSlotRef = 'q:sref';\nexport const QSlotS = 'q:s';\nexport const QStyle = 'q:style';\nexport const QScopedStyle = 'q:sstyle';\nexport const QCtxAttr = 'q:ctx';\nexport const QContainerAttr = 'q:container';\nexport const QContainerSelector = '[q\\\\:container]';\nexport const RenderEvent = 'qRender';\n/**\n * `<q:slot name=\"...\">`\n */\nexport const QSlotInertName = '\\u0000';\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const ELEMENT_ID_Q_PROPS_PREFIX = '&';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Vycy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL21hcmtlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDO0FBRTlDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSxDQUFDO0FBRWpEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQztBQUVqQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDL0I7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQztBQUM1QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUVoQyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDO0FBRTVDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDO0FBRXBELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDckM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztBQUNyQyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0YXRlIGZhY3Rvcnkgb2YgdGhlIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IE9uUmVuZGVyUHJvcCA9ICdxOnJlbmRlckZuJztcblxuLyoqXG4gKiBDb21wb25lbnQgc3R5bGUgaG9zdCBwcmVmaXhcbiAqL1xuZXhwb3J0IGNvbnN0IENvbXBvbmVudFN0eWxlc1ByZWZpeEhvc3QgPSAn8J+Sjic7XG5cbi8qKlxuICogQ29tcG9uZW50IHN0eWxlIGNvbnRlbnQgcHJlZml4XG4gKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ID0gJ+KtkO+4jyc7XG5cbi8qKlxuICogUHJlZml4IHVzZWQgdG8gaWRlbnRpZnkgb24gbGlzdGVuZXJzLlxuICovXG5leHBvcnQgY29uc3QgRXZlbnRQcmVmaXggPSAnb246JztcblxuLyoqXG4gKiBBdHRyaWJ1dGUgdXNlZCB0byBtYXJrIHRoYXQgYW4gZXZlbnQgbGlzdGVuZXIgaXMgYXR0YWNoZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBFdmVudEFueSA9ICdvbjouJztcbi8qKlxuICogYDxzb21lLWVsZW1lbnQgcTpzbG90PVwiLi4uXCI+YFxuICovXG5leHBvcnQgY29uc3QgUVNsb3QgPSAncTpzbG90JztcbmV4cG9ydCBjb25zdCBRU2xvdFJlZiA9ICdxOnNyZWYnO1xuZXhwb3J0IGNvbnN0IFFTbG90UyA9ICdxOnMnO1xuZXhwb3J0IGNvbnN0IFFTdHlsZSA9ICdxOnN0eWxlJztcbmV4cG9ydCBjb25zdCBRU2NvcGVkU3R5bGUgPSAncTpzc3R5bGUnO1xuZXhwb3J0IGNvbnN0IFFDdHhBdHRyID0gJ3E6Y3R4JztcblxuZXhwb3J0IGNvbnN0IFFDb250YWluZXJBdHRyID0gJ3E6Y29udGFpbmVyJztcblxuZXhwb3J0IGNvbnN0IFFDb250YWluZXJTZWxlY3RvciA9ICdbcVxcXFw6Y29udGFpbmVyXSc7XG5cbmV4cG9ydCBjb25zdCBSZW5kZXJFdmVudCA9ICdxUmVuZGVyJztcbi8qKlxuICogYDxxOnNsb3QgbmFtZT1cIi4uLlwiPmBcbiAqL1xuZXhwb3J0IGNvbnN0IFFTbG90SW5lcnROYW1lID0gJ1xcdTAwMDAnO1xuXG5leHBvcnQgY29uc3QgRUxFTUVOVF9JRCA9ICdxOmlkJztcbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lEX1NFTEVDVE9SID0gJ1txXFxcXDppZF0nO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSURfUFJFRklYID0gJyMnO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSURfUV9QUk9QU19QUkVGSVggPSAnJic7XG4iXX0=","import { isArray } from '../util/types';\nimport { assertDefined } from '../error/assert';\nimport { QContainerSelector, RenderEvent } from '../util/markers';\nimport { qError, QError_useInvokeContext, QError_useMethodOutsideContext } from '../error/error';\nimport { seal } from '../util/qdev';\nimport { isPromise } from '../util/promises';\nlet _context;\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            return (document.__q_context__ = newInvokeContextFromTuple(context));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvokeContext = () => {\n    const ctx = getInvokeContext();\n    if (ctx.$event$ !== RenderEvent) {\n        throw qError(QError_useInvokeContext);\n    }\n    assertDefined(ctx.$hostElement$, `invoke: $hostElement$ must be defined`, ctx);\n    assertDefined(ctx.$waitOn$, `invoke: $waitOn$ must be defined`, ctx);\n    assertDefined(ctx.$renderCtx$, `invoke: $renderCtx$ must be defined`, ctx);\n    assertDefined(ctx.$subscriber$, `invoke: $subscriber$ must be defined`, ctx);\n    return ctx;\n};\nexport const useBindInvokeContext = (callback) => {\n    if (callback == null) {\n        return callback;\n    }\n    const ctx = getInvokeContext();\n    return ((...args) => {\n        return invoke(ctx, callback.bind(undefined, ...args));\n    });\n};\nexport const invoke = (context, fn, ...args) => {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(null, args);\n    }\n    finally {\n        _context = previousContext;\n    }\n    return returnValue;\n};\nexport const waitAndRun = (ctx, callback) => {\n    const waitOn = ctx.$waitOn$;\n    if (waitOn.length === 0) {\n        const result = callback();\n        if (isPromise(result)) {\n            waitOn.push(result);\n        }\n    }\n    else {\n        waitOn.push(Promise.all(waitOn).then(callback));\n    }\n};\nexport const newInvokeContextFromTuple = (context) => {\n    const element = context[0];\n    return newInvokeContext(undefined, element, context[1], context[2]);\n};\nexport const newInvokeContext = (hostElement, element, event, url) => {\n    const ctx = {\n        $seq$: 0,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $url$: url,\n        $qrl$: undefined,\n        $props$: undefined,\n        $renderCtx$: undefined,\n        $subscriber$: undefined,\n        $waitOn$: undefined,\n    };\n    seal(ctx);\n    return ctx;\n};\nexport const getWrappingContainer = (el) => {\n    return el.closest(QContainerSelector);\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../qrl/qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which\n * ends in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example, these function calls are equivalent:\n *\n * - `component$(() => {...})` is same as `component($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - a function that should have its first argument automatically `$`.\n * @alpha\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, $(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxDQUFDLEVBQU8sTUFBTSxtQkFBbUIsQ0FBQztBQUUzQyxtREFBbUQ7QUFDbkQseUNBQXlDO0FBQ3pDLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsRUFBNkMsRUFDTCxFQUFFO0lBQzFDLE9BQU8sVUFBVSxLQUFZLEVBQUUsR0FBRyxJQUFVO1FBQzFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJCwgUVJMIH0gZnJvbSAnLi4vcXJsL3FybC5wdWJsaWMnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZ1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZyBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGUgYSBgX19fXyQoLi4uKWAgY29udmVuaWVuY2UgbWV0aG9kIGZyb20gYF9fXyguLi4pYC5cbiAqXG4gKiBJdCBpcyB2ZXJ5IGNvbW1vbiBmb3IgZnVuY3Rpb25zIHRvIHRha2UgYSBsYXp5LWxvYWRhYmxlIHJlc291cmNlIGFzIGEgZmlyc3QgYXJndW1lbnQuIEZvciB0aGlzXG4gKiByZWFzb24sIHRoZSBRd2lrIE9wdGltaXplciBhdXRvbWF0aWNhbGx5IGV4dHJhY3RzIHRoZSBmaXJzdCBhcmd1bWVudCBmcm9tIGFueSBmdW5jdGlvbiB3aGljaFxuICogZW5kcyBpbiBgJGAuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IGBmb28kKGFyZzApYCBhbmQgYGZvbygkKGFyZzApKWAgYXJlIGVxdWl2YWxlbnQgd2l0aCByZXNwZWN0IHRvIFF3aWsgT3B0aW1pemVyLlxuICogVGhlIGZvcm1lciBpcyBqdXN0IGEgc2hvcnRoYW5kIGZvciB0aGUgbGF0dGVyLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGVzZSBmdW5jdGlvbiBjYWxscyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAtIGBjb21wb25lbnQkKCgpID0+IHsuLi59KWAgaXMgc2FtZSBhcyBgY29tcG9uZW50KCQoKCkgPT4gey4uLn0pKWBcbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiBteUFwaShjYWxsYmFjazogUVJMPCgpID0+IHZvaWQ+KTogdm9pZCB7XG4gKiAgIC8vIC4uLlxuICogfVxuICpcbiAqIGV4cG9ydCBjb25zdCBteUFwaSQgPSBpbXBsaWNpdCRGaXJzdEFyZyhteUFwaSk7XG4gKiAvLyB0eXBlIG9mIG15QXBpJDogKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZFxuICpcbiAqIC8vIGNhbiBiZSB1c2VkIGFzOlxuICogbXlBcGkkKCgpID0+IGNvbnNvbGUubG9nKCdjYWxsYmFjaycpKTtcbiAqXG4gKiAvLyB3aWxsIGJlIHRyYW5zcGlsZWQgdG86XG4gKiAvLyBGSUxFOiA8Y3VycmVudCBmaWxlPlxuICogbXlBcGkocXJsKCcuL2NodW5rLWFiYy5qcycsICdjYWxsYmFjaycpKTtcbiAqXG4gKiAvLyBGSUxFOiBjaHVuay1hYmMuanNcbiAqIGV4cG9ydCBjb25zdCBjYWxsYmFjayA9ICgpID0+IGNvbnNvbGUubG9nKCdjYWxsYmFjaycpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGZuIC0gYSBmdW5jdGlvbiB0aGF0IHNob3VsZCBoYXZlIGl0cyBmaXJzdCBhcmd1bWVudCBhdXRvbWF0aWNhbGx5IGAkYC5cbiAqIEBhbHBoYVxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgaW1wbGljaXQkRmlyc3RBcmcgPSA8RklSU1QsIFJFU1QgZXh0ZW5kcyBhbnlbXSwgUkVUPihcbiAgZm46IChmaXJzdDogUVJMPEZJUlNUPiwgLi4ucmVzdDogUkVTVCkgPT4gUkVUXG4pOiAoKGZpcnN0OiBGSVJTVCwgLi4ucmVzdDogUkVTVCkgPT4gUkVUKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbiAoZmlyc3Q6IEZJUlNULCAuLi5yZXN0OiBSRVNUKTogUkVUIHtcbiAgICByZXR1cm4gZm4uY2FsbChudWxsLCAkKGZpcnN0KSwgLi4ucmVzdCk7XG4gIH07XG59O1xuIl19","import { destroyWatch } from '../use/use-watch';\nexport const Q_CTX = '_qc_';\nexport const HOST_FLAG_DIRTY = 1 << 0;\nexport const HOST_FLAG_NEED_ATTACH_LISTENER = 1 << 1;\nexport const HOST_FLAG_MOUNTED = 1 << 2;\nexport const HOST_FLAG_DYNAMIC = 1 << 3;\nexport const tryGetContext = (element) => {\n    return element[Q_CTX];\n};\nexport const getContext = (element) => {\n    let ctx = tryGetContext(element);\n    if (!ctx) {\n        element[Q_CTX] = ctx = {\n            $flags$: 0,\n            $id$: '',\n            $element$: element,\n            $refMap$: [],\n            li: [],\n            $watches$: null,\n            $seq$: null,\n            $slots$: null,\n            $scopeIds$: null,\n            $appendStyles$: null,\n            $props$: null,\n            $vdom$: null,\n            $componentQrl$: null,\n            $contexts$: null,\n            $parent$: null,\n        };\n    }\n    return ctx;\n};\nexport const cleanupContext = (elCtx, subsManager) => {\n    const el = elCtx.$element$;\n    elCtx.$watches$?.forEach((watch) => {\n        subsManager.$clearSub$(watch);\n        destroyWatch(watch);\n    });\n    if (elCtx.$componentQrl$) {\n        subsManager.$clearSub$(el);\n    }\n    elCtx.$componentQrl$ = null;\n    elCtx.$seq$ = null;\n    elCtx.$watches$ = null;\n    elCtx.$flags$ = 0;\n    el[Q_CTX] = undefined;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zdGF0ZS9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQW9CLE1BQU0sa0JBQWtCLENBQUM7QUFTbEUsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQztBQU01QixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QyxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3JELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQW9CeEMsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsT0FBb0IsRUFBd0IsRUFBRTtJQUMxRSxPQUFRLE9BQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFpQyxFQUFZLEVBQUU7SUFDeEUsSUFBSSxHQUFHLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBRSxDQUFDO0lBQ2xDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDUCxPQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHO1lBQzlCLE9BQU8sRUFBRSxDQUFDO1lBQ1YsSUFBSSxFQUFFLEVBQUU7WUFDUixTQUFTLEVBQUUsT0FBTztZQUNsQixRQUFRLEVBQUUsRUFBRTtZQUNaLEVBQUUsRUFBRSxFQUFFO1lBQ04sU0FBUyxFQUFFLElBQUk7WUFDZixLQUFLLEVBQUUsSUFBSTtZQUNYLE9BQU8sRUFBRSxJQUFJO1lBQ2IsVUFBVSxFQUFFLElBQUk7WUFDaEIsY0FBYyxFQUFFLElBQUk7WUFDcEIsT0FBTyxFQUFFLElBQUk7WUFDYixNQUFNLEVBQUUsSUFBSTtZQUNaLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQztLQUNIO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxLQUFlLEVBQUUsV0FBZ0MsRUFBRSxFQUFFO0lBQ2xGLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7SUFDM0IsS0FBSyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNqQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQztJQUNILElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTtRQUN4QixXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzVCO0lBQ0QsS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7SUFDNUIsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDbkIsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDdkIsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFFakIsRUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLFNBQVMsQ0FBQztBQUNqQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE9uUmVuZGVyRm4gfSBmcm9tICcuLi9jb21wb25lbnQvY29tcG9uZW50LnB1YmxpYyc7XG5pbXBvcnQgeyBkZXN0cm95V2F0Y2gsIFN1YnNjcmliZXJFZmZlY3QgfSBmcm9tICcuLi91c2UvdXNlLXdhdGNoJztcbmltcG9ydCB0eXBlIHsgUVJMSW50ZXJuYWwgfSBmcm9tICcuLi9xcmwvcXJsLWNsYXNzJztcbmltcG9ydCB0eXBlIHsgUVJMIH0gZnJvbSAnLi4vcXJsL3FybC5wdWJsaWMnO1xuaW1wb3J0IHR5cGUgeyBTdHlsZUFwcGVuZCB9IGZyb20gJy4uL3VzZS91c2UtY29yZSc7XG5pbXBvcnQgdHlwZSB7IFByb2Nlc3NlZEpTWE5vZGUgfSBmcm9tICcuLi9yZW5kZXIvZG9tL3JlbmRlci1kb20nO1xuaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCwgVmlydHVhbEVsZW1lbnQgfSBmcm9tICcuLi9yZW5kZXIvZG9tL3ZpcnR1YWwtZWxlbWVudCc7XG5pbXBvcnQgdHlwZSB7IFN1YnNjcmlwdGlvbk1hbmFnZXIgfSBmcm9tICcuL2NvbW1vbic7XG5pbXBvcnQgdHlwZSB7IExpc3RlbmVyIH0gZnJvbSAnLi9saXN0ZW5lcnMnO1xuXG5leHBvcnQgY29uc3QgUV9DVFggPSAnX3FjXyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUUNvbnRleHRFdmVudHMge1xuICBbZXZlbnROYW1lOiBzdHJpbmddOiBRUkwgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjb25zdCBIT1NUX0ZMQUdfRElSVFkgPSAxIDw8IDA7XG5leHBvcnQgY29uc3QgSE9TVF9GTEFHX05FRURfQVRUQUNIX0xJU1RFTkVSID0gMSA8PCAxO1xuZXhwb3J0IGNvbnN0IEhPU1RfRkxBR19NT1VOVEVEID0gMSA8PCAyO1xuZXhwb3J0IGNvbnN0IEhPU1RfRkxBR19EWU5BTUlDID0gMSA8PCAzO1xuXG5leHBvcnQgaW50ZXJmYWNlIFFDb250ZXh0IHtcbiAgJGVsZW1lbnQkOiBRd2lrRWxlbWVudDtcbiAgJHJlZk1hcCQ6IGFueVtdO1xuICAkZmxhZ3MkOiBudW1iZXI7XG4gICRpZCQ6IHN0cmluZztcbiAgJHByb3BzJDogUmVjb3JkPHN0cmluZywgYW55PiB8IG51bGw7XG4gICRjb21wb25lbnRRcmwkOiBRUkxJbnRlcm5hbDxPblJlbmRlckZuPGFueT4+IHwgbnVsbDtcbiAgbGk6IExpc3RlbmVyW107XG4gICRzZXEkOiBhbnlbXSB8IG51bGw7XG4gICR3YXRjaGVzJDogU3Vic2NyaWJlckVmZmVjdFtdIHwgbnVsbDtcbiAgJGNvbnRleHRzJDogTWFwPHN0cmluZywgYW55PiB8IG51bGw7XG4gICRhcHBlbmRTdHlsZXMkOiBTdHlsZUFwcGVuZFtdIHwgbnVsbDtcbiAgJHNjb3BlSWRzJDogc3RyaW5nW10gfCBudWxsO1xuICAkdmRvbSQ6IFByb2Nlc3NlZEpTWE5vZGUgfCBudWxsO1xuICAkc2xvdHMkOiBQcm9jZXNzZWRKU1hOb2RlW10gfCBudWxsO1xuICAkcGFyZW50JDogUUNvbnRleHQgfCBudWxsO1xufVxuXG5leHBvcnQgY29uc3QgdHJ5R2V0Q29udGV4dCA9IChlbGVtZW50OiBRd2lrRWxlbWVudCk6IFFDb250ZXh0IHwgdW5kZWZpbmVkID0+IHtcbiAgcmV0dXJuIChlbGVtZW50IGFzIGFueSlbUV9DVFhdO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENvbnRleHQgPSAoZWxlbWVudDogRWxlbWVudCB8IFZpcnR1YWxFbGVtZW50KTogUUNvbnRleHQgPT4ge1xuICBsZXQgY3R4ID0gdHJ5R2V0Q29udGV4dChlbGVtZW50KSE7XG4gIGlmICghY3R4KSB7XG4gICAgKGVsZW1lbnQgYXMgYW55KVtRX0NUWF0gPSBjdHggPSB7XG4gICAgICAkZmxhZ3MkOiAwLFxuICAgICAgJGlkJDogJycsXG4gICAgICAkZWxlbWVudCQ6IGVsZW1lbnQsXG4gICAgICAkcmVmTWFwJDogW10sXG4gICAgICBsaTogW10sXG4gICAgICAkd2F0Y2hlcyQ6IG51bGwsXG4gICAgICAkc2VxJDogbnVsbCxcbiAgICAgICRzbG90cyQ6IG51bGwsXG4gICAgICAkc2NvcGVJZHMkOiBudWxsLFxuICAgICAgJGFwcGVuZFN0eWxlcyQ6IG51bGwsXG4gICAgICAkcHJvcHMkOiBudWxsLFxuICAgICAgJHZkb20kOiBudWxsLFxuICAgICAgJGNvbXBvbmVudFFybCQ6IG51bGwsXG4gICAgICAkY29udGV4dHMkOiBudWxsLFxuICAgICAgJHBhcmVudCQ6IG51bGwsXG4gICAgfTtcbiAgfVxuICByZXR1cm4gY3R4O1xufTtcblxuZXhwb3J0IGNvbnN0IGNsZWFudXBDb250ZXh0ID0gKGVsQ3R4OiBRQ29udGV4dCwgc3Vic01hbmFnZXI6IFN1YnNjcmlwdGlvbk1hbmFnZXIpID0+IHtcbiAgY29uc3QgZWwgPSBlbEN0eC4kZWxlbWVudCQ7XG4gIGVsQ3R4LiR3YXRjaGVzJD8uZm9yRWFjaCgod2F0Y2gpID0+IHtcbiAgICBzdWJzTWFuYWdlci4kY2xlYXJTdWIkKHdhdGNoKTtcbiAgICBkZXN0cm95V2F0Y2god2F0Y2gpO1xuICB9KTtcbiAgaWYgKGVsQ3R4LiRjb21wb25lbnRRcmwkKSB7XG4gICAgc3Vic01hbmFnZXIuJGNsZWFyU3ViJChlbCk7XG4gIH1cbiAgZWxDdHguJGNvbXBvbmVudFFybCQgPSBudWxsO1xuICBlbEN0eC4kc2VxJCA9IG51bGw7XG4gIGVsQ3R4LiR3YXRjaGVzJCA9IG51bGw7XG4gIGVsQ3R4LiRmbGFncyQgPSAwO1xuXG4gIChlbCBhcyBhbnkpW1FfQ1RYXSA9IHVuZGVmaW5lZDtcbn07XG4iXX0=","export const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\nexport const fromKebabToCamelCase = (text) => {\n    return text.replace(/-./g, (x) => x[1].toUpperCase());\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsSUFBWSxFQUFVLEVBQUU7SUFDM0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGZyb21DYW1lbFRvS2ViYWJDYXNlID0gKHRleHQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoLyhbQS1aXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZnJvbUtlYmFiVG9DYW1lbENhc2UgPSAodGV4dDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvLS4vZywgKHgpID0+IHhbMV0udG9VcHBlckNhc2UoKSk7XG59O1xuIl19","import { inflateQrl, parseQRL } from '../qrl/qrl';\nimport { assertQrl, isQrl } from '../qrl/qrl-class';\nimport { $ } from '../qrl/qrl.public';\nimport { isArray } from '../util/types';\nimport { assertTrue } from '../error/assert';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { fromCamelToKebabCase } from '../util/case';\nconst ON_PROP_REGEX = /^(on|window:|document:)/;\nexport const PREVENT_DEFAULT = 'preventdefault:';\nexport const isOnProp = (prop) => {\n    return prop.endsWith('$') && ON_PROP_REGEX.test(prop);\n};\nexport const groupListeners = (listeners) => {\n    if (listeners.length === 0) {\n        return EMPTY_ARRAY;\n    }\n    if (listeners.length === 1) {\n        const listener = listeners[0];\n        return [[listener[0], [listener[1]]]];\n    }\n    const keys = [];\n    for (let i = 0; i < listeners.length; i++) {\n        const eventName = listeners[i][0];\n        if (!keys.includes(eventName)) {\n            keys.push(eventName);\n        }\n    }\n    return keys.map((eventName) => {\n        return [eventName, listeners.filter((l) => l[0] === eventName).map((a) => a[1])];\n    });\n};\nexport const setEvent = (existingListeners, prop, input, containerEl) => {\n    assertTrue(prop.endsWith('$'), 'render: event property does not end with $', prop);\n    prop = normalizeOnProp(prop.slice(0, -1));\n    if (input) {\n        if (isArray(input)) {\n            existingListeners.push(...input.map((q) => [prop, ensureQrl(q, containerEl)]));\n        }\n        else {\n            existingListeners.push([prop, ensureQrl(input, containerEl)]);\n        }\n    }\n    return prop;\n};\nconst PREFIXES = ['on', 'window:on', 'document:on'];\nconst SCOPED = ['on', 'on-window', 'on-document'];\nexport const normalizeOnProp = (prop) => {\n    let scope = 'on';\n    for (let i = 0; i < PREFIXES.length; i++) {\n        const prefix = PREFIXES[i];\n        if (prop.startsWith(prefix)) {\n            scope = SCOPED[i];\n            prop = prop.slice(prefix.length);\n            break;\n        }\n    }\n    if (prop.startsWith('-')) {\n        prop = fromCamelToKebabCase(prop.slice(1));\n    }\n    else {\n        prop = prop.toLowerCase();\n    }\n    return scope + ':' + prop;\n};\nconst ensureQrl = (value, containerEl) => {\n    if (qSerialize && !qRuntimeQrl) {\n        assertQrl(value);\n        value.$setContainer$(containerEl);\n        return value;\n    }\n    const qrl = isQrl(value) ? value : $(value);\n    qrl.$setContainer$(containerEl);\n    return qrl;\n};\nexport const getDomListeners = (elCtx, containerEl) => {\n    const attributes = elCtx.$element$.attributes;\n    const listeners = [];\n    for (let i = 0; i < attributes.length; i++) {\n        const { name, value } = attributes.item(i);\n        if (name.startsWith('on:') ||\n            name.startsWith('on-window:') ||\n            name.startsWith('on-document:')) {\n            const urls = value.split('\\n');\n            for (const url of urls) {\n                const qrl = parseQRL(url, containerEl);\n                if (qrl.$capture$) {\n                    inflateQrl(qrl, elCtx);\n                }\n                listeners.push([name, qrl]);\n            }\n        }\n    }\n    return listeners;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdGVuZXJzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3N0YXRlL2xpc3RlbmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBZSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBR3BELE1BQU0sYUFBYSxHQUFHLHlCQUF5QixDQUFDO0FBSWhELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQztBQUVqRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFZLEVBQVcsRUFBRTtJQUNoRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4RCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxTQUFxQixFQUE2QixFQUFFO0lBQ2pGLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDMUIsT0FBTyxXQUFXLENBQUM7S0FDcEI7SUFDRCxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzFCLE1BQU0sUUFBUSxH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LFVBQVUsQ0FBQyxZQUFZLENBQUM7WUFDN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsRUFDL0I7WUFDQSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO2dCQUN0QixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO2dCQUN2QyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUU7b0JBQ2pCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQ3hCO2dCQUNELFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM3QjtTQUNGO0tBQ0Y7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmZsYXRlUXJsLCBwYXJzZVFSTCB9IGZyb20gJy4uL3FybC9xcmwnO1xuaW1wb3J0IHsgYXNzZXJ0UXJsLCBpc1FybCwgUVJMSW50ZXJuYWwgfSBmcm9tICcuLi9xcmwvcXJsLWNsYXNzJztcbmltcG9ydCB7ICQgfSBmcm9tICcuLi9xcmwvcXJsLnB1YmxpYyc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBhc3NlcnRUcnVlIH0gZnJvbSAnLi4vZXJyb3IvYXNzZXJ0JztcbmltcG9ydCB7IEVNUFRZX0FSUkFZIH0gZnJvbSAnLi4vdXRpbC9mbHl3ZWlnaHQnO1xuaW1wb3J0IHsgcVJ1bnRpbWVRcmwsIHFTZXJpYWxpemUgfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgZnJvbUNhbWVsVG9LZWJhYkNhc2UgfSBmcm9tICcuLi91dGlsL2Nhc2UnO1xuaW1wb3J0IHR5cGUgeyBRQ29udGV4dCB9IGZyb20gJy4vY29udGV4dCc7XG5cbmNvbnN0IE9OX1BST1BfUkVHRVggPSAvXihvbnx3aW5kb3c6fGRvY3VtZW50OikvO1xuXG5leHBvcnQgdHlwZSBMaXN0ZW5lciA9IFtldmVudE5hbWU6IHN0cmluZywgcXJsOiBRUkxJbnRlcm5hbF07XG5cbmV4cG9ydCBjb25zdCBQUkVWRU5UX0RFRkFVTFQgPSAncHJldmVudGRlZmF1bHQ6JztcblxuZXhwb3J0IGNvbnN0IGlzT25Qcm9wID0gKHByb3A6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gcHJvcC5lbmRzV2l0aCgnJCcpICYmIE9OX1BST1BfUkVHRVgudGVzdChwcm9wKTtcbn07XG5cbmV4cG9ydCBjb25zdCBncm91cExpc3RlbmVycyA9IChsaXN0ZW5lcnM6IExpc3RlbmVyW10pOiBbc3RyaW5nLCBRUkxJbnRlcm5hbFtdXVtdID0+IHtcbiAgaWYgKGxpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gRU1QVFlfQVJSQVk7XG4gIH1cbiAgaWYgKGxpc3RlbmVycy5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBsaXN0ZW5lciA9IGxpc3RlbmVyc1swXTtcbiAgICByZXR1cm4gW1tsaXN0ZW5lclswXSwgW2xpc3RlbmVyWzFdXV1dO1xuICB9XG5cbiAgY29uc3Qga2V5czogc3RyaW5nW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBldmVudE5hbWUgPSBsaXN0ZW5lcnNbaV1bMF07XG4gICAgaWYgKCFrZXlzLmluY2x1ZGVzKGV2ZW50TmFtZSkpIHtcbiAgICAgIGtleXMucHVzaChldmVudE5hbWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ga2V5cy5tYXAoKGV2ZW50TmFtZSkgPT4ge1xuICAgIHJldHVybiBbZXZlbnROYW1lLCBsaXN0ZW5lcnMuZmlsdGVyKChsKSA9PiBsWzBdID09PSBldmVudE5hbWUpLm1hcCgoYSkgPT4gYVsxXSldO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRFdmVudCA9IChcbiAgZXhpc3RpbmdMaXN0ZW5lcnM6IExpc3RlbmVyW10sXG4gIHByb3A6IHN0cmluZyxcbiAgaW5wdXQ6IGFueSxcbiAgY29udGFpbmVyRWw6IEVsZW1lbnQgfCB1bmRlZmluZWRcbikgPT4ge1xuICBhc3NlcnRUcnVlKHByb3AuZW5kc1dpdGgoJyQnKSwgJ3JlbmRlcjogZXZlbnQgcHJvcGVydHkgZG9lcyBub3QgZW5kIHdpdGggJCcsIHByb3ApO1xuICBwcm9wID0gbm9ybWFsaXplT25Qcm9wKHByb3Auc2xpY2UoMCwgLTEpKTtcbiAgaWYgKGlucHV0KSB7XG4gICAgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICBleGlzdGluZ0xpc3RlbmVycy5wdXNoKC4uLmlucHV0Lm1hcCgocSkgPT4gW3Byb3AsIGVuc3VyZVFybChxLCBjb250YWluZXJFbCldIGFzIExpc3RlbmVyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nTGlzdGVuZXJzLnB1c2goW3Byb3AsIGVuc3VyZVFybChpbnB1dCwgY29udGFpbmVyRWwpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wO1xufTtcblxuY29uc3QgUFJFRklYRVMgPSBbJ29uJywgJ3dpbmRvdzpvbicsICdkb2N1bWVudDpvbiddO1xuY29uc3QgU0NPUEVEID0gWydvbicsICdvbi13aW5kb3cnLCAnb24tZG9jdW1lbnQnXTtcblxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZU9uUHJvcCA9IChwcm9wOiBzdHJpbmcpID0+IHtcbiAgbGV0IHNjb3BlID0gJ29uJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBQUkVGSVhFUy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByZWZpeCA9IFBSRUZJWEVTW2ldO1xuICAgIGlmIChwcm9wLnN0YXJ0c1dpdGgocHJlZml4KSkge1xuICAgICAgc2NvcGUgPSBTQ09QRURbaV07XG4gICAgICBwcm9wID0gcHJvcC5zbGljZShwcmVmaXgubGVuZ3RoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAocHJvcC5zdGFydHNXaXRoKCctJykpIHtcbiAgICBwcm9wID0gZnJvbUNhbWVsVG9LZWJhYkNhc2UocHJvcC5zbGljZSgxKSk7XG4gIH0gZWxzZSB7XG4gICAgcHJvcCA9IHByb3AudG9Mb3dlckNhc2UoKTtcbiAgfVxuICByZXR1cm4gc2NvcGUgKyAnOicgKyBwcm9wO1xufTtcblxuY29uc3QgZW5zdXJlUXJsID0gKHZhbHVlOiBhbnksIGNvbnRhaW5lckVsOiBFbGVtZW50IHwgdW5kZWZpbmVkKSA9PiB7XG4gIGlmIChxU2VyaWFsaXplICYmICFxUnVudGltZVFybCkge1xuICAgIGFzc2VydFFybCh2YWx1ZSk7XG4gICAgdmFsdWUuJHNldENvbnRhaW5lciQoY29udGFpbmVyRWwpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCBxcmwgPSBpc1FybCh2YWx1ZSkgPyB2YWx1ZSA6ICgkKHZhbHVlKSBhcyBRUkxJbnRlcm5hbCk7XG4gIHFybC4kc2V0Q29udGFpbmVyJChjb250YWluZXJFbCk7XG4gIHJldHVybiBxcmw7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RG9tTGlzdGVuZXJzID0gKGVsQ3R4OiBRQ29udGV4dCwgY29udGFpbmVyRWw6IEVsZW1lbnQpOiBMaXN0ZW5lcltdID0+IHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IChlbEN0eC4kZWxlbWVudCQgYXMgRWxlbWVudCkuYXR0cmlidXRlcztcbiAgY29uc3QgbGlzdGVuZXJzOiBMaXN0ZW5lcltdID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGF0dHJpYnV0ZXMuaXRlbShpKSE7XG4gICAgaWYgKFxuICAgICAgbmFtZS5zdGFydHNXaXRoKCdvbjonKSB8fFxuICAgICAgbmFtZS5zdGFydHNXaXRoKCdvbi13aW5kb3c6JykgfHxcbiAgICAgIG5hbWUuc3RhcnRzV2l0aCgnb24tZG9jdW1lbnQ6JylcbiAgICApIHtcbiAgICAgIGNvbnN0IHVybHMgPSB2YWx1ZS5zcGxpdCgnXFxuJyk7XG4gICAgICBmb3IgKGNvbnN0IHVybCBvZiB1cmxzKSB7XG4gICAgICAgIGNvbnN0IHFybCA9IHBhcnNlUVJMKHVybCwgY29udGFpbmVyRWwpO1xuICAgICAgICBpZiAocXJsLiRjYXB0dXJlJCkge1xuICAgICAgICAgIGluZmxhdGVRcmwocXJsLCBlbEN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdGVuZXJzLnB1c2goW25hbWUsIHFybF0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbGlzdGVuZXJzO1xufTtcbiJdfQ==","import { verifySerializable } from '../state/common';\nimport { getContext } from '../state/context';\nimport { qDev } from '../util/qdev';\nimport { useInvokeContext } from './use-core';\nexport const useSequentialScope = () => {\n    const ctx = useInvokeContext();\n    const i = ctx.$seq$;\n    const hostElement = ctx.$hostElement$;\n    const elCtx = getContext(hostElement);\n    const seq = elCtx.$seq$ ? elCtx.$seq$ : (elCtx.$seq$ = []);\n    ctx.$seq$++;\n    const set = (value) => {\n        if (qDev) {\n            verifySerializable(value);\n        }\n        return (seq[i] = value);\n    };\n    return {\n        get: seq[i],\n        set,\n        i,\n        ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNlcXVlbnRpYWwtc2NvcGUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1zZXF1ZW50aWFsLXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BDLE9BQU8sRUFBdUIsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFTbkUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBMEIsRUFBRTtJQUM1RCxNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDcEIsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztJQUN0QyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEMsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRTNELEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNaLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBUSxFQUFFLEVBQUU7UUFDdkIsSUFBSSxJQUFJLEVBQUU7WUFDUixrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0lBQ0YsT0FBTztRQUNMLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1gsR0FBRztRQUNILENBQUM7UUFDRCxHQUFHO0tBQ0osQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZlcmlmeVNlcmlhbGl6YWJsZSB9IGZyb20gJy4uL3N0YXRlL2NvbW1vbic7XG5pbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSAnLi4vc3RhdGUvY29udGV4dCc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcbmltcG9ydCB7IFJlbmRlckludm9rZUNvbnRleHQsIHVzZUludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTZXF1ZW50aWFsU2NvcGU8VD4ge1xuICByZWFkb25seSBnZXQ6IFQgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHNldDogKHY6IFQpID0+IFQ7XG4gIHJlYWRvbmx5IGk6IG51bWJlcjtcbiAgcmVhZG9ubHkgY3R4OiBSZW5kZXJJbnZva2VDb250ZXh0O1xufVxuXG5leHBvcnQgY29uc3QgdXNlU2VxdWVudGlhbFNjb3BlID0gPFQ+KCk6IFNlcXVlbnRpYWxTY29wZTxUPiA9PiB7XG4gIGNvbnN0IGN0eCA9IHVzZUludm9rZUNvbnRleHQoKTtcbiAgY29uc3QgaSA9IGN0eC4kc2VxJDtcbiAgY29uc3QgaG9zdEVsZW1lbnQgPSBjdHguJGhvc3RFbGVtZW50JDtcbiAgY29uc3QgZWxDdHggPSBnZXRDb250ZXh0KGhvc3RFbGVtZW50KTtcbiAgY29uc3Qgc2VxID0gZWxDdHguJHNlcSQgPyBlbEN0eC4kc2VxJCA6IChlbEN0eC4kc2VxJCA9IFtdKTtcblxuICBjdHguJHNlcSQrKztcbiAgY29uc3Qgc2V0ID0gKHZhbHVlOiBUKSA9PiB7XG4gICAgaWYgKHFEZXYpIHtcbiAgICAgIHZlcmlmeVNlcmlhbGl6YWJsZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiAoc2VxW2ldID0gdmFsdWUpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldDogc2VxW2ldLFxuICAgIHNldCxcbiAgICBpLFxuICAgIGN0eCxcbiAgfTtcbn07XG4iXX0=","import { assertQrl } from '../qrl/qrl-class';\nimport { getContext, HOST_FLAG_NEED_ATTACH_LISTENER } from '../state/context';\nimport { normalizeOnProp } from '../state/listeners';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { useInvokeContext } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { Watch, WatchFlagsIsCleanup } from './use-watch';\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * It can be used to release resources, abort network requests, stop timers...\n *\n * @alpha\n * @deprecated Use the cleanup() function of `useWatch$()`, `useResource$()` or\n * `useClientEffect$()` instead.\n */\n// </docs>\nexport const useCleanupQrl = (unmountFn) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (!get) {\n        assertQrl(unmountFn);\n        const el = ctx.$hostElement$;\n        const watch = new Watch(WatchFlagsIsCleanup, i, el, unmountFn, undefined);\n        const elCtx = getContext(el);\n        set(true);\n        if (!elCtx.$watches$) {\n            elCtx.$watches$ = [];\n        }\n        elCtx.$watches$.push(watch);\n    }\n};\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * It can be used to release resources, abort network requests, stop timers...\n *\n * @alpha\n * @deprecated Use the cleanup() function of `useWatch$()`, `useResource$()` or\n * `useClientEffect$()` instead.\n */\n// </docs>\nexport const useCleanup$ = /*#__PURE__*/ implicit$FirstArg(useCleanupQrl);\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise, it's adding a JSX listener in the `<div>` is a better idea.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * @alpha\n */\n// </docs>\nexport const useOn = (event, eventQrl) => _useOn(`on-${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $((event) => {\n *       console.log('body scrolled', event);\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <div>Profit!</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => _useOn(`document:on-${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $((event) => {\n *       console.log('navigation happened', event);\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <div>Profit!</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnWindow = (event, eventQrl) => _useOn(`window:on-${event}`, eventQrl);\nconst _useOn = (eventName, eventQrl) => {\n    const invokeCtx = useInvokeContext();\n    const elCtx = getContext(invokeCtx.$hostElement$);\n    assertQrl(eventQrl);\n    if (typeof eventName === 'string') {\n        elCtx.li.push([normalizeOnProp(eventName), eventQrl]);\n    }\n    else {\n        elCtx.li.push(...eventName.map((name) => [normalizeOnProp(name), eventQrl]));\n    }\n    elCtx.$flags$ |= HOST_FLAG_NEED_ATTACH_LISTENER;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_invalidRefValue } from '../error/error';\nimport { isServer } from '../platform/platform';\nimport { logWarn } from '../util/log';\nimport { qSerialize, qTest, seal } from '../util/qdev';\nimport { isFunction, isObject } from '../util/types';\nimport { fromKebabToCamelCase } from '../util/case';\nimport { QContainerAttr } from '../util/markers';\nimport { isElement } from '../util/element';\nimport { createSubscriptionManager } from '../state/common';\nconst CONTAINER_STATE = Symbol('ContainerState');\nexport const getContainerState = (containerEl) => {\n    let set = containerEl[CONTAINER_STATE];\n    if (!set) {\n        containerEl[CONTAINER_STATE] = set = createContainerState(containerEl);\n    }\n    return set;\n};\nexport const createContainerState = (containerEl) => {\n    const containerState = {\n        $containerEl$: containerEl,\n        $elementIndex$: 0,\n        $proxyMap$: new WeakMap(),\n        $opsNext$: new Set(),\n        $watchNext$: new Set(),\n        $watchStaging$: new Set(),\n        $hostsNext$: new Set(),\n        $hostsStaging$: new Set(),\n        $styleIds$: new Set(),\n        $events$: new Set(),\n        $envData$: {},\n        $renderPromise$: undefined,\n        $hostsRendering$: undefined,\n        $subsManager$: null,\n    };\n    seal(containerState);\n    containerState.$subsManager$ = createSubscriptionManager(containerState);\n    return containerState;\n};\nexport const setRef = (value, elm) => {\n    if (isFunction(value)) {\n        return value(elm);\n    }\n    else if (isObject(value)) {\n        if ('current' in value) {\n            return (value.current = elm);\n        }\n        else if ('value' in value) {\n            return (value.value = elm);\n        }\n    }\n    throw qError(QError_invalidRefValue, value);\n};\nexport const addQwikEvent = (prop, containerState) => {\n    var _a;\n    const eventName = getEventName(prop);\n    if (!qTest && !isServer()) {\n        try {\n            const qwikevents = ((_a = globalThis).qwikevents || (_a.qwikevents = []));\n            qwikevents.push(eventName);\n        }\n        catch (err) {\n            logWarn(err);\n        }\n    }\n    if (qSerialize) {\n        containerState.$events$.add(eventName);\n    }\n};\nexport const SHOW_ELEMENT = 1;\nexport const SHOW_COMMENT = 128;\nexport const FILTER_ACCEPT = 1;\nexport const FILTER_REJECT = 2;\nexport const FILTER_SKIP = 3;\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nexport const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const strToInt = (nu) => {\n    return parseInt(nu, 36);\n};\nexport const getEventName = (attribute) => {\n    const colonPos = attribute.indexOf(':');\n    if (attribute) {\n        return fromKebabToCamelCase(attribute.slice(colonPos + 1));\n    }\n    else {\n        return attribute;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2NvbnRhaW5lci9jb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUdoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUlyRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUseUJBQXlCLEVBQXlDLE1BQU0saUJBQWlCLENBQUM7QUFnRm5HLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBRWpELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsV0FBb0IsRUFBa0IsRUFBRTtJQUN4RSxJQUFJLEdBQUcsR0FBSSxXQUFtQixDQUFDLGVBQWUsQ0FBbUIsQ0FBQztJQUNsRSxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ1AsV0FBbUIsQ0FBQyxlQUFlLENBQUMsR0FBRyxHQUFHLEdBQUcsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDakY7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsV0FBb0IsRUFBRSxFQUFF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QUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFO0lBQ3JDLE9BQU8sUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxTQUFpQixFQUFFLEVBQUU7SUFDaEQsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QyxJQUFJLFNBQVMsRUFBRTtRQUNiLE9BQU8sb0JBQW9CLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM1RDtTQUFNO1FBQ0wsT0FBTyxTQUFTLENBQUM7S0FDbEI7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBxRXJyb3IsIFFFcnJvcl9pbnZhbGlkUmVmVmFsdWUgfSBmcm9tICcuLi9lcnJvci9lcnJvcic7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB0eXBlIHsgUmVmIH0gZnJvbSAnLi4vdXNlL3VzZS1yZWYnO1xuaW1wb3J0IHR5cGUgeyBSZXNvdXJjZVJldHVybkludGVybmFsLCBTdWJzY3JpYmVyRWZmZWN0IH0gZnJvbSAnLi4vdXNlL3VzZS13YXRjaCc7XG5pbXBvcnQgeyBsb2dXYXJuIH0gZnJvbSAnLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgcVNlcmlhbGl6ZSwgcVRlc3QsIHNlYWwgfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiwgaXNPYmplY3QgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQgfSBmcm9tICcuLi9yZW5kZXIvZG9tL3ZpcnR1YWwtZWxlbWVudCc7XG5pbXBvcnQgdHlwZSB7IFJlbmRlclN0YXRpY0NvbnRleHQgfSBmcm9tICcuLi9yZW5kZXIvdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBRUkwgfSBmcm9tICcuLi9xcmwvcXJsLnB1YmxpYyc7XG5pbXBvcnQgeyBmcm9tS2ViYWJUb0NhbWVsQ2FzZSB9IGZyb20gJy4uL3V0aWwvY2FzZSc7XG5pbXBvcnQgeyBRQ29udGFpbmVyQXR0ciB9IGZyb20gJy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tICcuLi91dGlsL2VsZW1lbnQnO1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uTWFuYWdlciwgU3Vic2NyaWJlclNpZ25hbCwgU3Vic2NyaXB0aW9uTWFuYWdlciB9IGZyb20gJy4uL3N0YXRlL2NvbW1vbic7XG5pbXBvcnQgdHlwZSB7IFNpZ25hbCB9IGZyb20gJy4uL3N0YXRlL3NpZ25hbCc7XG5cbmV4cG9ydCB0eXBlIEdldE9iamVjdCA9IChpZDogc3RyaW5nKSA9PiBhbnk7XG5leHBvcnQgdHlwZSBHZXRPYmpJRCA9IChvYmo6IGFueSkgPT4gc3RyaW5nIHwgbnVsbDtcbmV4cG9ydCB0eXBlIE11c3RHZXRPYmpJRCA9IChvYmo6IGFueSkgPT4gc3RyaW5nO1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNuYXBzaG90TWV0YVZhbHVlIHtcbiAgcj86IHN0cmluZzsgLy8gcTpvYmpcbiAgdz86IHN0cmluZzsgLy8gcTp3YXRjaGVzXG4gIHM/OiBzdHJpbmc7IC8vIHE6c2VxXG4gIGg/OiBzdHJpbmc7IC8vIHE6aG9zdFxuICBjPzogc3RyaW5nOyAvLyBxOmNvbnRleHRcbn1cblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IHR5cGUgU25hcHNob3RNZXRhID0gUmVjb3JkPHN0cmluZywgU25hcHNob3RNZXRhVmFsdWU+O1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNuYXBzaG90U3RhdGUge1xuICBjdHg6IFNuYXBzaG90TWV0YTtcbiAgb2JqczogYW55W107XG4gIHN1YnM6IGFueVtdO1xufVxuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNuYXBzaG90TGlzdGVuZXIge1xuICBrZXk6IHN0cmluZztcbiAgcXJsOiBRUkw8YW55PjtcbiAgZWw6IEVsZW1lbnQ7XG59XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU25hcHNob3RSZXN1bHQge1xuICBzdGF0ZTogU25hcHNob3RTdGF0ZTtcbiAgcXJsczogUVJMW107XG4gIG9ianM6IGFueVtdO1xuICByZXNvdXJjZXM6IFJlc291cmNlUmV0dXJuSW50ZXJuYWw8YW55PltdO1xuICBtb2RlOiAncmVuZGVyJyB8ICdsaXN0ZW5lcnMnIHwgJ3N0YXRpYyc7XG59XG5cbmV4cG9ydCB0eXBlIE9ialRvUHJveHlNYXAgPSBXZWFrTWFwPGFueSwgYW55PjtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb250YWluZXJTdGF0ZSB7XG4gIHJlYWRvbmx5ICRjb250YWluZXJFbCQ6IEVsZW1lbnQ7XG5cbiAgcmVhZG9ubHkgJHByb3h5TWFwJDogT2JqVG9Qcm94eU1hcDtcbiAgJHN1YnNNYW5hZ2VyJDogU3Vic2NyaXB0aW9uTWFuYWdlcjtcblxuICByZWFkb25seSAkd2F0Y2hOZXh0JDogU2V0PFN1YnNjcmliZXJFZmZlY3Q+O1xuICByZWFkb25seSAkd2F0Y2hTdGFnaW5nJDogU2V0PFN1YnNjcmliZXJFZmZlY3Q+O1xuXG4gIHJlYWRvbmx5ICRvcHNOZXh0JDogU2V0PFN1YnNjcmliZXJTaWduYWw+O1xuXG4gIHJlYWRvbmx5ICRob3N0c05leHQkOiBTZXQ8UXdpa0VsZW1lbnQ+O1xuICByZWFkb25seSAkaG9zdHNTdGFnaW5nJDogU2V0PFF3aWtFbGVtZW50PjtcbiAgJGhvc3RzUmVuZGVyaW5nJDogU2V0PFF3aWtFbGVtZW50PiB8IHVuZGVmaW5lZDtcbiAgJHJlbmRlclByb21pc2UkOiBQcm9taXNlPFJlbmRlclN0YXRpY0NvbnRleHQ+IHwgdW5kZWZpbmVkO1xuXG4gICRlbnZEYXRhJDogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgJGVsZW1lbnRJbmRleCQ6IG51bWJlcjtcblxuICByZWFkb25seSAkc3R5bGVJZHMkOiBTZXQ8c3RyaW5nPjtcbiAgcmVhZG9ubHkgJGV2ZW50cyQ6IFNldDxzdHJpbmc+O1xufVxuXG5jb25zdCBDT05UQUlORVJfU1RBVEUgPSBTeW1ib2woJ0NvbnRhaW5lclN0YXRlJyk7XG5cbmV4cG9ydCBjb25zdCBnZXRDb250YWluZXJTdGF0ZSA9IChjb250YWluZXJFbDogRWxlbWVudCk6IENvbnRhaW5lclN0YXRlID0+IHtcbiAgbGV0IHNldCA9IChjb250YWluZXJFbCBhcyBhbnkpW0NPTlRBSU5FUl9TVEFURV0gYXMgQ29udGFpbmVyU3RhdGU7XG4gIGlmICghc2V0KSB7XG4gICAgKGNvbnRhaW5lckVsIGFzIGFueSlbQ09OVEFJTkVSX1NUQVRFXSA9IHNldCA9IGNyZWF0ZUNvbnRhaW5lclN0YXRlKGNvbnRhaW5lckVsKTtcbiAgfVxuICByZXR1cm4gc2V0O1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNvbnRhaW5lclN0YXRlID0gKGNvbnRhaW5lckVsOiBFbGVtZW50KSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSA9IHtcbiAgICAkY29udGFpbmVyRWwkOiBjb250YWluZXJFbCxcblxuICAgICRlbGVtZW50SW5kZXgkOiAwLFxuXG4gICAgJHByb3h5TWFwJDogbmV3IFdlYWtNYXAoKSxcblxuICAgICRvcHNOZXh0JDogbmV3IFNldCgpLFxuXG4gICAgJHdhdGNoTmV4dCQ6IG5ldyBTZXQoKSxcbiAgICAkd2F0Y2hTdGFnaW5nJDogbmV3IFNldCgpLFxuXG4gICAgJGhvc3RzTmV4dCQ6IG5ldyBTZXQoKSxcbiAgICAkaG9zdHNTdGFnaW5nJDogbmV3IFNldCgpLFxuXG4gICAgJHN0eWxlSWRzJDogbmV3IFNldCgpLFxuICAgICRldmVudHMkOiBuZXcgU2V0KCksXG5cbiAgICAkZW52RGF0YSQ6IHt9LFxuICAgICRyZW5kZXJQcm9taXNlJDogdW5kZWZpbmVkLFxuICAgICRob3N0c1JlbmRlcmluZyQ6IHVuZGVmaW5lZCxcbiAgICAkc3Vic01hbmFnZXIkOiBudWxsIGFzIGFueSxcbiAgfTtcbiAgc2VhbChjb250YWluZXJTdGF0ZSk7XG4gIGNvbnRhaW5lclN0YXRlLiRzdWJzTWFuYWdlciQgPSBjcmVhdGVTdWJzY3JpcHRpb25NYW5hZ2VyKGNvbnRhaW5lclN0YXRlKTtcbiAgcmV0dXJuIGNvbnRhaW5lclN0YXRlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldFJlZiA9ICh2YWx1ZTogYW55LCBlbG06IEVsZW1lbnQpID0+IHtcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlKGVsbSk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgaWYgKCdjdXJyZW50JyBpbiB2YWx1ZSkge1xuICAgICAgcmV0dXJuICgodmFsdWUgYXMgUmVmPEVsZW1lbnQ+KS5jdXJyZW50ID0gZWxtKTtcbiAgICB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gdmFsdWUpIHtcbiAgICAgIHJldHVybiAoKHZhbHVlIGFzIFNpZ25hbDxFbGVtZW50PikudmFsdWUgPSBlbG0pO1xuICAgIH1cbiAgfVxuICB0aHJvdyBxRXJyb3IoUUVycm9yX2ludmFsaWRSZWZWYWx1ZSwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGFkZFF3aWtFdmVudCA9IChwcm9wOiBzdHJpbmcsIGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSkgPT4ge1xuICBjb25zdCBldmVudE5hbWUgPSBnZXRFdmVudE5hbWUocHJvcCk7XG4gIGlmICghcVRlc3QgJiYgIWlzU2VydmVyKCkpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcXdpa2V2ZW50cyA9ICgoZ2xvYmFsVGhpcyBhcyBhbnkpLnF3aWtldmVudHMgfHw9IFtdKTtcbiAgICAgIHF3aWtldmVudHMucHVzaChldmVudE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nV2FybihlcnIpO1xuICAgIH1cbiAgfVxuICBpZiAocVNlcmlhbGl6ZSkge1xuICAgIGNvbnRhaW5lclN0YXRlLiRldmVudHMkLmFkZChldmVudE5hbWUpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgU0hPV19FTEVNRU5UID0gMTtcbmV4cG9ydCBjb25zdCBTSE9XX0NPTU1FTlQgPSAxMjg7XG5leHBvcnQgY29uc3QgRklMVEVSX0FDQ0VQVCA9IDE7XG5leHBvcnQgY29uc3QgRklMVEVSX1JFSkVDVCA9IDI7XG5leHBvcnQgY29uc3QgRklMVEVSX1NLSVAgPSAzO1xuXG5leHBvcnQgY29uc3QgaXNDb250YWluZXIgPSAoZWw6IE5vZGUpID0+IHtcbiAgcmV0dXJuIGlzRWxlbWVudChlbCkgJiYgZWwuaGFzQXR0cmlidXRlKFFDb250YWluZXJBdHRyKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpbnRUb1N0ciA9IChudTogbnVtYmVyKSA9PiB7XG4gIHJldHVybiBudS50b1N0cmluZygzNik7XG59O1xuXG5leHBvcnQgY29uc3Qgc3RyVG9JbnQgPSAobnU6IHN0cmluZykgPT4ge1xuICByZXR1cm4gcGFyc2VJbnQobnUsIDM2KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRFdmVudE5hbWUgPSAoYXR0cmlidXRlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgY29sb25Qb3MgPSBhdHRyaWJ1dGUuaW5kZXhPZignOicpO1xuICBpZiAoYXR0cmlidXRlKSB7XG4gICAgcmV0dXJuIGZyb21LZWJhYlRvQ2FtZWxDYXNlKGF0dHJpYnV0ZS5zbGljZShjb2xvblBvcyArIDEpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXR0cmlidXRlO1xuICB9XG59O1xuIl19","export const directSetAttribute = (el, prop, value) => {\n    return el.setAttribute(prop, value);\n};\nexport const directGetAttribute = (el, prop) => {\n    return el.getAttribute(prop);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZmFzdC1jYWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDakYsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUNsRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4vZG9tL3ZpcnR1YWwtZWxlbWVudCc7XG5cbmV4cG9ydCBjb25zdCBkaXJlY3RTZXRBdHRyaWJ1dGUgPSAoZWw6IFF3aWtFbGVtZW50LCBwcm9wOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIGVsLnNldEF0dHJpYnV0ZShwcm9wLCB2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGlyZWN0R2V0QXR0cmlidXRlID0gKGVsOiBRd2lrRWxlbWVudCwgcHJvcDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUocHJvcCk7XG59O1xuIl19","import { qDev, qRuntimeQrl, seal } from '../../util/qdev';\nimport { logWarn } from '../../util/log';\nimport { isFunction, isObject, isString } from '../../util/types';\nimport { qError, QError_invalidJsxNodeType } from '../../error/error';\nimport { isQrl } from '../../qrl/qrl-class';\n/**\n * @public\n */\nexport const jsx = (type, props, key) => {\n    if (qDev) {\n        if (!isString(type) && !isFunction(type)) {\n            throw qError(QError_invalidJsxNodeType, type);\n        }\n        if (!qRuntimeQrl && props) {\n            for (const prop of Object.keys(props)) {\n                if (prop.endsWith('$') && !isQrl(props[prop])) {\n                    throw qError(QError_invalidJsxNodeType, type);\n                }\n            }\n        }\n    }\n    const processed = key == null ? null : String(key);\n    const node = new JSXNodeImpl(type, props, processed);\n    seal(node);\n    return node;\n};\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport class JSXNodeImpl {\n    constructor(type, props, key = null) {\n        this.type = type;\n        this.props = props;\n        this.key = key;\n    }\n}\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && 'key' in n && 'props' in n && 'type' in n) {\n            logWarn(`Duplicate implementations of \"JSXNode\" found`);\n            return true;\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\n/**\n * @public\n */\nexport const Fragment = (props) => props.children;\n/**\n * @public\n */\nexport const jsxDEV = (type, props, key, isStatic, opts, ctx) => {\n    if (qDev) {\n        if (!isString(type) && !isFunction(type)) {\n            throw qError(QError_invalidJsxNodeType, type);\n        }\n    }\n    const processed = key == null ? null : String(key);\n    const node = new JSXNodeImpl(type, props, processed);\n    node.dev = {\n        isStatic,\n        ctx,\n        ...opts,\n    };\n    seal(node);\n    return node;\n};\nexport { jsx as jsxs };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianN4LXJ1bnRpbWUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9qc3gtcnVudGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU1Qzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUNqQixJQUFPLEVBQ1AsS0FBNkUsRUFDN0UsR0FBNEIsRUFDaEIsRUFBRTtJQUNkLElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN4QyxNQUFNLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksQ0FBQyxXQUFXLElBQUksS0FBSyxFQUFFO1lBQ3pCLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDckMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO29CQUM3QyxNQUFNLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDL0M7YUFDRjtTQUNGO0tBQ0Y7SUFDRCxNQUFNLFNBQVMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuRCxNQUFNLElBQUksR0FBRyxJQUFJLFdBQVcsQ0FBSSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNYLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsYUFBYSxDQUFDO0FBRTlDLE1BQU0sT0FBTyxXQUFXO0lBRXRCLFlBQ1MsSUFBTyxFQUNQLEtBQTZFLEVBQzdFLE1BQXFCLElBQUk7UUFGekIsU0FBSSxHQUFKLElBQUksQ0FBRztRQUNQLFVBQUssR0FBTCxLQUFLLENBQXdFO1FBQzdFLFFBQUcsR0FBSCxHQUFHLENBQXNCO0lBQy9CLENBQUM7Q0FDTDtBQUVELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQU0sRUFBZ0IsRUFBRTtJQUNoRCxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksQ0FBQyxZQUFZLFdBQVcsRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDNUQsT0FBTyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7WUFDeEQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTTtRQUNMLE9BQU8sQ0FBQyxZQUFZLFdBQVcsQ0FBQztLQUNqQztBQUNILENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUEwQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQWUsQ0FBQztBQVFoRzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUNwQixJQUFPLEVBQ1AsS0FBNkUsRUFDN0UsR0FBdUMsRUFDdkMsUUFBaUIsRUFDakIsSUFBZ0IsRUFDaEIsR0FBUSxFQUNJLEVBQUU7SUFDZCxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDeEMsTUFBTSxNQUFNLENBQUMseUJBQXlCLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDL0M7S0FDRjtJQUNELE1BQU0sU0FBUyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sSUFBSSxHQUFHLElBQUksV0FBVyxDQUFJLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDeEQsSUFBSSxDQUFDLEdBQUcsR0FBRztRQUNULFFBQVE7UUFDUixHQUFHO1FBQ0gsR0FBRyxJQUFJO0tBQ1IsQ0FBQztJQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNYLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBSUYsT0FBTyxFQUFFLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRGV2SlNYLCBGdW5jdGlvbkNvbXBvbmVudCwgSlNYTm9kZSB9IGZyb20gJy4vdHlwZXMvanN4LW5vZGUnO1xuaW1wb3J0IHR5cGUgeyBRd2lrSlNYIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpayc7XG5pbXBvcnQgeyBxRGV2LCBxUnVudGltZVFybCwgc2VhbCB9IGZyb20gJy4uLy4uL3V0aWwvcWRldic7XG5pbXBvcnQgeyBsb2dXYXJuIH0gZnJvbSAnLi4vLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiwgaXNPYmplY3QsIGlzU3RyaW5nIH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBxRXJyb3IsIFFFcnJvcl9pbnZhbGlkSnN4Tm9kZVR5cGUgfSBmcm9tICcuLi8uLi9lcnJvci9lcnJvcic7XG5pbXBvcnQgeyBpc1FybCB9IGZyb20gJy4uLy4uL3FybC9xcmwtY2xhc3MnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGpzeCA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgRnVuY3Rpb25Db21wb25lbnQ8YW55Pj4oXG4gIHR5cGU6IFQsXG4gIHByb3BzOiBUIGV4dGVuZHMgRnVuY3Rpb25Db21wb25lbnQ8aW5mZXIgUFJPUFM+ID8gUFJPUFMgOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBrZXk/OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsXG4pOiBKU1hOb2RlPFQ+ID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoIWlzU3RyaW5nKHR5cGUpICYmICFpc0Z1bmN0aW9uKHR5cGUpKSB7XG4gICAgICB0aHJvdyBxRXJyb3IoUUVycm9yX2ludmFsaWRKc3hOb2RlVHlwZSwgdHlwZSk7XG4gICAgfVxuICAgIGlmICghcVJ1bnRpbWVRcmwgJiYgcHJvcHMpIHtcbiAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3Qua2V5cyhwcm9wcykpIHtcbiAgICAgICAgaWYgKHByb3AuZW5kc1dpdGgoJyQnKSAmJiAhaXNRcmwocHJvcHNbcHJvcF0pKSB7XG4gICAgICAgICAgdGhyb3cgcUVycm9yKFFFcnJvcl9pbnZhbGlkSnN4Tm9kZVR5cGUsIHR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHByb2Nlc3NlZCA9IGtleSA9PSBudWxsID8gbnVsbCA6IFN0cmluZyhrZXkpO1xuICBjb25zdCBub2RlID0gbmV3IEpTWE5vZGVJbXBsPFQ+KHR5cGUsIHByb3BzLCBwcm9jZXNzZWQpO1xuICBzZWFsKG5vZGUpO1xuICByZXR1cm4gbm9kZTtcbn07XG5cbmV4cG9ydCBjb25zdCBTS0lQX1JFTkRFUl9UWVBFID0gJzpza2lwUmVuZGVyJztcblxuZXhwb3J0IGNsYXNzIEpTWE5vZGVJbXBsPFQ+IGltcGxlbWVudHMgSlNYTm9kZTxUPiB7XG4gIGRldj86IERldkpTWDtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHR5cGU6IFQsXG4gICAgcHVibGljIHByb3BzOiBUIGV4dGVuZHMgRnVuY3Rpb25Db21wb25lbnQ8aW5mZXIgUFJPUFM+ID8gUFJPUFMgOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIHB1YmxpYyBrZXk6IHN0cmluZyB8IG51bGwgPSBudWxsXG4gICkge31cbn1cblxuZXhwb3J0IGNvbnN0IGlzSlNYTm9kZSA9IChuOiBhbnkpOiBuIGlzIEpTWE5vZGUgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmIChuIGluc3RhbmNlb2YgSlNYTm9kZUltcGwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3QobikgJiYgJ2tleScgaW4gbiAmJiAncHJvcHMnIGluIG4gJiYgJ3R5cGUnIGluIG4pIHtcbiAgICAgIGxvZ1dhcm4oYER1cGxpY2F0ZSBpbXBsZW1lbnRhdGlvbnMgb2YgXCJKU1hOb2RlXCIgZm91bmRgKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG4gaW5zdGFuY2VvZiBKU1hOb2RlSW1wbDtcbiAgfVxufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBGcmFnbWVudDogRnVuY3Rpb25Db21wb25lbnQ8eyBjaGlsZHJlbj86IGFueSB9PiA9IChwcm9wcykgPT4gcHJvcHMuY2hpbGRyZW4gYXMgYW55O1xuXG5pbnRlcmZhY2UgSnN4RGV2T3B0cyB7XG4gIGZpbGVOYW1lOiBzdHJpbmc7XG4gIGxpbmVOdW1iZXI6IG51bWJlcjtcbiAgY29sdW1uTnVtYmVyOiBudW1iZXI7XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QganN4REVWID0gPFQgZXh0ZW5kcyBzdHJpbmcgfCBGdW5jdGlvbkNvbXBvbmVudDxhbnk+PihcbiAgdHlwZTogVCxcbiAgcHJvcHM6IFQgZXh0ZW5kcyBGdW5jdGlvbkNvbXBvbmVudDxpbmZlciBQUk9QUz4gPyBQUk9QUyA6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIGtleTogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgaXNTdGF0aWM6IGJvb2xlYW4sXG4gIG9wdHM6IEpzeERldk9wdHMsXG4gIGN0eDogYW55XG4pOiBKU1hOb2RlPFQ+ID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoIWlzU3RyaW5nKHR5cGUpICYmICFpc0Z1bmN0aW9uKHR5cGUpKSB7XG4gICAgICB0aHJvdyBxRXJyb3IoUUVycm9yX2ludmFsaWRKc3hOb2RlVHlwZSwgdHlwZSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHByb2Nlc3NlZCA9IGtleSA9PSBudWxsID8gbnVsbCA6IFN0cmluZyhrZXkpO1xuICBjb25zdCBub2RlID0gbmV3IEpTWE5vZGVJbXBsPFQ+KHR5cGUsIHByb3BzLCBwcm9jZXNzZWQpO1xuICBub2RlLmRldiA9IHtcbiAgICBpc1N0YXRpYyxcbiAgICBjdHgsXG4gICAgLi4ub3B0cyxcbiAgfTtcbiAgc2VhbChub2RlKTtcbiAgcmV0dXJuIG5vZGU7XG59O1xuXG5leHBvcnQgdHlwZSB7IFF3aWtKU1ggYXMgSlNYIH07XG5cbmV4cG9ydCB7IGpzeCBhcyBqc3hzIH07XG4iXX0=","import { jsx } from '../jsx/jsx-runtime';\nexport const QOnce = 'qonce';\n/**\n * @alpha\n */\nexport const SkipRender = Symbol('skip render');\n/**\n * @alpha\n */\nexport const RenderOnce = (props, key) => {\n    return jsx(Virtual, {\n        ...props,\n        [QOnce]: '',\n    }, key);\n};\n/**\n * @alpha\n */\nexport const Fragment = ((props) => props.children);\n/**\n * @alpha\n */\nexport const SSRRaw = (() => null);\n/**\n * @alpha\n */\nexport const SSRComment = (props) => jsx(SSRRaw, { data: `<!--${props.data}-->` }, null);\n/**\n * @alpha\n */\nexport const Virtual = ((props) => props.children);\n/**\n * @alpha\n */\nexport const SSRStreamBlock = (props) => {\n    return [\n        jsx(SSRComment, { data: 'qkssr-pu' }),\n        props.children,\n        jsx(SSRComment, { data: 'qkssr-po' }),\n    ];\n};\n/**\n * @alpha\n */\nexport const SSRStream = (props, key) => jsx(RenderOnce, { children: jsx(InternalSSRStream, props) }, key);\nexport const InternalSSRStream = () => null;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3JlbmRlci9qc3gvdXRpbHMucHVibGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUt6QyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBRTdCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFZLE1BQU0sQ0FBQyxhQUFhLENBQVEsQ0FBQztBQUVoRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBMEMsQ0FBQyxLQUFVLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDbkYsT0FBTyxHQUFHLENBQ1IsT0FBTyxFQUNQO1FBQ0UsR0FBRyxLQUFLO1FBQ1IsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO0tBQ1osRUFDRCxHQUFHLENBQ0osQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUEwQixDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFRLENBQUM7QUFFdkY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQXdDLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFRLENBQUM7QUFFL0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQXdDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDdkUsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBUSxDQUFDO0FBRTdEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUEyQyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FDN0UsS0FBSyxDQUFDLFFBQVEsQ0FBUSxDQUFDO0FBRXpCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUEwQyxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQzdFLE9BQU87UUFDTCxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDO1FBQ3JDLEtBQUssQ0FBQyxRQUFRO1FBQ2QsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQztLQUMvQixDQUFDO0FBQ1gsQ0FBQyxDQUFDO0FBWUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQW1DLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQ3RFLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFcEUsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQW1DLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzeCB9IGZyb20gJy4uL2pzeC9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IFN0cmVhbVdyaXRlciB9IGZyb20gJy4uL3Nzci9yZW5kZXItc3NyJztcbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQsIEpTWE5vZGUgfSBmcm9tICcuL3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB0eXBlIHsgSlNYQ2hpbGRyZW4gfSBmcm9tICcuL3R5cGVzL2pzeC1xd2lrLWF0dHJpYnV0ZXMnO1xuXG5leHBvcnQgY29uc3QgUU9uY2UgPSAncW9uY2UnO1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgU2tpcFJlbmRlcjogSlNYTm9kZSA9IFN5bWJvbCgnc2tpcCByZW5kZXInKSBhcyBhbnk7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBSZW5kZXJPbmNlOiBGdW5jdGlvbkNvbXBvbmVudDx7IGNoaWxkcmVuPzogYW55IH0+ID0gKHByb3BzOiBhbnksIGtleSkgPT4ge1xuICByZXR1cm4ganN4KFxuICAgIFZpcnR1YWwsXG4gICAge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICBbUU9uY2VdOiAnJyxcbiAgICB9LFxuICAgIGtleVxuICApO1xufTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IEZyYWdtZW50OiBGdW5jdGlvbkNvbXBvbmVudDx7fT4gPSAoKHByb3BzOiBhbnkpID0+IHByb3BzLmNoaWxkcmVuKSBhcyBhbnk7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBTU1JSYXc6IEZ1bmN0aW9uQ29tcG9uZW50PHsgZGF0YTogc3RyaW5nIH0+ID0gKCgpID0+IG51bGwpIGFzIGFueTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IFNTUkNvbW1lbnQ6IEZ1bmN0aW9uQ29tcG9uZW50PHsgZGF0YTogc3RyaW5nIH0+ID0gKHByb3BzKSA9PlxuICBqc3goU1NSUmF3LCB7IGRhdGE6IGA8IS0tJHtwcm9wcy5kYXRhfS0tPmAgfSwgbnVsbCkgYXMgYW55O1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgVmlydHVhbDogRnVuY3Rpb25Db21wb25lbnQ8UmVjb3JkPHN0cmluZywgYW55Pj4gPSAoKHByb3BzOiBhbnkpID0+XG4gIHByb3BzLmNoaWxkcmVuKSBhcyBhbnk7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBTU1JTdHJlYW1CbG9jazogRnVuY3Rpb25Db21wb25lbnQ8eyBjaGlsZHJlbj86IGFueSB9PiA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gW1xuICAgIGpzeChTU1JDb21tZW50LCB7IGRhdGE6ICdxa3Nzci1wdScgfSksXG4gICAgcHJvcHMuY2hpbGRyZW4sXG4gICAganN4KFNTUkNvbW1lbnQsIHsgZGF0YTogJ3Frc3NyLXBvJyB9KSxcbiAgXSBhcyBhbnk7XG59O1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN0cmVhbVByb3BzIHtcbiAgY2hpbGRyZW46XG4gICAgfCBBc3luY0dlbmVyYXRvcjxKU1hDaGlsZHJlbiwgdm9pZCwgYW55PlxuICAgIHwgKChzdHJlYW06IFN0cmVhbVdyaXRlcikgPT4gUHJvbWlzZTx2b2lkPilcbiAgICB8ICgoKSA9PiBBc3luY0dlbmVyYXRvcjxKU1hDaGlsZHJlbiwgdm9pZCwgYW55Pik7XG59XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBTU1JTdHJlYW06IEZ1bmN0aW9uQ29tcG9uZW50PFN0cmVhbVByb3BzPiA9IChwcm9wcywga2V5KSA9PlxuICBqc3goUmVuZGVyT25jZSwgeyBjaGlsZHJlbjoganN4KEludGVybmFsU1NSU3RyZWFtLCBwcm9wcykgfSwga2V5KTtcblxuZXhwb3J0IGNvbnN0IEludGVybmFsU1NSU3RyZWFtOiBGdW5jdGlvbkNvbXBvbmVudDxTdHJlYW1Qcm9wcz4gPSAoKSA9PiBudWxsO1xuIl19","import { assertDefined } from '../error/assert';\nimport { qDynamicPlatform } from './qdev';\nexport const getDocument = (node) => {\n    if (!qDynamicPlatform) {\n        return document;\n    }\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n    if (node.nodeType === 9) {\n        return node;\n    }\n    const doc = node.ownerDocument;\n    assertDefined(doc, 'doc must be defined');\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBNEIsRUFBWSxFQUFFO0lBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUNELElBQUksT0FBTyxRQUFRLEtBQUssV0FBVyxFQUFFO1FBQ25DLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTtRQUN2QixPQUFPLElBQXVCLENBQUM7S0FDaEM7SUFDRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQy9CLGFBQWEsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMxQyxPQUFPLEdBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydERlZmluZWQgfSBmcm9tICcuLi9lcnJvci9hc3NlcnQnO1xuaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IHFEeW5hbWljUGxhdGZvcm0gfSBmcm9tICcuL3FkZXYnO1xuXG5leHBvcnQgY29uc3QgZ2V0RG9jdW1lbnQgPSAobm9kZTogUXdpa0VsZW1lbnQgfCBEb2N1bWVudCk6IERvY3VtZW50ID0+IHtcbiAgaWYgKCFxRHluYW1pY1BsYXRmb3JtKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmIChub2RlLm5vZGVUeXBlID09PSA5KSB7XG4gICAgcmV0dXJuIG5vZGUgYXMgYW55IGFzIERvY3VtZW50O1xuICB9XG4gIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgYXNzZXJ0RGVmaW5lZChkb2MsICdkb2MgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIHJldHVybiBkb2MhO1xufTtcbiJdfQ==","import { assertDefined } from '../../error/assert';\nimport { codeToText, QError_setProperty } from '../../error/error';\nimport { getDocument } from '../../util/dom';\nimport { isElement, isNode } from '../../util/element';\nimport { logDebug, logError, logWarn } from '../../util/log';\nimport { QSlot, QSlotRef, QStyle } from '../../util/markers';\nimport { qDev } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { cleanupTree, directAppendChild, directInsertBefore, directRemoveChild, getChildren, isSlotTemplate, SVG_NS, } from './visitor';\nexport const setAttribute = (ctx, el, prop, value) => {\n    if (ctx) {\n        ctx.$operations$.push({\n            $operation$: _setAttribute,\n            $args$: [el, prop, value],\n        });\n    }\n    else {\n        _setAttribute(el, prop, value);\n    }\n};\nconst _setAttribute = (el, prop, value) => {\n    if (value == null || value === false) {\n        el.removeAttribute(prop);\n    }\n    else {\n        const str = value === true ? '' : String(value);\n        directSetAttribute(el, prop, str);\n    }\n};\nexport const setProperty = (ctx, node, key, value) => {\n    if (ctx) {\n        ctx.$operations$.push({\n            $operation$: _setProperty,\n            $args$: [node, key, value],\n        });\n    }\n    else {\n        _setProperty(node, key, value);\n    }\n};\nconst _setProperty = (node, key, value) => {\n    try {\n        node[key] = value == null ? '' : value;\n        if (value == null && isNode(node) && isElement(node)) {\n            node.removeAttribute(key);\n        }\n    }\n    catch (err) {\n        logError(codeToText(QError_setProperty), { node, key, value }, err);\n    }\n};\nexport const createElement = (doc, expectTag, isSvg) => {\n    const el = isSvg ? doc.createElementNS(SVG_NS, expectTag) : doc.createElement(expectTag);\n    return el;\n};\nexport const insertBefore = (ctx, parent, newChild, refChild) => {\n    ctx.$operations$.push({\n        $operation$: directInsertBefore,\n        $args$: [parent, newChild, refChild ? refChild : null],\n    });\n    return newChild;\n};\nexport const appendChild = (ctx, parent, newChild) => {\n    ctx.$operations$.push({\n        $operation$: directAppendChild,\n        $args$: [parent, newChild],\n    });\n    return newChild;\n};\nexport const appendHeadStyle = (ctx, styleTask) => {\n    ctx.$containerState$.$styleIds$.add(styleTask.styleId);\n    ctx.$postOperations$.push({\n        $operation$: _appendHeadStyle,\n        $args$: [ctx.$containerState$.$containerEl$, styleTask],\n    });\n};\nexport const setClasslist = (ctx, elm, toRemove, toAdd) => {\n    if (ctx) {\n        ctx.$operations$.push({\n            $operation$: _setClasslist,\n            $args$: [elm, toRemove, toAdd],\n        });\n    }\n    else {\n        _setClasslist(elm, toRemove, toAdd);\n    }\n};\nexport const _setClasslist = (elm, toRemove, toAdd) => {\n    const classList = elm.classList;\n    classList.remove(...toRemove);\n    classList.add(...toAdd);\n};\nexport const _appendHeadStyle = (containerEl, styleTask) => {\n    const doc = getDocument(containerEl);\n    const isDoc = doc.documentElement === containerEl;\n    const headEl = doc.head;\n    const style = doc.createElement('style');\n    if (isDoc && !headEl) {\n        logWarn('document.head is undefined');\n    }\n    directSetAttribute(style, QStyle, styleTask.styleId);\n    style.textContent = styleTask.content;\n    if (isDoc && headEl) {\n        directAppendChild(headEl, style);\n    }\n    else {\n        directInsertBefore(containerEl, style, containerEl.firstChild);\n    }\n};\nexport const prepend = (ctx, parent, newChild) => {\n    ctx.$operations$.push({\n        $operation$: directInsertBefore,\n        $args$: [parent, newChild, parent.firstChild],\n    });\n};\nexport const removeNode = (ctx, el) => {\n    ctx.$operations$.push({\n        $operation$: _removeNode,\n        $args$: [el, ctx],\n    });\n};\nconst _removeNode = (el, staticCtx) => {\n    const parent = el.parentElement;\n    if (parent) {\n        if (el.nodeType === 1 || el.nodeType === 111) {\n            const subsManager = staticCtx.$containerState$.$subsManager$;\n            cleanupTree(el, staticCtx, subsManager, true);\n        }\n        directRemoveChild(parent, el);\n    }\n    else if (qDev) {\n        logWarn('Trying to remove component already removed', el);\n    }\n};\nexport const createTemplate = (doc, slotName) => {\n    const template = createElement(doc, 'q:template', false);\n    directSetAttribute(template, QSlot, slotName);\n    directSetAttribute(template, 'hidden', '');\n    directSetAttribute(template, 'aria-hidden', 'true');\n    return template;\n};\nexport const executeDOMRender = (ctx) => {\n    for (const op of ctx.$operations$) {\n        op.$operation$.apply(undefined, op.$args$);\n    }\n    resolveSlotProjection(ctx);\n};\nexport const getKey = (el) => {\n    return directGetAttribute(el, 'q:key');\n};\nexport const setKey = (el, key) => {\n    if (key !== null) {\n        directSetAttribute(el, 'q:key', key);\n    }\n};\nexport const resolveSlotProjection = (ctx) => {\n    // Slots removed\n    const subsManager = ctx.$containerState$.$subsManager$;\n    for (const slotEl of ctx.$rmSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const slotChildren = getChildren(slotEl, 'root');\n        if (slotChildren.length > 0) {\n            const sref = slotEl.getAttribute(QSlotRef);\n            const hostCtx = ctx.$roots$.find((r) => r.$id$ === sref);\n            if (hostCtx) {\n                const template = createTemplate(ctx.$doc$, key);\n                const hostElm = hostCtx.$element$;\n                for (const child of slotChildren) {\n                    directAppendChild(template, child);\n                }\n                directInsertBefore(hostElm, template, hostElm.firstChild);\n            }\n            else {\n                // If slot content cannot be relocated, it means it's content is definively removed\n                // Cleanup needs to be executed\n                cleanupTree(slotEl, ctx, subsManager, false);\n            }\n        }\n    }\n    // Slots added\n    for (const [slotEl, hostElm] of ctx.$addSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const template = Array.from(hostElm.childNodes).find((node) => {\n            return isSlotTemplate(node) && node.getAttribute(QSlot) === key;\n        });\n        if (template) {\n            const children = getChildren(template, 'root');\n            children.forEach((child) => {\n                directAppendChild(slotEl, child);\n            });\n            template.remove();\n        }\n    }\n};\nexport const createTextNode = (doc, text) => {\n    return doc.createTextNode(text);\n};\nexport const printRenderStats = (ctx) => {\n    if (qDev) {\n        if (typeof window !== 'undefined' && window.document != null) {\n            const byOp = {};\n            for (const op of ctx.$operations$) {\n                byOp[op.$operation$.name] = (byOp[op.$operation$.name] ?? 0) + 1;\n            }\n            const stats = {\n                byOp,\n                roots: ctx.$roots$.map((ctx) => ctx.$element$),\n                hostElements: Array.from(ctx.$hostElements$),\n                operations: ctx.$operations$.map((v) => [v.$operation$.name, ...v.$args$]),\n            };\n            const noOps = ctx.$operations$.length === 0;\n            logDebug('Render stats.', noOps ? 'No operations' : '', stats);\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL29wZXJhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdkMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3ZFLE9BQU8sRUFDTCxXQUFXLEVBQ1gsaUJBQWlCLEVBQ2pCLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIsV0FBVyxFQUNYLGNBQWMsRUFDZCxNQUFNLEdBQ1AsTUFBTSxXQUFXLENBQUM7QUFFbkIsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQzFCLEdBQW9DLEVBQ3BDLEVBQWUsRUFDZixJQUFZLEVBQ1osS0FBVSxFQUNWLEVBQUU7SUFDRixJQUFJLEdBQUcsRUFBRTtRQUNQLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ3BCLFdBQVcsRUFBRSxhQUFhO1lBQzFCLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDO1NBQzFCLENBQUMsQ0FBQztLQUNKO1NB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LFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDM0UsQ0FBQztZQUNGLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztZQUM1QyxRQUFRLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDaEU7S0FDRjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydERlZmluZWQgfSBmcm9tICcuLi8uLi9lcnJvci9hc3NlcnQnO1xuaW1wb3J0IHsgY29kZVRvVGV4dCwgUUVycm9yX3NldFByb3BlcnR5IH0gZnJvbSAnLi4vLi4vZXJyb3IvZXJyb3InO1xuaW1wb3J0IHR5cGUgeyBTdHlsZUFwcGVuZCB9IGZyb20gJy4uLy4uL3VzZS91c2UtY29yZSc7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4uLy4uL3V0aWwvZG9tJztcbmltcG9ydCB7IGlzRWxlbWVudCwgaXNOb2RlIH0gZnJvbSAnLi4vLi4vdXRpbC9lbGVtZW50JztcbmltcG9ydCB7IGxvZ0RlYnVnLCBsb2dFcnJvciwgbG9nV2FybiB9IGZyb20gJy4uLy4uL3V0aWwvbG9nJztcbmltcG9ydCB7IFFTbG90LCBRU2xvdFJlZiwgUVN0eWxlIH0gZnJvbSAnLi4vLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuLi8uLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgZGlyZWN0R2V0QXR0cmlidXRlLCBkaXJlY3RTZXRBdHRyaWJ1dGUgfSBmcm9tICcuLi9mYXN0LWNhbGxzJztcbmltcG9ydCB0eXBlIHsgUmVuZGVyU3RhdGljQ29udGV4dCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQsIFZpcnR1YWxFbGVtZW50IH0gZnJvbSAnLi92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHtcbiAgY2xlYW51cFRyZWUsXG4gIGRpcmVjdEFwcGVuZENoaWxkLFxuICBkaXJlY3RJbnNlcnRCZWZvcmUsXG4gIGRpcmVjdFJlbW92ZUNoaWxkLFxuICBnZXRDaGlsZHJlbixcbiAgaXNTbG90VGVtcGxhdGUsXG4gIFNWR19OUyxcbn0gZnJvbSAnLi92aXNpdG9yJztcblxuZXhwb3J0IGNvbnN0IHNldEF0dHJpYnV0ZSA9IChcbiAgY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0IHwgdW5kZWZpbmVkLFxuICBlbDogUXdpa0VsZW1lbnQsXG4gIHByb3A6IHN0cmluZyxcbiAgdmFsdWU6IGFueVxuKSA9PiB7XG4gIGlmIChjdHgpIHtcbiAgICBjdHguJG9wZXJhdGlvbnMkLnB1c2goe1xuICAgICAgJG9wZXJhdGlvbiQ6IF9zZXRBdHRyaWJ1dGUsXG4gICAgICAkYXJncyQ6IFtlbCwgcHJvcCwgdmFsdWVdLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIF9zZXRBdHRyaWJ1dGUoZWwsIHByb3AsIHZhbHVlKTtcbiAgfVxufTtcblxuY29uc3QgX3NldEF0dHJpYnV0ZSA9IChlbDogUXdpa0VsZW1lbnQsIHByb3A6IHN0cmluZywgdmFsdWU6IGFueSkgPT4ge1xuICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc3RyID0gdmFsdWUgPT09IHRydWUgPyAnJyA6IFN0cmluZyh2YWx1ZSk7XG4gICAgZGlyZWN0U2V0QXR0cmlidXRlKGVsLCBwcm9wLCBzdHIpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0UHJvcGVydHkgPSAoXG4gIGN0eDogUmVuZGVyU3RhdGljQ29udGV4dCB8IHVuZGVmaW5lZCxcbiAgbm9kZTogYW55LFxuICBrZXk6IHN0cmluZyxcbiAgdmFsdWU6IGFueVxuKSA9PiB7XG4gIGlmIChjdHgpIHtcbiAgICBjdHguJG9wZXJhdGlvbnMkLnB1c2goe1xuICAgICAgJG9wZXJhdGlvbiQ6IF9zZXRQcm9wZXJ0eSxcbiAgICAgICRhcmdzJDogW25vZGUsIGtleSwgdmFsdWVdLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIF9zZXRQcm9wZXJ0eShub2RlLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuY29uc3QgX3NldFByb3BlcnR5ID0gKG5vZGU6IGFueSwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgdHJ5IHtcbiAgICBub2RlW2tleV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiBpc05vZGUobm9kZSkgJiYgaXNFbGVtZW50KG5vZGUpKSB7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nRXJyb3IoY29kZVRvVGV4dChRRXJyb3Jfc2V0UHJvcGVydHkpLCB7IG5vZGUsIGtleSwgdmFsdWUgfSwgZXJyKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVsZW1lbnQgPSAoZG9jOiBEb2N1bWVudCwgZXhwZWN0VGFnOiBzdHJpbmcsIGlzU3ZnOiBib29sZWFuKTogRWxlbWVudCA9PiB7XG4gIGNvbnN0IGVsID0gaXNTdmcgPyBkb2MuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgZXhwZWN0VGFnKSA6IGRvYy5jcmVhdGVFbGVtZW50KGV4cGVjdFRhZyk7XG5cbiAgcmV0dXJuIGVsO1xufTtcblxuZXhwb3J0IGNvbnN0IGluc2VydEJlZm9yZSA9IDxUIGV4dGVuZHMgTm9kZSB8IFZpcnR1YWxFbGVtZW50PihcbiAgY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBwYXJlbnQ6IFF3aWtFbGVtZW50LFxuICBuZXdDaGlsZDogVCxcbiAgcmVmQ2hpbGQ6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWRcbik6IFQgPT4ge1xuICBjdHguJG9wZXJhdGlvbnMkLnB1c2goe1xuICAgICRvcGVyYXRpb24kOiBkaXJlY3RJbnNlcnRCZWZvcmUsXG4gICAgJGFyZ3MkOiBbcGFyZW50LCBuZXdDaGlsZCwgcmVmQ2hpbGQgPyByZWZDaGlsZCA6IG51bGxdLFxuICB9KTtcbiAgcmV0dXJuIG5ld0NoaWxkO1xufTtcblxuZXhwb3J0IGNvbnN0IGFwcGVuZENoaWxkID0gPFQgZXh0ZW5kcyBOb2RlIHwgVmlydHVhbEVsZW1lbnQ+KFxuICBjdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsXG4gIHBhcmVudDogUXdpa0VsZW1lbnQsXG4gIG5ld0NoaWxkOiBUXG4pOiBUID0+IHtcbiAgY3R4LiRvcGVyYXRpb25zJC5wdXNoKHtcbiAgICAkb3BlcmF0aW9uJDogZGlyZWN0QXBwZW5kQ2hpbGQsXG4gICAgJGFyZ3MkOiBbcGFyZW50LCBuZXdDaGlsZF0sXG4gIH0pO1xuICByZXR1cm4gbmV3Q2hpbGQ7XG59O1xuXG5leHBvcnQgY29uc3QgYXBwZW5kSGVhZFN0eWxlID0gKGN0eDogUmVuZGVyU3RhdGljQ29udGV4dCwgc3R5bGVUYXNrOiBTdHlsZUFwcGVuZCkgPT4ge1xuICBjdHguJGNvbnRhaW5lclN0YXRlJC4kc3R5bGVJZHMkLmFkZChzdHlsZVRhc2suc3R5bGVJZCk7XG4gIGN0eC4kcG9zdE9wZXJhdGlvbnMkLnB1c2goe1xuICAgICRvcGVyYXRpb24kOiBfYXBwZW5kSGVhZFN0eWxlLFxuICAgICRhcmdzJDogW2N0eC4kY29udGFpbmVyU3RhdGUkLiRjb250YWluZXJFbCQsIHN0eWxlVGFza10sXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldENsYXNzbGlzdCA9IChcbiAgY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0IHwgdW5kZWZpbmVkLFxuICBlbG06IEVsZW1lbnQsXG4gIHRvUmVtb3ZlOiBzdHJpbmdbXSxcbiAgdG9BZGQ6IHN0cmluZ1tdXG4pID0+IHtcbiAgaWYgKGN0eCkge1xuICAgIGN0eC4kb3BlcmF0aW9ucyQucHVzaCh7XG4gICAgICAkb3BlcmF0aW9uJDogX3NldENsYXNzbGlzdCxcbiAgICAgICRhcmdzJDogW2VsbSwgdG9SZW1vdmUsIHRvQWRkXSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBfc2V0Q2xhc3NsaXN0KGVsbSwgdG9SZW1vdmUsIHRvQWRkKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IF9zZXRDbGFzc2xpc3QgPSAoZWxtOiBFbGVtZW50LCB0b1JlbW92ZTogc3RyaW5nW10sIHRvQWRkOiBzdHJpbmdbXSkgPT4ge1xuICBjb25zdCBjbGFzc0xpc3QgPSBlbG0uY2xhc3NMaXN0O1xuICBjbGFzc0xpc3QucmVtb3ZlKC4uLnRvUmVtb3ZlKTtcbiAgY2xhc3NMaXN0LmFkZCguLi50b0FkZCk7XG59O1xuXG5leHBvcnQgY29uc3QgX2FwcGVuZEhlYWRTdHlsZSA9IChjb250YWluZXJFbDogRWxlbWVudCwgc3R5bGVUYXNrOiBTdHlsZUFwcGVuZCkgPT4ge1xuICBjb25zdCBkb2MgPSBnZXREb2N1bWVudChjb250YWluZXJFbCk7XG4gIGNvbnN0IGlzRG9jID0gZG9jLmRvY3VtZW50RWxlbWVudCA9PT0gY29udGFpbmVyRWw7XG4gIGNvbnN0IGhlYWRFbCA9IGRvYy5oZWFkO1xuICBjb25zdCBzdHlsZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBpZiAoaXNEb2MgJiYgIWhlYWRFbCkge1xuICAgIGxvZ1dhcm4oJ2RvY3VtZW50LmhlYWQgaXMgdW5kZWZpbmVkJyk7XG4gIH1cbiAgZGlyZWN0U2V0QXR0cmlidXRlKHN0eWxlLCBRU3R5bGUsIHN0eWxlVGFzay5zdHlsZUlkKTtcbiAgc3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZVRhc2suY29udGVudDtcbiAgaWYgKGlzRG9jICYmIGhlYWRFbCkge1xuICAgIGRpcmVjdEFwcGVuZENoaWxkKGhlYWRFbCwgc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIGRpcmVjdEluc2VydEJlZm9yZShjb250YWluZXJFbCwgc3R5bGUsIGNvbnRhaW5lckVsLmZpcnN0Q2hpbGQpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcHJlcGVuZCA9IChjdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsIHBhcmVudDogUXdpa0VsZW1lbnQsIG5ld0NoaWxkOiBOb2RlKSA9PiB7XG4gIGN0eC4kb3BlcmF0aW9ucyQucHVzaCh7XG4gICAgJG9wZXJhdGlvbiQ6IGRpcmVjdEluc2VydEJlZm9yZSxcbiAgICAkYXJncyQ6IFtwYXJlbnQsIG5ld0NoaWxkLCBwYXJlbnQuZmlyc3RDaGlsZF0sXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlbW92ZU5vZGUgPSAoY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LCBlbDogTm9kZSB8IFZpcnR1YWxFbGVtZW50KSA9PiB7XG4gIGN0eC4kb3BlcmF0aW9ucyQucHVzaCh7XG4gICAgJG9wZXJhdGlvbiQ6IF9yZW1vdmVOb2RlLFxuICAgICRhcmdzJDogW2VsLCBjdHhdLFxuICB9KTtcbn07XG5cbmNvbnN0IF9yZW1vdmVOb2RlID0gKGVsOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQsIHN0YXRpY0N0eDogUmVuZGVyU3RhdGljQ29udGV4dCkgPT4ge1xuICBjb25zdCBwYXJlbnQgPSBlbC5wYXJlbnRFbGVtZW50O1xuICBpZiAocGFyZW50KSB7XG4gICAgaWYgKGVsLm5vZGVUeXBlID09PSAxIHx8IGVsLm5vZGVUeXBlID09PSAxMTEpIHtcbiAgICAgIGNvbnN0IHN1YnNNYW5hZ2VyID0gc3RhdGljQ3R4LiRjb250YWluZXJTdGF0ZSQuJHN1YnNNYW5hZ2VyJDtcbiAgICAgIGNsZWFudXBUcmVlKGVsIGFzIEVsZW1lbnQsIHN0YXRpY0N0eCwgc3Vic01hbmFnZXIsIHRydWUpO1xuICAgIH1cbiAgICBkaXJlY3RSZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgfSBlbHNlIGlmIChxRGV2KSB7XG4gICAgbG9nV2FybignVHJ5aW5nIHRvIHJlbW92ZSBjb21wb25lbnQgYWxyZWFkeSByZW1vdmVkJywgZWwpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlVGVtcGxhdGUgPSAoZG9jOiBEb2N1bWVudCwgc2xvdE5hbWU6IHN0cmluZykgPT4ge1xuICBjb25zdCB0ZW1wbGF0ZSA9IGNyZWF0ZUVsZW1lbnQoZG9jLCAncTp0ZW1wbGF0ZScsIGZhbHNlKTtcbiAgZGlyZWN0U2V0QXR0cmlidXRlKHRlbXBsYXRlLCBRU2xvdCwgc2xvdE5hbWUpO1xuICBkaXJlY3RTZXRBdHRyaWJ1dGUodGVtcGxhdGUsICdoaWRkZW4nLCAnJyk7XG4gIGRpcmVjdFNldEF0dHJpYnV0ZSh0ZW1wbGF0ZSwgJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICByZXR1cm4gdGVtcGxhdGU7XG59O1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZURPTVJlbmRlciA9IChjdHg6IFJlbmRlclN0YXRpY0NvbnRleHQpID0+IHtcbiAgZm9yIChjb25zdCBvcCBvZiBjdHguJG9wZXJhdGlvbnMkKSB7XG4gICAgb3AuJG9wZXJhdGlvbiQuYXBwbHkodW5kZWZpbmVkLCBvcC4kYXJncyQpO1xuICB9XG4gIHJlc29sdmVTbG90UHJvamVjdGlvbihjdHgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEtleSA9IChlbDogUXdpa0VsZW1lbnQpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgcmV0dXJuIGRpcmVjdEdldEF0dHJpYnV0ZShlbCwgJ3E6a2V5Jyk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0S2V5ID0gKGVsOiBRd2lrRWxlbWVudCwga2V5OiBzdHJpbmcgfCBudWxsKSA9PiB7XG4gIGlmIChrZXkgIT09IG51bGwpIHtcbiAgICBkaXJlY3RTZXRBdHRyaWJ1dGUoZWwsICdxOmtleScsIGtleSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCByZXNvbHZlU2xvdFByb2plY3Rpb24gPSAoY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0KSA9PiB7XG4gIC8vIFNsb3RzIHJlbW92ZWRcbiAgY29uc3Qgc3Vic01hbmFnZXIgPSBjdHguJGNvbnRhaW5lclN0YXRlJC4kc3Vic01hbmFnZXIkO1xuICBmb3IgKGNvbnN0IHNsb3RFbCBvZiBjdHguJHJtU2xvdHMkKSB7XG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KHNsb3RFbCk7XG4gICAgYXNzZXJ0RGVmaW5lZChrZXksICdzbG90cyBtdXN0IGhhdmUgYSBrZXknKTtcblxuICAgIGNvbnN0IHNsb3RDaGlsZHJlbiA9IGdldENoaWxkcmVuKHNsb3RFbCwgJ3Jvb3QnKTtcbiAgICBpZiAoc2xvdENoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHNyZWYgPSBzbG90RWwuZ2V0QXR0cmlidXRlKFFTbG90UmVmKTtcbiAgICAgIGNvbnN0IGhvc3RDdHggPSBjdHguJHJvb3RzJC5maW5kKChyKSA9PiByLiRpZCQgPT09IHNyZWYpO1xuICAgICAgaWYgKGhvc3RDdHgpIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBjcmVhdGVUZW1wbGF0ZShjdHguJGRvYyQsIGtleSk7XG4gICAgICAgIGNvbnN0IGhvc3RFbG0gPSBob3N0Q3R4LiRlbGVtZW50JDtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBzbG90Q2hpbGRyZW4pIHtcbiAgICAgICAgICBkaXJlY3RBcHBlbmRDaGlsZCh0ZW1wbGF0ZSwgY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGRpcmVjdEluc2VydEJlZm9yZShob3N0RWxtLCB0ZW1wbGF0ZSwgaG9zdEVsbS5maXJzdENoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHNsb3QgY29udGVudCBjYW5ub3QgYmUgcmVsb2NhdGVkLCBpdCBtZWFucyBpdCdzIGNvbnRlbnQgaXMgZGVmaW5pdmVseSByZW1vdmVkXG4gICAgICAgIC8vIENsZWFudXAgbmVlZHMgdG8gYmUgZXhlY3V0ZWRcbiAgICAgICAgY2xlYW51cFRyZWUoc2xvdEVsLCBjdHgsIHN1YnNNYW5hZ2VyLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gU2xvdHMgYWRkZWRcbiAgZm9yIChjb25zdCBbc2xvdEVsLCBob3N0RWxtXSBvZiBjdHguJGFkZFNsb3RzJCkge1xuICAgIGNvbnN0IGtleSA9IGdldEtleShzbG90RWwpO1xuICAgIGFzc2VydERlZmluZWQoa2V5LCAnc2xvdHMgbXVzdCBoYXZlIGEga2V5Jyk7XG5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IEFycmF5LmZyb20oaG9zdEVsbS5jaGlsZE5vZGVzKS5maW5kKChub2RlKSA9PiB7XG4gICAgICByZXR1cm4gaXNTbG90VGVtcGxhdGUobm9kZSkgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUVNsb3QpID09PSBrZXk7XG4gICAgfSkgYXMgRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gZ2V0Q2hpbGRyZW4odGVtcGxhdGUsICdyb290Jyk7XG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICBkaXJlY3RBcHBlbmRDaGlsZChzbG90RWwsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgICAgdGVtcGxhdGUucmVtb3ZlKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlVGV4dE5vZGUgPSAoZG9jOiBEb2N1bWVudCwgdGV4dDogc3RyaW5nKTogVGV4dCA9PiB7XG4gIHJldHVybiBkb2MuY3JlYXRlVGV4dE5vZGUodGV4dCk7XG59O1xuXG5leHBvcnQgY29uc3QgcHJpbnRSZW5kZXJTdGF0cyA9IChjdHg6IFJlbmRlclN0YXRpY0NvbnRleHQpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGJ5T3A6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgICAgIGZvciAoY29uc3Qgb3Agb2YgY3R4LiRvcGVyYXRpb25zJCkge1xuICAgICAgICBieU9wW29wLiRvcGVyYXRpb24kLm5hbWVdID0gKGJ5T3Bbb3AuJG9wZXJhdGlvbiQubmFtZV0gPz8gMCkgKyAxO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhdHMgPSB7XG4gICAgICAgIGJ5T3AsXG4gICAgICAgIHJvb3RzOiBjdHguJHJvb3RzJC5tYXAoKGN0eCkgPT4gY3R4LiRlbGVtZW50JCksXG4gICAgICAgIGhvc3RFbGVtZW50czogQXJyYXkuZnJvbShjdHguJGhvc3RFbGVtZW50cyQpLFxuICAgICAgICBvcGVyYXRpb25zOiBjdHguJG9wZXJhdGlvbnMkLm1hcCgodikgPT4gW3YuJG9wZXJhdGlvbiQubmFtZSwgLi4udi4kYXJncyRdKSxcbiAgICAgIH07XG4gICAgICBjb25zdCBub09wcyA9IGN0eC4kb3BlcmF0aW9ucyQubGVuZ3RoID09PSAwO1xuICAgICAgbG9nRGVidWcoJ1JlbmRlciBzdGF0cy4nLCBub09wcyA/ICdObyBvcGVyYXRpb25zJyA6ICcnLCBzdGF0cyk7XG4gICAgfVxuICB9XG59O1xuIl19","import { assertEqual, assertTrue } from '../../error/assert';\nimport { isComment, isElement, isQwikElement, isVirtualElement } from '../../util/element';\nimport { qSerialize, seal } from '../../util/qdev';\nimport { directGetAttribute } from '../fast-calls';\nimport { createElement } from './operations';\nimport { getChildren } from './visitor';\nconst VIRTUAL_SYMBOL = '__virtual';\nexport const newVirtualElement = (doc) => {\n    const open = doc.createComment('qv ');\n    const close = doc.createComment('/qv');\n    return new VirtualElementImpl(open, close);\n};\nexport const parseVirtualAttributes = (str) => {\n    if (!str) {\n        return new Map();\n    }\n    const attributes = str.split(' ');\n    return new Map(attributes.map((attr) => {\n        const index = attr.indexOf('=');\n        if (index >= 0) {\n            return [attr.slice(0, index), unescape(attr.slice(index + 1))];\n        }\n        else {\n            return [attr, ''];\n        }\n    }));\n};\nexport const serializeVirtualAttributes = (map) => {\n    const attributes = [];\n    map.forEach((value, key) => {\n        if (!value) {\n            attributes.push(`${key}`);\n        }\n        else {\n            attributes.push(`${key}=${escape(value)}`);\n        }\n    });\n    return attributes.join(' ');\n};\nconst SHOW_COMMENT = 128;\nconst FILTER_ACCEPT = 1;\nconst FILTER_REJECT = 2;\nexport const walkerVirtualByAttribute = (el, prop, value) => {\n    return el.ownerDocument.createTreeWalker(el, SHOW_COMMENT, {\n        acceptNode(c) {\n            const virtual = getVirtualElement(c);\n            if (virtual) {\n                return directGetAttribute(virtual, prop) === value ? FILTER_ACCEPT : FILTER_REJECT;\n            }\n            return FILTER_REJECT;\n        },\n    });\n};\nexport const queryVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const open = walker.firstChild();\n    if (open) {\n        return getVirtualElement(open);\n    }\n    return null;\n};\nexport const queryAllVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const pars = [];\n    let currentNode = null;\n    while ((currentNode = walker.nextNode())) {\n        pars.push(getVirtualElement(currentNode));\n    }\n    return pars;\n};\nexport const escape = (s) => {\n    return s.replace(/ /g, '+');\n};\nexport const unescape = (s) => {\n    return s.replace(/\\+/g, ' ');\n};\nexport const VIRTUAL = ':virtual';\nexport class VirtualElementImpl {\n    constructor(open, close) {\n        this.open = open;\n        this.close = close;\n        this._qc_ = null;\n        this.nodeType = 111;\n        this.localName = VIRTUAL;\n        this.nodeName = VIRTUAL;\n        const doc = (this.ownerDocument = open.ownerDocument);\n        this.template = createElement(doc, 'template', false);\n        this.attributes = parseVirtualAttributes(open.data.slice(3));\n        assertTrue(open.data.startsWith('qv '), 'comment is not a qv');\n        open[VIRTUAL_SYMBOL] = this;\n        seal(this);\n    }\n    insertBefore(node, ref) {\n        const parent = this.parentElement;\n        if (parent) {\n            const ref2 = ref ? ref : this.close;\n            parent.insertBefore(node, ref2);\n        }\n        else {\n            this.template.insertBefore(node, ref);\n        }\n        return node;\n    }\n    remove() {\n        const parent = this.parentElement;\n        if (parent) {\n            const ch = Array.from(this.childNodes);\n            assertEqual(this.template.childElementCount, 0, 'children should be empty');\n            parent.removeChild(this.open);\n            this.template.append(...ch);\n            parent.removeChild(this.close);\n        }\n    }\n    appendChild(node) {\n        return this.insertBefore(node, null);\n    }\n    insertBeforeTo(newParent, child) {\n        const ch = Array.from(this.childNodes);\n        // TODO\n        // if (this.parentElement) {\n        //   console.warn('already attached');\n        // }\n        newParent.insertBefore(this.open, child);\n        for (const c of ch) {\n            newParent.insertBefore(c, child);\n        }\n        newParent.insertBefore(this.close, child);\n        assertEqual(this.template.childElementCount, 0, 'children should be empty');\n    }\n    appendTo(newParent) {\n        this.insertBeforeTo(newParent, null);\n    }\n    get namespaceURI() {\n        return this.parentElement?.namespaceURI ?? '';\n    }\n    removeChild(child) {\n        if (this.parentElement) {\n            this.parentElement.removeChild(child);\n        }\n        else {\n            this.template.removeChild(child);\n        }\n    }\n    getAttribute(prop) {\n        return this.attributes.get(prop) ?? null;\n    }\n    hasAttribute(prop) {\n        return this.attributes.has(prop);\n    }\n    setAttribute(prop, value) {\n        this.attributes.set(prop, value);\n        if (qSerialize) {\n            this.open.data = updateComment(this.attributes);\n        }\n    }\n    removeAttribute(prop) {\n        this.attributes.delete(prop);\n        if (qSerialize) {\n            this.open.data = updateComment(this.attributes);\n        }\n    }\n    matches(_) {\n        return false;\n    }\n    compareDocumentPosition(other) {\n        return this.open.compareDocumentPosition(other);\n    }\n    closest(query) {\n        const parent = this.parentElement;\n        if (parent) {\n            return parent.closest(query);\n        }\n        return null;\n    }\n    querySelectorAll(query) {\n        const result = [];\n        const ch = getChildren(this, 'elements');\n        ch.forEach((el) => {\n            if (isQwikElement(el)) {\n                if (el.matches(query)) {\n                    result.push(el);\n                }\n                result.concat(Array.from(el.querySelectorAll(query)));\n            }\n        });\n        return result;\n    }\n    querySelector(query) {\n        for (const el of this.childNodes) {\n            if (isElement(el)) {\n                if (el.matches(query)) {\n                    return el;\n                }\n                const v = el.querySelector(query);\n                if (v !== null) {\n                    return v;\n                }\n            }\n        }\n        return null;\n    }\n    get firstChild() {\n        if (this.parentElement) {\n            const first = this.open.nextSibling;\n            if (first === this.close) {\n                return null;\n            }\n            return first;\n        }\n        else {\n            return this.template.firstChild;\n        }\n    }\n    get nextSibling() {\n        return this.close.nextSibling;\n    }\n    get previousSibling() {\n        return this.open.previousSibling;\n    }\n    get childNodes() {\n        if (!this.parentElement) {\n            return this.template.childNodes;\n        }\n        const nodes = [];\n        let node = this.open;\n        while ((node = node.nextSibling)) {\n            if (node !== this.close) {\n                nodes.push(node);\n            }\n            else {\n                break;\n            }\n        }\n        return nodes;\n    }\n    get isConnected() {\n        return this.open.isConnected;\n    }\n    get parentElement() {\n        return this.open.parentElement;\n    }\n}\nconst updateComment = (attributes) => {\n    return `qv ${serializeVirtualAttributes(attributes)}`;\n};\nexport const processVirtualNodes = (node) => {\n    if (node == null) {\n        return null;\n    }\n    if (isComment(node)) {\n        const virtual = getVirtualElement(node);\n        if (virtual) {\n            return virtual;\n        }\n    }\n    return node;\n};\nexport const getVirtualElement = (open) => {\n    const virtual = open[VIRTUAL_SYMBOL];\n    if (virtual) {\n        return virtual;\n    }\n    if (open.data.startsWith('qv ')) {\n        const close = findClose(open);\n        return new VirtualElementImpl(open, close);\n    }\n    return null;\n};\nexport const findClose = (open) => {\n    let node = open.nextSibling;\n    let stack = 1;\n    while (node) {\n        if (isComment(node)) {\n            if (node.data.startsWith('qv ')) {\n                stack++;\n            }\n            else if (node.data === '/qv') {\n                stack--;\n                if (stack === 0) {\n                    return node;\n                }\n            }\n        }\n        node = node.nextSibling;\n    }\n    throw new Error('close not found');\n};\nexport const getRootNode = (node) => {\n    if (node == null) {\n        return null; // TODO\n    }\n    if (isVirtualElement(node)) {\n        return node.open;\n    }\n    else {\n        return node;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_invalidContext, QError_notFoundContext } from '../error/error';\nimport { qDev } from '../util/qdev';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { getVirtualElement } from '../render/dom/virtual-element';\nimport { isComment } from '../util/element';\nimport { assertTrue } from '../error/assert';\nimport { verifySerializable } from '../state/common';\nimport { getContext, tryGetContext } from '../state/context';\n// <docs markdown=\"../readme.md#createContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#createContext instead)\n/**\n * Create a context ID to be used in your application.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * Use `createContext()` to create a `Context`. `Context` is just a serializable identifier for\n * the context. It is not the context value itself. See `useContextProvider()` and `useContext()`\n * for the values. Qwik needs a serializable ID for the context so that the it can track context\n * providers and consumers in a way that survives resumability.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param name - The name of the context.\n * @public\n */\n// </docs>\nexport const createContext = (name) => {\n    assertTrue(/^[\\w/.-]+$/.test(name), 'Context name must only contain A-Z,a-z,0-9, _', name);\n    return /*#__PURE__*/ Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n// <docs markdown=\"../readme.md#useContextProvider\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContextProvider instead)\n/**\n * Assign a value to a Context.\n *\n * Use `useContextProvider()` to assign a value to a context. The assignment happens in the\n * component's function. Once assign use `useContext()` in any child component to retrieve the\n * value.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to assign a value to.\n * @param value - The value to assign to the context.\n * @public\n */\n// </docs>\nexport const useContextProvider = (context, newValue) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get !== undefined) {\n        return;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    const hostElement = ctx.$hostElement$;\n    const hostCtx = getContext(hostElement);\n    let contexts = hostCtx.$contexts$;\n    if (!contexts) {\n        hostCtx.$contexts$ = contexts = new Map();\n    }\n    if (qDev) {\n        verifySerializable(newValue);\n    }\n    contexts.set(context.id, newValue);\n    set(true);\n};\n/**\n * @alpha\n */\nexport const useContextBoundary = (...ids) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get !== undefined) {\n        return;\n    }\n    const hostElement = ctx.$hostElement$;\n    const hostCtx = getContext(hostElement);\n    let contexts = hostCtx.$contexts$;\n    if (!contexts) {\n        hostCtx.$contexts$ = contexts = new Map();\n    }\n    for (const c of ids) {\n        const value = resolveContext(c, hostElement, ctx.$renderCtx$);\n        if (value !== undefined) {\n            contexts.set(c.id, value);\n        }\n    }\n    contexts.set('_', true);\n    set(true);\n};\n// <docs markdown=\"../readme.md#useContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContext instead)\n/**\n * Retrive Context value.\n *\n * Use `useContext()` to retrieve the value of context in a component. To retrieve a value a\n * parent component needs to invoke `useContextProvider()` to assign a value.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to retrieve a value from.\n * @public\n */\n// </docs>\nexport const useContext = (context, defaultValue) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get !== undefined) {\n        return get;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    const value = resolveContext(context, ctx.$hostElement$, ctx.$renderCtx$);\n    if (value !== undefined) {\n        return set(value);\n    }\n    if (defaultValue !== undefined) {\n        return set(defaultValue);\n    }\n    throw qError(QError_notFoundContext, context.id);\n};\nexport const resolveContext = (context, hostElement, rctx) => {\n    const contextID = context.id;\n    if (rctx) {\n        const contexts = rctx.$localStack$;\n        for (let i = contexts.length - 1; i >= 0; i--) {\n            const ctx = contexts[i];\n            hostElement = ctx.$element$;\n            if (ctx.$contexts$) {\n                const found = ctx.$contexts$.get(contextID);\n                if (found) {\n                    return found;\n                }\n                if (ctx.$contexts$.get('_') === true) {\n                    break;\n                }\n            }\n        }\n    }\n    if (hostElement.closest) {\n        const value = queryContextFromDom(hostElement, contextID);\n        if (value !== undefined) {\n            return value;\n        }\n    }\n    return undefined;\n};\nexport const queryContextFromDom = (hostElement, contextId) => {\n    let element = hostElement;\n    while (element) {\n        let node = element;\n        let virtual;\n        while (node && (virtual = findVirtual(node))) {\n            const contexts = tryGetContext(virtual)?.$contexts$;\n            if (contexts) {\n                if (contexts.has(contextId)) {\n                    return contexts.get(contextId);\n                }\n            }\n            node = virtual;\n        }\n        element = element.parentElement;\n    }\n    return undefined;\n};\nexport const findVirtual = (el) => {\n    let node = el;\n    let stack = 1;\n    while ((node = node.previousSibling)) {\n        if (isComment(node)) {\n            if (node.data === '/qv') {\n                stack++;\n            }\n            else if (node.data.startsWith('qv ')) {\n                stack--;\n                if (stack === 0) {\n                    return getVirtualElement(node);\n                }\n            }\n        }\n    }\n    return null;\n};\nexport const validateContext = (context) => {\n    if (!isObject(context) || typeof context.id !== 'string' || context.id.length === 0) {\n        throw qError(QError_invalidContext, context);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServer } from '../platform/platform';\nimport { getContext } from '../state/context';\nimport { createContext, resolveContext } from '../use/use-context';\nimport { isVirtualElement } from '../util/element';\nimport { qDev } from '../util/qdev';\nexport const ERROR_CONTEXT = /*#__PURE__*/ createContext('qk-error');\nexport const handleError = (err, hostElement, rctx) => {\n    if (qDev) {\n        // Clean vdom\n        if (!isServer() && isVirtualElement(hostElement)) {\n            getContext(hostElement).$vdom$ = null;\n            const errorDiv = document.createElement('errored-host');\n            if (err && err instanceof Error) {\n                errorDiv.props = { error: err };\n            }\n            errorDiv.setAttribute('q:key', '_error_');\n            errorDiv.append(...hostElement.childNodes);\n            hostElement.appendChild(errorDiv);\n        }\n        if (err && err instanceof Error) {\n            if (!('hostElement' in err)) {\n                err['hostElement'] = hostElement;\n            }\n        }\n        if (!isRecoverable(err)) {\n            throw err;\n        }\n    }\n    if (isServer()) {\n        throw err;\n    }\n    else {\n        const errorStore = resolveContext(ERROR_CONTEXT, hostElement, rctx);\n        if (errorStore === undefined) {\n            throw err;\n        }\n        errorStore.error = err;\n    }\n};\nconst isRecoverable = (err) => {\n    if (err && err instanceof Error) {\n        if ('plugin' in err) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2Vycm9yLWhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBUXBDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFxQixVQUFVLENBQUMsQ0FBQztBQUV6RixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFRLEVBQUUsV0FBd0IsRUFBRSxJQUFvQixFQUFFLEVBQUU7SUFDdEYsSUFBSSxJQUFJLEVBQUU7UUFDUixhQUFhO1FBQ2IsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ2hELFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ3RDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDeEQsSUFBSSxHQUFHLElBQUksR0FBRyxZQUFZLEtBQUssRUFBRTtnQkFDOUIsUUFBZ0IsQ0FBQyxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7YUFDMUM7WUFDRCxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUMxQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbkM7UUFFRCxJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFO1lBQy9CLElBQUksQ0FBQyxDQUFDLGFBQWEsSUFBSSxHQUFHLENBQUMsRUFBRTtnQkFDMUIsR0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLFdBQVcsQ0FBQzthQUMzQztTQUNGO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN2QixNQUFNLEdBQUcsQ0FBQztTQUNYO0tBQ0Y7SUFDRCxJQUFJLFFBQVEsRUFBRSxFQUFFO1FBQ2QsTUFBTSxHQUFHLENBQUM7S0FDWDtTQUFNO1FBQ0wsTUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEUsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQzVCLE1BQU0sR0FBRyxDQUFDO1NBQ1g7UUFDRCxVQUFVLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztLQUN4QjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUU7SUFDakMsSUFBSSxHQUFHLElBQUksR0FBRyxZQUFZLEtBQUssRUFBRTtRQUMvQixJQUFJLFFBQVEsSUFBSSxHQUFHLEVBQUU7WUFDbkIsT0FBTyxLQUFLLENBQUM7U0FDZDtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9jb250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHJlc29sdmVDb250ZXh0IH0gZnJvbSAnLi4vdXNlL3VzZS1jb250ZXh0JztcbmltcG9ydCB7IGlzVmlydHVhbEVsZW1lbnQgfSBmcm9tICcuLi91dGlsL2VsZW1lbnQnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5pbXBvcnQgdHlwZSB7IFF3aWtFbGVtZW50IH0gZnJvbSAnLi9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB0eXBlIHsgUmVuZGVyQ29udGV4dCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yQm91bmRhcnlTdG9yZSB7XG4gIGVycm9yOiBhbnkgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9DT05URVhUID0gLyojX19QVVJFX18qLyBjcmVhdGVDb250ZXh0PEVycm9yQm91bmRhcnlTdG9yZT4oJ3FrLWVycm9yJyk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVFcnJvciA9IChlcnI6IGFueSwgaG9zdEVsZW1lbnQ6IFF3aWtFbGVtZW50LCByY3R4PzogUmVuZGVyQ29udGV4dCkgPT4ge1xuICBpZiAocURldikge1xuICAgIC8vIENsZWFuIHZkb21cbiAgICBpZiAoIWlzU2VydmVyKCkgJiYgaXNWaXJ0dWFsRWxlbWVudChob3N0RWxlbWVudCkpIHtcbiAgICAgIGdldENvbnRleHQoaG9zdEVsZW1lbnQpLiR2ZG9tJCA9IG51bGw7XG4gICAgICBjb25zdCBlcnJvckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Vycm9yZWQtaG9zdCcpO1xuICAgICAgaWYgKGVyciAmJiBlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAoZXJyb3JEaXYgYXMgYW55KS5wcm9wcyA9IHsgZXJyb3I6IGVyciB9O1xuICAgICAgfVxuICAgICAgZXJyb3JEaXYuc2V0QXR0cmlidXRlKCdxOmtleScsICdfZXJyb3JfJyk7XG4gICAgICBlcnJvckRpdi5hcHBlbmQoLi4uaG9zdEVsZW1lbnQuY2hpbGROb2Rlcyk7XG4gICAgICBob3N0RWxlbWVudC5hcHBlbmRDaGlsZChlcnJvckRpdik7XG4gICAgfVxuXG4gICAgaWYgKGVyciAmJiBlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgaWYgKCEoJ2hvc3RFbGVtZW50JyBpbiBlcnIpKSB7XG4gICAgICAgIChlcnIgYXMgYW55KVsnaG9zdEVsZW1lbnQnXSA9IGhvc3RFbGVtZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzUmVjb3ZlcmFibGUoZXJyKSkge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuICBpZiAoaXNTZXJ2ZXIoKSkge1xuICAgIHRocm93IGVycjtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBlcnJvclN0b3JlID0gcmVzb2x2ZUNvbnRleHQoRVJST1JfQ09OVEVYVCwgaG9zdEVsZW1lbnQsIHJjdHgpO1xuICAgIGlmIChlcnJvclN0b3JlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgZXJyb3JTdG9yZS5lcnJvciA9IGVycjtcbiAgfVxufTtcblxuY29uc3QgaXNSZWNvdmVyYWJsZSA9IChlcnI6IGFueSkgPT4ge1xuICBpZiAoZXJyICYmIGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgaWYgKCdwbHVnaW4nIGluIGVycikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG4iXX0=","import { assertDefined } from '../error/assert';\nimport { RenderEvent } from '../util/markers';\nimport { safeCall } from '../util/promises';\nimport { newInvokeContext } from '../use/use-core';\nimport { isArray, isObject, isString } from '../util/types';\nimport { intToStr } from '../container/container';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_stringifyClassOrStyle } from '../error/error';\nimport { seal } from '../util/qdev';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { SkipRender } from './jsx/utils.public';\nimport { handleError } from './error-handling';\nimport { HOST_FLAG_DIRTY, HOST_FLAG_MOUNTED } from '../state/context';\nexport const executeComponent = (rCtx, elCtx) => {\n    elCtx.$flags$ &= ~HOST_FLAG_DIRTY;\n    elCtx.$flags$ |= HOST_FLAG_MOUNTED;\n    elCtx.$slots$ = [];\n    elCtx.li.length = 0;\n    const hostElement = elCtx.$element$;\n    const componentQRL = elCtx.$componentQrl$;\n    const props = elCtx.$props$;\n    const newCtx = pushRenderContext(rCtx, elCtx);\n    const invocatinContext = newInvokeContext(hostElement, undefined, RenderEvent);\n    const waitOn = (invocatinContext.$waitOn$ = []);\n    assertDefined(componentQRL, `render: host element to render must has a $renderQrl$:`, elCtx);\n    assertDefined(props, `render: host element to render must has defined props`, elCtx);\n    // Set component context\n    newCtx.$cmpCtx$ = elCtx;\n    // Invoke render hook\n    invocatinContext.$subscriber$ = hostElement;\n    invocatinContext.$renderCtx$ = rCtx;\n    // Resolve render function\n    componentQRL.$setContainer$(rCtx.$static$.$containerState$.$containerEl$);\n    const componentFn = componentQRL.getFn(invocatinContext);\n    return safeCall(() => componentFn(props), (jsxNode) => {\n        if (waitOn.length > 0) {\n            return Promise.all(waitOn).then(() => {\n                if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n                    return executeComponent(rCtx, elCtx);\n                }\n                return {\n                    node: jsxNode,\n                    rCtx: newCtx,\n                };\n            });\n        }\n        if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n            return executeComponent(rCtx, elCtx);\n        }\n        return {\n            node: jsxNode,\n            rCtx: newCtx,\n        };\n    }, (err) => {\n        handleError(err, hostElement, rCtx);\n        return {\n            node: SkipRender,\n            rCtx: newCtx,\n        };\n    });\n};\nexport const createRenderContext = (doc, containerState) => {\n    const ctx = {\n        $static$: {\n            $doc$: doc,\n            $containerState$: containerState,\n            $hostElements$: new Set(),\n            $operations$: [],\n            $postOperations$: [],\n            $roots$: [],\n            $addSlots$: [],\n            $rmSlots$: [],\n        },\n        $cmpCtx$: undefined,\n        $localStack$: [],\n    };\n    seal(ctx);\n    seal(ctx.$static$);\n    return ctx;\n};\nexport const pushRenderContext = (ctx, elCtx) => {\n    const newCtx = {\n        $static$: ctx.$static$,\n        $cmpCtx$: ctx.$cmpCtx$,\n        $localStack$: ctx.$localStack$.concat(elCtx),\n    };\n    return newCtx;\n};\nexport const serializeClass = (obj) => {\n    if (isString(obj)) {\n        return obj;\n    }\n    else if (isObject(obj)) {\n        if (isArray(obj)) {\n            return obj.join(' ');\n        }\n        else {\n            let buffer = '';\n            let previous = false;\n            for (const key of Object.keys(obj)) {\n                const value = obj[key];\n                if (value) {\n                    if (previous) {\n                        buffer += ' ';\n                    }\n                    buffer += key;\n                    previous = true;\n                }\n            }\n            return buffer;\n        }\n    }\n    return '';\n};\nconst parseClassListRegex = /\\s/;\nexport const parseClassList = (value) => !value ? EMPTY_ARRAY : value.split(parseClassListRegex);\nexport const stringifyStyle = (obj) => {\n    if (obj == null)\n        return '';\n    if (typeof obj == 'object') {\n        if (isArray(obj)) {\n            throw qError(QError_stringifyClassOrStyle, obj, 'style');\n        }\n        else {\n            const chunks = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value) {\n                        chunks.push(fromCamelToKebabCase(key) + ':' + value);\n                    }\n                }\n            }\n            return chunks.join(';');\n        }\n    }\n    return String(obj);\n};\nexport const getNextIndex = (ctx) => {\n    return intToStr(ctx.$static$.$containerState$.$elementIndex$++);\n};\nexport const setQId = (rCtx, elCtx) => {\n    const id = getNextIndex(rCtx);\n    elCtx.$id$ = id;\n};\nexport const hasStyle = (containerState, styleId) => {\n    return containerState.$styleIds$.has(styleId);\n};\nexport const jsxToString = (data) => {\n    return data == null || typeof data === 'boolean' ? '' : String(data);\n};\n//# sourceMappingURL=data:application/json;base64,","export const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\nexport const QOjectTargetSymbol = Symbol('proxy target');\nexport const QObjectFlagsSymbol = Symbol('proxy flags');\nexport const QObjectManagerSymbol = Symbol('proxy manager');\n/**\n * @internal\n */\nexport const _IMMUTABLE = Symbol('IMMUTABLE');\nexport const _IMMUTABLE_PREFIX = '$$';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3N0YXRlL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFdkMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4RCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFNUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRTlDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBRT2JqZWN0UmVjdXJzaXZlID0gMSA8PCAwO1xuZXhwb3J0IGNvbnN0IFFPYmplY3RJbW11dGFibGUgPSAxIDw8IDE7XG5cbmV4cG9ydCBjb25zdCBRT2plY3RUYXJnZXRTeW1ib2wgPSBTeW1ib2woJ3Byb3h5IHRhcmdldCcpO1xuZXhwb3J0IGNvbnN0IFFPYmplY3RGbGFnc1N5bWJvbCA9IFN5bWJvbCgncHJveHkgZmxhZ3MnKTtcbmV4cG9ydCBjb25zdCBRT2JqZWN0TWFuYWdlclN5bWJvbCA9IFN5bWJvbCgncHJveHkgbWFuYWdlcicpO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgX0lNTVVUQUJMRSA9IFN5bWJvbCgnSU1NVVRBQkxFJyk7XG5cbmV4cG9ydCBjb25zdCBfSU1NVVRBQkxFX1BSRUZJWCA9ICckJCc7XG4iXX0=","import { assertEqual, assertTrue } from '../error/assert';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { logWarn } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { RenderEvent } from '../util/markers';\nimport { isObject } from '../util/types';\nimport { getProxyManager, getProxyTarget, verifySerializable, } from './common';\nimport { QObjectManagerSymbol, _IMMUTABLE, _IMMUTABLE_PREFIX } from './constants';\nexport const createSignal = (value, containerState, subcriptions) => {\n    const manager = containerState.$subsManager$.$createManager$(subcriptions);\n    const signal = new SignalImpl(value, manager);\n    return signal;\n};\nexport class SignalImpl {\n    constructor(v, manager) {\n        this.untrackedValue = v;\n        this[QObjectManagerSymbol] = manager;\n    }\n    get value() {\n        const sub = tryGetInvokeContext()?.$subscriber$;\n        if (sub) {\n            this[QObjectManagerSymbol].$addSub$([0, sub, undefined]);\n        }\n        return this.untrackedValue;\n    }\n    set value(v) {\n        if (qDev) {\n            verifySerializable(v);\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx && invokeCtx.$event$ === RenderEvent) {\n                logWarn('State mutation inside render function. Move mutation to useWatch(), useClientEffect() or useServerMount()', invokeCtx.$hostElement$);\n            }\n        }\n        const manager = this[QObjectManagerSymbol];\n        const oldValue = this.untrackedValue;\n        if (manager && oldValue !== v) {\n            this.untrackedValue = v;\n            manager.$notifySubs$();\n        }\n    }\n}\nexport const isSignal = (obj) => {\n    return obj instanceof SignalImpl || obj instanceof SignalWrapper;\n};\nexport const addSignalSub = (type, hostEl, signal, elm, property) => {\n    const subscription = signal instanceof SignalWrapper\n        ? [\n            type,\n            hostEl,\n            getProxyTarget(signal.ref),\n            elm,\n            property,\n            signal.prop === 'value' ? undefined : signal.prop,\n        ]\n        : [type, hostEl, signal, elm, property, undefined];\n    getProxyManager(signal).$addSub$(subscription);\n};\nexport class SignalWrapper {\n    constructor(ref, prop) {\n        this.ref = ref;\n        this.prop = prop;\n    }\n    get [QObjectManagerSymbol]() {\n        return getProxyManager(this.ref);\n    }\n    get value() {\n        return this.ref[this.prop];\n    }\n    set value(value) {\n        this.ref[this.prop] = value;\n    }\n}\n/**\n * @internal\n */\nexport const _wrapSignal = (obj, prop) => {\n    if (!isObject(obj)) {\n        return undefined;\n    }\n    if (obj instanceof SignalImpl) {\n        assertEqual(prop, 'value', 'Left side is a signal, prop must be value');\n        return obj;\n    }\n    if (obj instanceof SignalWrapper) {\n        assertEqual(prop, 'value', 'Left side is a signal, prop must be value');\n        return obj;\n    }\n    const target = getProxyTarget(obj);\n    if (target) {\n        const signal = target[_IMMUTABLE_PREFIX + prop];\n        if (signal) {\n            assertTrue(isSignal(signal), `${_IMMUTABLE_PREFIX} has to be a signal kind`);\n            return signal;\n        }\n        return new SignalWrapper(obj, prop);\n    }\n    const immutable = obj[_IMMUTABLE]?.[prop];\n    if (isSignal(immutable)) {\n        return immutable;\n    }\n    return obj[prop];\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_invalidJsxNodeType } from '../../error/error';\nimport { newInvokeContext, invoke } from '../../use/use-core';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../../util/flyweight';\nimport { logWarn } from '../../util/log';\nimport { isNotNullable, isPromise, promiseAll, then } from '../../util/promises';\nimport { qDev, seal } from '../../util/qdev';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { domToVnode, visitJsxNode } from './visitor';\nimport { SkipRender, Virtual } from '../jsx/utils.public';\nimport { isJSXNode, SKIP_RENDER_TYPE } from '../jsx/jsx-runtime';\nimport { executeComponent, jsxToString } from '../execute-component';\nimport { VIRTUAL } from './virtual-element';\nimport { appendHeadStyle } from './operations';\nimport { isSignal } from '../../state/signal';\nimport { HOST_FLAG_MOUNTED } from '../../state/context';\nexport const renderComponent = (rCtx, elCtx, flags) => {\n    const justMounted = !(elCtx.$flags$ & HOST_FLAG_MOUNTED);\n    const hostElement = elCtx.$element$;\n    const containerState = rCtx.$static$.$containerState$;\n    // Component is not dirty any more\n    containerState.$hostsStaging$.delete(hostElement);\n    // Clean current subscription before render\n    containerState.$subsManager$.$clearSub$(hostElement);\n    // TODO, serialize scopeIds\n    return then(executeComponent(rCtx, elCtx), (res) => {\n        const staticCtx = rCtx.$static$;\n        const newCtx = res.rCtx;\n        const invocatinContext = newInvokeContext(hostElement);\n        staticCtx.$hostElements$.add(hostElement);\n        invocatinContext.$subscriber$ = hostElement;\n        invocatinContext.$renderCtx$ = newCtx;\n        if (justMounted) {\n            if (elCtx.$appendStyles$) {\n                for (const style of elCtx.$appendStyles$) {\n                    appendHeadStyle(staticCtx, style);\n                }\n            }\n        }\n        const processedJSXNode = processData(res.node, invocatinContext);\n        return then(processedJSXNode, (processedJSXNode) => {\n            const newVdom = wrapJSX(hostElement, processedJSXNode);\n            const oldVdom = getVdom(elCtx);\n            return then(visitJsxNode(newCtx, oldVdom, newVdom, flags), () => {\n                elCtx.$vdom$ = newVdom;\n            });\n        });\n    });\n};\nexport const getVdom = (elCtx) => {\n    if (!elCtx.$vdom$) {\n        elCtx.$vdom$ = domToVnode(elCtx.$element$);\n    }\n    return elCtx.$vdom$;\n};\nexport class ProcessedJSXNodeImpl {\n    constructor($type$, $props$, $children$, $key$) {\n        this.$type$ = $type$;\n        this.$props$ = $props$;\n        this.$children$ = $children$;\n        this.$key$ = $key$;\n        this.$elm$ = null;\n        this.$text$ = '';\n        this.$signal$ = null;\n        seal(this);\n    }\n}\nexport const processNode = (node, invocationContext) => {\n    const key = node.key != null ? String(node.key) : null;\n    const nodeType = node.type;\n    const props = node.props;\n    const originalChildren = props.children;\n    let textType = '';\n    if (isString(nodeType)) {\n        textType = nodeType;\n    }\n    else if (nodeType === Virtual) {\n        textType = VIRTUAL;\n    }\n    else if (isFunction(nodeType)) {\n        const res = invoke(invocationContext, nodeType, props, node.key);\n        if (qDev) {\n            if (isPromise(res)) {\n                logWarn('JSX components can not return a promise.', node);\n            }\n        }\n        return processData(res, invocationContext);\n    }\n    else {\n        throw qError(QError_invalidJsxNodeType, nodeType);\n    }\n    let children = EMPTY_ARRAY;\n    if (originalChildren != null) {\n        return then(processData(originalChildren, invocationContext), (result) => {\n            if (result !== undefined) {\n                children = isArray(result) ? result : [result];\n            }\n            return new ProcessedJSXNodeImpl(textType, props, children, key);\n        });\n    }\n    else {\n        return new ProcessedJSXNodeImpl(textType, props, children, key);\n    }\n};\nexport const wrapJSX = (element, input) => {\n    const children = input === undefined ? EMPTY_ARRAY : isArray(input) ? input : [input];\n    const node = new ProcessedJSXNodeImpl(':virtual', {}, children, null);\n    node.$elm$ = element;\n    return node;\n};\nexport const processData = (node, invocationContext) => {\n    if (node == null || typeof node === 'boolean') {\n        return undefined;\n    }\n    if (isPrimitive(node)) {\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, EMPTY_ARRAY, null);\n        newNode.$text$ = String(node);\n        return newNode;\n    }\n    else if (isJSXNode(node)) {\n        return processNode(node, invocationContext);\n    }\n    else if (isSignal(node)) {\n        const value = node.value;\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, EMPTY_ARRAY, null);\n        newNode.$text$ = jsxToString(value);\n        newNode.$signal$ = node;\n        return newNode;\n    }\n    else if (isArray(node)) {\n        const output = promiseAll(node.flatMap((n) => processData(n, invocationContext)));\n        return then(output, (array) => array.flat(100).filter(isNotNullable));\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, invocationContext));\n    }\n    else if (node === SkipRender) {\n        return new ProcessedJSXNodeImpl(SKIP_RENDER_TYPE, EMPTY_OBJ, EMPTY_ARRAY, null);\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return undefined;\n    }\n};\nexport const isProcessedJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof ProcessedJSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === ProcessedJSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"ProcessedJSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof ProcessedJSXNodeImpl;\n    }\n};\nexport const isPrimitive = (obj) => {\n    return isString(obj) || typeof obj === 'number';\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertNumber, assertTrue } from '../error/assert';\nimport { qError, QError_immutableProps } from '../error/error';\nimport { isQrl } from '../qrl/qrl-class';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { isNode } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { RenderEvent } from '../util/markers';\nimport { isArray, isObject, isSerializableObject } from '../util/types';\nimport { shouldSerialize, unwrapProxy, verifySerializable, } from './common';\nimport { isSignal } from './signal';\nimport { QObjectFlagsSymbol, QObjectImmutable, QObjectManagerSymbol, QObjectRecursive, QOjectTargetSymbol, _IMMUTABLE, _IMMUTABLE_PREFIX, } from './constants';\n/**\n * Creates a proxy that notifies of any writes.\n */\nexport const getOrCreateProxy = (target, containerState, flags = 0) => {\n    const proxy = containerState.$proxyMap$.get(target);\n    if (proxy) {\n        return proxy;\n    }\n    if (flags !== 0) {\n        target[QObjectFlagsSymbol] = flags;\n    }\n    return createProxy(target, containerState, undefined);\n};\nexport const createProxy = (target, containerState, subs) => {\n    assertEqual(unwrapProxy(target), target, 'Unexpected proxy at this location', target);\n    assertTrue(!containerState.$proxyMap$.has(target), 'Proxy was already created', target);\n    assertTrue(isObject(target), 'Target must be an object');\n    assertTrue(isSerializableObject(target) || isArray(target), 'Target must be a serializable object');\n    const manager = containerState.$subsManager$.$createManager$(subs);\n    const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager));\n    containerState.$proxyMap$.set(target, proxy);\n    return proxy;\n};\nclass ReadWriteProxyHandler {\n    constructor($containerState$, $manager$) {\n        this.$containerState$ = $containerState$;\n        this.$manager$ = $manager$;\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === QOjectTargetSymbol)\n                return target;\n            if (prop === QObjectManagerSymbol)\n                return this.$manager$;\n            return target[prop];\n        }\n        let subscriber;\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const invokeCtx = tryGetInvokeContext();\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const immutable = (flags & QObjectImmutable) !== 0;\n        let value = target[prop];\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (immutable) {\n            const hiddenSignal = target[_IMMUTABLE_PREFIX + prop];\n            if (!(prop in target) || !!hiddenSignal || !!target[_IMMUTABLE]?.[prop]) {\n                subscriber = null;\n            }\n            if (hiddenSignal) {\n                assertTrue(isSignal(hiddenSignal), '$$ prop must be a signal');\n                value = hiddenSignal.value;\n            }\n        }\n        if (subscriber) {\n            const isA = isArray(target);\n            this.$manager$.$addSub$([0, subscriber, isA ? undefined : prop]);\n        }\n        return recursive ? wrap(value, this.$containerState$) : value;\n    }\n    set(target, prop, newValue) {\n        if (typeof prop === 'symbol') {\n            target[prop] = newValue;\n            return true;\n        }\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const immutable = (flags & QObjectImmutable) !== 0;\n        if (immutable) {\n            throw qError(QError_immutableProps);\n        }\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const unwrappedNewValue = recursive ? unwrapProxy(newValue) : newValue;\n        if (qDev) {\n            verifySerializable(unwrappedNewValue);\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx && invokeCtx.$event$ === RenderEvent) {\n                logWarn('State mutation inside render function. Move mutation to useWatch(), useClientEffect() or useServerMount()', invokeCtx.$hostElement$, prop);\n            }\n        }\n        const isA = isArray(target);\n        if (isA) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$();\n            return true;\n        }\n        const oldValue = target[prop];\n        if (oldValue !== unwrappedNewValue) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$(prop);\n        }\n        return true;\n    }\n    has(target, property) {\n        if (property === QOjectTargetSymbol)\n            return true;\n        const hasOwnProperty = Object.prototype.hasOwnProperty;\n        if (hasOwnProperty.call(target, property)) {\n            return true;\n        }\n        if (typeof property === 'string' && hasOwnProperty.call(target, _IMMUTABLE_PREFIX + property)) {\n            return true;\n        }\n        return false;\n    }\n    ownKeys(target) {\n        let subscriber = null;\n        const invokeCtx = tryGetInvokeContext();\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (subscriber) {\n            this.$manager$.$addSub$([0, subscriber, undefined]);\n        }\n        if (isArray(target)) {\n            return Reflect.ownKeys(target);\n        }\n        return Reflect.ownKeys(target).map((a) => {\n            return typeof a === 'string' && a.startsWith(_IMMUTABLE_PREFIX)\n                ? a.slice(_IMMUTABLE_PREFIX.length)\n                : a;\n        });\n    }\n    getOwnPropertyDescriptor(target, prop) {\n        if (isArray(target)) {\n            return Object.getOwnPropertyDescriptor(target, prop);\n        }\n        return {\n            enumerable: true,\n            configurable: true,\n        };\n    }\n}\nconst wrap = (value, containerState) => {\n    if (isQrl(value)) {\n        return value;\n    }\n    if (isObject(value)) {\n        if (Object.isFrozen(value)) {\n            return value;\n        }\n        const nakedValue = unwrapProxy(value);\n        if (nakedValue !== value) {\n            // already a proxy return;\n            return value;\n        }\n        if (isNode(nakedValue)) {\n            return value;\n        }\n        if (!shouldSerialize(nakedValue)) {\n            return value;\n        }\n        if (qDev) {\n            verifySerializable(value);\n        }\n        const proxy = containerState.$proxyMap$.get(value);\n        return proxy ? proxy : getOrCreateProxy(value, containerState, QObjectRecursive);\n    }\n    else {\n        return value;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { ComponentStylesPrefixContent, ELEMENT_ID, OnRenderProp, QSlot, QSlotRef, QSlotS, } from '../../util/markers';\nimport { isOnProp, PREVENT_DEFAULT, setEvent } from '../../state/listeners';\nimport { isPromise, promiseAll, promiseAllLazy, then } from '../../util/promises';\nimport { assertDefined, assertEqual, assertTrue } from '../../error/assert';\nimport { logWarn } from '../../util/log';\nimport { qDev, qSerialize } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { SKIP_RENDER_TYPE } from '../jsx/jsx-runtime';\nimport { assertQrl, isQrl } from '../../qrl/qrl-class';\nimport { assertElement, assertQwikElement, isElement, isQwikElement, isText, isVirtualElement, } from '../../util/element';\nimport { getVdom, ProcessedJSXNodeImpl, renderComponent } from './render-dom';\nimport { parseClassList, pushRenderContext, serializeClass, setQId, stringifyStyle, } from '../execute-component';\nimport { addQwikEvent, setRef } from '../../container/container';\nimport { getRootNode, newVirtualElement, processVirtualNodes, queryAllVirtualByAttribute, VIRTUAL, } from './virtual-element';\nimport { appendChild, createElement, createTemplate, createTextNode, executeDOMRender, getKey, insertBefore, prepend, removeNode, setAttribute, setClasslist, setKey, setProperty, } from './operations';\nimport { QOnce } from '../jsx/utils.public';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { addSignalSub, isSignal } from '../../state/signal';\nimport { cleanupContext, getContext, HOST_FLAG_DIRTY, HOST_FLAG_NEED_ATTACH_LISTENER, tryGetContext, } from '../../state/context';\nimport { getProxyManager, getProxyTarget } from '../../state/common';\nimport { createProxy } from '../../state/store';\nimport { QObjectFlagsSymbol, QObjectImmutable, _IMMUTABLE, _IMMUTABLE_PREFIX, } from '../../state/constants';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const IS_SVG = 1 << 0;\nexport const IS_HEAD = 1 << 1;\nconst CHILDREN_PLACEHOLDER = [];\nexport const visitJsxNode = (ctx, oldVnode, newVnode, flags) => {\n    return smartUpdateChildren(ctx, oldVnode, newVnode, 'root', flags);\n};\nexport const smartUpdateChildren = (ctx, oldVnode, newVnode, mode, flags) => {\n    assertQwikElement(oldVnode.$elm$);\n    const ch = newVnode.$children$;\n    if (ch.length === 1 && ch[0].$type$ === SKIP_RENDER_TYPE) {\n        return;\n    }\n    const elm = oldVnode.$elm$;\n    const needsDOMRead = oldVnode.$children$ === CHILDREN_PLACEHOLDER;\n    if (needsDOMRead) {\n        const isHead = elm.nodeName === 'HEAD';\n        if (isHead) {\n            mode = 'head';\n            flags |= IS_HEAD;\n        }\n    }\n    const oldCh = getVnodeChildren(oldVnode, mode);\n    if (oldCh.length > 0 && ch.length > 0) {\n        return updateChildren(ctx, elm, oldCh, ch, flags);\n    }\n    else if (ch.length > 0) {\n        return addVnodes(ctx, elm, null, ch, 0, ch.length - 1, flags);\n    }\n    else if (oldCh.length > 0) {\n        return removeVnodes(ctx.$static$, oldCh, 0, oldCh.length - 1);\n    }\n};\nexport const getVnodeChildren = (vnode, mode) => {\n    const oldCh = vnode.$children$;\n    const elm = vnode.$elm$;\n    if (oldCh === CHILDREN_PLACEHOLDER) {\n        return (vnode.$children$ = getChildrenVnodes(elm, mode));\n    }\n    return oldCh;\n};\nexport const updateChildren = (ctx, parentElm, oldCh, newCh, flags) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx;\n    let idxInOld;\n    let elmToMove;\n    const results = [];\n    const staticCtx = ctx.$static$;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newStartVnode)) {\n            results.push(patchVnode(ctx, oldStartVnode, newStartVnode, flags));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (sameVnode(oldEndVnode, newEndVnode)) {\n            results.push(patchVnode(ctx, oldEndVnode, newEndVnode, flags));\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newEndVnode)) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved right\n            results.push(patchVnode(ctx, oldStartVnode, newEndVnode, flags));\n            insertBefore(staticCtx, parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldEndVnode, newStartVnode)) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved left\n            results.push(patchVnode(ctx, oldEndVnode, newStartVnode, flags));\n            insertBefore(staticCtx, parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.$key$];\n            if (idxInOld === undefined) {\n                // New element\n                const newElm = createElm(ctx, newStartVnode, flags, results);\n                insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n            }\n            else {\n                elmToMove = oldCh[idxInOld];\n                if (!isTagName(elmToMove, newStartVnode.$type$)) {\n                    const newElm = createElm(ctx, newStartVnode, flags, results);\n                    then(newElm, (newElm) => {\n                        insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n                    });\n                }\n                else {\n                    results.push(patchVnode(ctx, elmToMove, newStartVnode, flags));\n                    oldCh[idxInOld] = undefined;\n                    assertDefined(elmToMove.$elm$, 'elmToMove $elm$ must be defined');\n                    insertBefore(staticCtx, parentElm, elmToMove.$elm$, oldStartVnode.$elm$);\n                }\n            }\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n    if (newStartIdx <= newEndIdx) {\n        const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$;\n        results.push(addVnodes(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, flags));\n    }\n    let wait = promiseAll(results);\n    if (oldStartIdx <= oldEndIdx) {\n        wait = then(wait, () => {\n            removeVnodes(staticCtx, oldCh, oldStartIdx, oldEndIdx);\n        });\n    }\n    return wait;\n};\nconst getCh = (elm, filter) => {\n    const end = isVirtualElement(elm) ? elm.close : null;\n    const nodes = [];\n    let node = elm.firstChild;\n    while ((node = processVirtualNodes(node))) {\n        if (filter(node)) {\n            nodes.push(node);\n        }\n        node = node.nextSibling;\n        if (node === end) {\n            break;\n        }\n    }\n    return nodes;\n};\nexport const getChildren = (elm, mode) => {\n    // console.warn('DOM READ: getChildren()', elm);\n    switch (mode) {\n        case 'root':\n            return getCh(elm, isChildComponent);\n        case 'head':\n            return getCh(elm, isHeadChildren);\n        case 'elements':\n            return getCh(elm, isQwikElement);\n    }\n};\nexport const getChildrenVnodes = (elm, mode) => {\n    return getChildren(elm, mode).map(getVnodeFromEl);\n};\nexport const getVnodeFromEl = (el) => {\n    if (isElement(el)) {\n        return tryGetContext(el)?.$vdom$ ?? domToVnode(el);\n    }\n    return domToVnode(el);\n};\nexport const domToVnode = (node) => {\n    if (isQwikElement(node)) {\n        const props = isVirtualElement(node) ? EMPTY_OBJ : getProps(node);\n        const t = new ProcessedJSXNodeImpl(node.localName, props, CHILDREN_PLACEHOLDER, getKey(node));\n        t.$elm$ = node;\n        return t;\n    }\n    else if (isText(node)) {\n        const t = new ProcessedJSXNodeImpl(node.nodeName, {}, CHILDREN_PLACEHOLDER, null);\n        t.$text$ = node.data;\n        t.$elm$ = node;\n        return t;\n    }\n    throw new Error('invalid node');\n};\nexport const getProps = (node) => {\n    const props = {};\n    const attributes = node.attributes;\n    const len = attributes.length;\n    for (let i = 0; i < len; i++) {\n        const attr = attributes.item(i);\n        assertDefined(attr, 'attribute must be defined');\n        const name = attr.name;\n        if (!name.includes(':')) {\n            if (name === 'class') {\n                props[name] = parseDomClass(attr.value);\n            }\n            else {\n                props[name] = attr.value;\n            }\n        }\n    }\n    return props;\n};\nconst parseDomClass = (value) => {\n    return parseClassList(value)\n        .filter((c) => !c.startsWith(ComponentStylesPrefixContent))\n        .join(' ');\n};\nexport const isNode = (elm) => {\n    const type = elm.nodeType;\n    return type === 1 || type === 3 || type === 111;\n};\nconst isHeadChildren = (node) => {\n    const type = node.nodeType;\n    if (type === 1) {\n        return node.hasAttribute('q:head');\n    }\n    return type === 111;\n};\nexport const isSlotTemplate = (node) => {\n    return node.nodeName === 'Q:TEMPLATE';\n};\nconst isChildComponent = (node) => {\n    const type = node.nodeType;\n    if (type === 3 || type === 111) {\n        return true;\n    }\n    if (type !== 1) {\n        return false;\n    }\n    const nodeName = node.nodeName;\n    if (nodeName === 'Q:TEMPLATE') {\n        return false;\n    }\n    if (nodeName === 'HEAD') {\n        return node.hasAttribute('q:head');\n    }\n    return true;\n};\nexport const splitChildren = (input) => {\n    const output = {};\n    for (const item of input) {\n        const key = getSlotName(item);\n        const node = output[key] ??\n            (output[key] = new ProcessedJSXNodeImpl(VIRTUAL, {\n                [QSlotS]: '',\n            }, [], key));\n        node.$children$.push(item);\n    }\n    return output;\n};\nexport const patchVnode = (rCtx, oldVnode, newVnode, flags) => {\n    assertEqual(oldVnode.$type$, newVnode.$type$, 'old and new vnodes type must be the same');\n    const elm = oldVnode.$elm$;\n    const tag = newVnode.$type$;\n    const staticCtx = rCtx.$static$;\n    const isVirtual = tag === VIRTUAL;\n    const currentComponent = rCtx.$cmpCtx$;\n    assertDefined(elm, 'while patching element must be defined');\n    assertDefined(currentComponent, 'while patching current component must be defined');\n    newVnode.$elm$ = elm;\n    // Render text nodes\n    if (tag === '#text') {\n        const signal = newVnode.$signal$;\n        if (signal) {\n            addSignalSub(2, currentComponent.$element$, signal, elm, 'data');\n        }\n        if (oldVnode.$text$ !== newVnode.$text$) {\n            setProperty(staticCtx, elm, 'data', newVnode.$text$);\n        }\n        return;\n    }\n    assertQwikElement(elm);\n    // Track SVG state\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const props = newVnode.$props$;\n    const isComponent = isVirtual && OnRenderProp in props;\n    const elCtx = getContext(elm);\n    assertDefined(currentComponent, 'slots can not be rendered outside a component', elm);\n    if (!isComponent) {\n        const pendingListeners = currentComponent.li;\n        const listeners = elCtx.li;\n        listeners.length = 0;\n        newVnode.$props$ = updateProperties(staticCtx, elCtx, currentComponent.$element$, oldVnode.$props$, props, isSvg);\n        if (pendingListeners.length > 0) {\n            listeners.push(...pendingListeners);\n            pendingListeners.length = 0;\n        }\n        if (isSvg && newVnode.$type$ === 'foreignObject') {\n            flags &= ~IS_SVG;\n            isSvg = false;\n        }\n        const isSlot = isVirtual && QSlotS in props;\n        if (isSlot) {\n            assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n            currentComponent.$slots$.push(newVnode);\n            return;\n        }\n        const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n        if (setsInnerHTML) {\n            if (qDev && newVnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return;\n        }\n        const isRenderOnce = isVirtual && QOnce in props;\n        if (isRenderOnce) {\n            return;\n        }\n        return smartUpdateChildren(rCtx, oldVnode, newVnode, 'root', flags);\n    }\n    const cmpProps = props.props;\n    let needsRender = setComponentProps(elCtx, rCtx, cmpProps);\n    // TODO: review this corner case\n    if (!needsRender && !elCtx.$componentQrl$ && !elCtx.$element$.hasAttribute(ELEMENT_ID)) {\n        setQId(rCtx, elCtx);\n        elCtx.$componentQrl$ = cmpProps[OnRenderProp];\n        assertQrl(elCtx.$componentQrl$);\n        needsRender = true;\n    }\n    // Rendering of children of component is more complicated,\n    // since the children must be projected into the rendered slots\n    // In addition, nested childen might need rerendering, if that's the case\n    // we need to render the nested component, and wait before projecting the content\n    // since otherwise we don't know where the slots\n    if (needsRender) {\n        return then(renderComponent(rCtx, elCtx, flags), () => renderContentProjection(rCtx, elCtx, newVnode, flags));\n    }\n    return renderContentProjection(rCtx, elCtx, newVnode, flags);\n};\nconst renderContentProjection = (rCtx, hostCtx, vnode, flags) => {\n    const newChildren = vnode.$children$;\n    const staticCtx = rCtx.$static$;\n    const splittedNewChidren = splitChildren(newChildren);\n    const slotRctx = pushRenderContext(rCtx, hostCtx);\n    const slotMaps = getSlotMap(hostCtx);\n    // Remove content from empty slots\n    for (const key of Object.keys(slotMaps.slots)) {\n        if (!splittedNewChidren[key]) {\n            const slotEl = slotMaps.slots[key];\n            const oldCh = getChildrenVnodes(slotEl, 'root');\n            if (oldCh.length > 0) {\n                const slotCtx = tryGetContext(slotEl);\n                if (slotCtx && slotCtx.$vdom$) {\n                    slotCtx.$vdom$.$children$ = [];\n                }\n                removeVnodes(staticCtx, oldCh, 0, oldCh.length - 1);\n            }\n        }\n    }\n    // Remove empty templates\n    for (const key of Object.keys(slotMaps.templates)) {\n        const templateEl = slotMaps.templates[key];\n        if (templateEl) {\n            if (!splittedNewChidren[key] || slotMaps.slots[key]) {\n                removeNode(staticCtx, templateEl);\n                slotMaps.templates[key] = undefined;\n            }\n        }\n    }\n    // Render into slots\n    return promiseAll(Object.keys(splittedNewChidren).map((key) => {\n        const newVdom = splittedNewChidren[key];\n        const slotElm = getSlotElement(staticCtx, slotMaps, hostCtx.$element$, key);\n        const slotCtx = getContext(slotElm);\n        const oldVdom = getVdom(slotCtx);\n        slotCtx.$vdom$ = newVdom;\n        newVdom.$elm$ = slotElm;\n        return smartUpdateChildren(slotRctx, oldVdom, newVdom, 'root', flags);\n    }));\n};\nconst addVnodes = (ctx, parentElm, before, vnodes, startIdx, endIdx, flags) => {\n    const promises = [];\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx];\n        assertDefined(ch, 'render: node must be defined at index', startIdx, vnodes);\n        const elm = createElm(ctx, ch, flags, promises);\n        insertBefore(ctx.$static$, parentElm, elm, before);\n    }\n    return promiseAllLazy(promises);\n};\nconst removeVnodes = (ctx, nodes, startIdx, endIdx) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = nodes[startIdx];\n        if (ch) {\n            assertDefined(ch.$elm$, 'vnode elm must be defined');\n            removeNode(ctx, ch.$elm$);\n        }\n    }\n};\nconst getSlotElement = (ctx, slotMaps, parentEl, slotName) => {\n    const slotEl = slotMaps.slots[slotName];\n    if (slotEl) {\n        return slotEl;\n    }\n    const templateEl = slotMaps.templates[slotName];\n    if (templateEl) {\n        return templateEl;\n    }\n    const template = createTemplate(ctx.$doc$, slotName);\n    prepend(ctx, parentEl, template);\n    slotMaps.templates[slotName] = template;\n    return template;\n};\nconst getSlotName = (node) => {\n    return node.$props$[QSlot] ?? '';\n};\nconst createElm = (rCtx, vnode, flags, promises) => {\n    const tag = vnode.$type$;\n    const doc = rCtx.$static$.$doc$;\n    const currentComponent = rCtx.$cmpCtx$;\n    if (tag === '#text') {\n        const signal = vnode.$signal$;\n        const elm = createTextNode(doc, vnode.$text$);\n        if (signal && currentComponent) {\n            addSignalSub(2, currentComponent.$element$, signal, elm, 'data');\n        }\n        return (vnode.$elm$ = elm);\n    }\n    let elm;\n    let isHead = !!(flags & IS_HEAD);\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const isVirtual = tag === VIRTUAL;\n    const props = vnode.$props$;\n    const isComponent = OnRenderProp in props;\n    const staticCtx = rCtx.$static$;\n    if (isVirtual) {\n        elm = newVirtualElement(doc);\n    }\n    else if (tag === 'head') {\n        elm = doc.head;\n        flags |= IS_HEAD;\n        isHead = true;\n    }\n    else {\n        elm = createElement(doc, tag, isSvg);\n        flags &= ~IS_HEAD;\n    }\n    vnode.$elm$ = elm;\n    if (isSvg && tag === 'foreignObject') {\n        isSvg = false;\n        flags &= ~IS_SVG;\n    }\n    const elCtx = getContext(elm);\n    if (isComponent) {\n        setKey(elm, vnode.$key$);\n        assertTrue(isVirtual, 'component must be a virtual element');\n        const renderQRL = props[OnRenderProp];\n        assertQrl(renderQRL);\n        setComponentProps(elCtx, rCtx, props.props);\n        setQId(rCtx, elCtx);\n        // Run mount hook\n        elCtx.$componentQrl$ = renderQRL;\n        const wait = then(renderComponent(rCtx, elCtx, flags), () => {\n            let children = vnode.$children$;\n            if (children.length === 0) {\n                return;\n            }\n            if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n                children = children[0].$children$;\n            }\n            const slotRctx = pushRenderContext(rCtx, elCtx);\n            const slotMap = getSlotMap(elCtx);\n            const p = [];\n            for (const node of children) {\n                const nodeElm = createElm(slotRctx, node, flags, p);\n                assertDefined(node.$elm$, 'vnode elm must be defined');\n                assertEqual(nodeElm, node.$elm$, 'vnode elm must be defined');\n                appendChild(staticCtx, getSlotElement(staticCtx, slotMap, elm, getSlotName(node)), nodeElm);\n            }\n            return promiseAllLazy(p);\n        });\n        if (isPromise(wait)) {\n            promises.push(wait);\n        }\n        return elm;\n    }\n    const isSlot = isVirtual && QSlotS in props;\n    const hasRef = !isVirtual && 'ref' in props;\n    const listeners = elCtx.li;\n    vnode.$props$ = setProperties(staticCtx, elCtx, currentComponent?.$element$, props, isSvg);\n    if (currentComponent && !isVirtual) {\n        const scopedIds = currentComponent.$scopeIds$;\n        if (scopedIds) {\n            scopedIds.forEach((styleId) => {\n                elm.classList.add(styleId);\n            });\n        }\n        if (currentComponent.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n            listeners.push(...currentComponent.li);\n            currentComponent.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n        }\n    }\n    if (isSlot) {\n        assertDefined(currentComponent, 'slot can only be used inside component');\n        assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n        setKey(elm, vnode.$key$);\n        directSetAttribute(elm, QSlotRef, currentComponent.$id$);\n        currentComponent.$slots$.push(vnode);\n        staticCtx.$addSlots$.push([elm, currentComponent.$element$]);\n    }\n    if (qSerialize) {\n        setKey(elm, vnode.$key$);\n        if (isHead && !isVirtual) {\n            directSetAttribute(elm, 'q:head', '');\n        }\n        if (listeners.length > 0 || hasRef) {\n            setQId(rCtx, elCtx);\n        }\n    }\n    const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n    if (setsInnerHTML) {\n        if (qDev && vnode.$children$.length > 0) {\n            logWarn('Node can not have children when innerHTML is set');\n        }\n        return elm;\n    }\n    let children = vnode.$children$;\n    if (children.length === 0) {\n        return elm;\n    }\n    if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n        children = children[0].$children$;\n    }\n    const nodes = children.map((ch) => createElm(rCtx, ch, flags, promises));\n    for (const node of nodes) {\n        directAppendChild(elm, node);\n    }\n    return elm;\n};\nconst getSlots = (elCtx) => {\n    const slots = elCtx.$slots$;\n    if (!slots) {\n        const parent = elCtx.$element$.parentElement;\n        assertDefined(parent, 'component should be already attached to the dom');\n        return (elCtx.$slots$ = readDOMSlots(elCtx));\n    }\n    return slots;\n};\nconst getSlotMap = (elCtx) => {\n    const slotsArray = getSlots(elCtx);\n    const slots = {};\n    const templates = {};\n    const t = Array.from(elCtx.$element$.childNodes).filter(isSlotTemplate);\n    // Map virtual slots\n    for (const vnode of slotsArray) {\n        assertQwikElement(vnode.$elm$);\n        slots[vnode.$key$ ?? ''] = vnode.$elm$;\n    }\n    // Map templates\n    for (const elm of t) {\n        templates[directGetAttribute(elm, QSlot) ?? ''] = elm;\n    }\n    return { slots, templates };\n};\nconst readDOMSlots = (elCtx) => {\n    const parent = elCtx.$element$.parentElement;\n    assertDefined(parent, 'component should be already attached to the dom');\n    return queryAllVirtualByAttribute(parent, QSlotRef, elCtx.$id$).map(domToVnode);\n};\nconst handleStyle = (ctx, elm, _, newValue) => {\n    setProperty(ctx, elm.style, 'cssText', stringifyStyle(newValue));\n    return true;\n};\nconst handleClass = (ctx, elm, _, newValue, oldValue) => {\n    assertTrue(oldValue == null || typeof oldValue === 'string', 'class oldValue must be either nullish or string', oldValue);\n    assertTrue(newValue == null || typeof newValue === 'string', 'class newValue must be either nullish or string', newValue);\n    const oldClasses = parseClassList(oldValue);\n    const newClasses = parseClassList(newValue);\n    setClasslist(ctx, elm, oldClasses.filter((c) => c && !newClasses.includes(c)), newClasses.filter((c) => c && !oldClasses.includes(c)));\n    return true;\n};\nconst checkBeforeAssign = (ctx, elm, prop, newValue) => {\n    if (prop in elm) {\n        if (elm[prop] !== newValue) {\n            setProperty(ctx, elm, prop, newValue);\n        }\n    }\n    return true;\n};\nconst forceAttribute = (ctx, elm, prop, newValue) => {\n    setAttribute(ctx, elm, prop.toLowerCase(), newValue);\n    return true;\n};\nconst dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\nconst setInnerHTML = (ctx, elm, _, newValue) => {\n    if (dangerouslySetInnerHTML in elm) {\n        setProperty(ctx, elm, dangerouslySetInnerHTML, newValue);\n    }\n    else if ('innerHTML' in elm) {\n        setProperty(ctx, elm, 'innerHTML', newValue);\n    }\n    return true;\n};\nconst noop = () => {\n    return true;\n};\nexport const PROP_HANDLER_MAP = {\n    style: handleStyle,\n    class: handleClass,\n    value: checkBeforeAssign,\n    checked: checkBeforeAssign,\n    href: forceAttribute,\n    list: forceAttribute,\n    form: forceAttribute,\n    tabIndex: forceAttribute,\n    download: forceAttribute,\n    [dangerouslySetInnerHTML]: setInnerHTML,\n    innerHTML: noop,\n};\nexport const updateProperties = (staticCtx, elCtx, hostElm, oldProps, newProps, isSvg) => {\n    const keys = getKeys(oldProps, newProps);\n    const values = {};\n    if (keys.length === 0) {\n        return values;\n    }\n    const immutableMeta = newProps[_IMMUTABLE] ?? EMPTY_OBJ;\n    const elm = elCtx.$element$;\n    for (let prop of keys) {\n        if (prop === 'ref') {\n            assertElement(elm);\n            setRef(newProps[prop], elm);\n            continue;\n        }\n        let newValue = isSignal(immutableMeta[prop]) ? immutableMeta[prop] : newProps[prop];\n        if (isOnProp(prop)) {\n            browserSetEvent(staticCtx, elCtx, prop, newValue);\n            continue;\n        }\n        if (prop === 'className') {\n            prop = 'class';\n        }\n        if (isSignal(newValue)) {\n            addSignalSub(1, hostElm, newValue, elm, prop);\n            newValue = newValue.value;\n        }\n        if (prop === 'class') {\n            newProps['class'] = newValue = serializeClass(newValue);\n        }\n        const normalizedProp = isSvg ? prop : prop.toLowerCase();\n        const oldValue = oldProps[normalizedProp];\n        values[normalizedProp] = newValue;\n        if (oldValue === newValue) {\n            continue;\n        }\n        smartSetProperty(staticCtx, elm, prop, newValue, oldValue, isSvg);\n    }\n    return values;\n};\nexport const smartSetProperty = (staticCtx, elm, prop, newValue, oldValue, isSvg) => {\n    // Check if its an exception\n    const exception = PROP_HANDLER_MAP[prop];\n    if (exception) {\n        if (exception(staticCtx, elm, prop, newValue, oldValue)) {\n            return;\n        }\n    }\n    // Check if property in prototype\n    if (!isSvg && prop in elm) {\n        setProperty(staticCtx, elm, prop, newValue);\n        return;\n    }\n    if (prop.startsWith(PREVENT_DEFAULT)) {\n        addQwikEvent(prop.slice(PREVENT_DEFAULT.length), staticCtx.$containerState$);\n    }\n    // Fallback to render attribute\n    setAttribute(staticCtx, elm, prop, newValue);\n};\nconst getKeys = (oldProps, newProps) => {\n    const keys = Object.keys(newProps);\n    const normalizedKeys = keys.map((s) => s.toLowerCase());\n    const oldKeys = Object.keys(oldProps);\n    keys.push(...oldKeys.filter((p) => !normalizedKeys.includes(p)));\n    return keys.filter((c) => c !== 'children');\n};\nexport const areExactQRLs = (oldValue, newValue) => {\n    if (!isQrl(oldValue) || !isQrl(newValue) || oldValue.$hash$ !== newValue.$hash$) {\n        return false;\n    }\n    const cA = oldValue.$captureRef$;\n    const cB = newValue.$captureRef$;\n    if (cA && cB) {\n        return sameArrays(cA, cB);\n    }\n    return false;\n};\nexport const sameArrays = (a1, a2) => {\n    const len = a1.length;\n    if (len !== a2.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (a1[i] !== a2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const setProperties = (staticCtx, elCtx, hostElm, newProps, isSvg) => {\n    const elm = elCtx.$element$;\n    const keys = Object.keys(newProps);\n    const values = {};\n    if (keys.length === 0) {\n        return values;\n    }\n    const immutableMeta = newProps[_IMMUTABLE] ?? EMPTY_OBJ;\n    for (let prop of keys) {\n        if (prop === 'children') {\n            continue;\n        }\n        if (prop === 'ref') {\n            assertElement(elm);\n            setRef(newProps[prop], elm);\n            continue;\n        }\n        let newValue = isSignal(immutableMeta[prop]) ? immutableMeta[prop] : newProps[prop];\n        if (isOnProp(prop)) {\n            browserSetEvent(staticCtx, elCtx, prop, newValue);\n            continue;\n        }\n        if (prop === 'className') {\n            prop = 'class';\n        }\n        if (hostElm && isSignal(newValue)) {\n            addSignalSub(1, hostElm, newValue, elm, prop);\n            newValue = newValue.value;\n        }\n        if (prop === 'class') {\n            newValue = serializeClass(newValue);\n        }\n        const normalizedProp = isSvg ? prop : prop.toLowerCase();\n        values[normalizedProp] = newValue;\n        smartSetProperty(staticCtx, elm, prop, newValue, undefined, isSvg);\n    }\n    return values;\n};\nexport const setComponentProps = (elCtx, rCtx, expectProps) => {\n    const keys = Object.keys(expectProps);\n    let props = elCtx.$props$;\n    if (!props) {\n        elCtx.$props$ = props = createProxy({\n            [QObjectFlagsSymbol]: QObjectImmutable,\n        }, rCtx.$static$.$containerState$);\n    }\n    if (keys.length === 0) {\n        return false;\n    }\n    const manager = getProxyManager(props);\n    assertDefined(manager, `props have to be a proxy, but it is not`, props);\n    const target = getProxyTarget(props);\n    assertDefined(target, `props have to be a proxy, but it is not`, props);\n    const immutableMeta = (target[_IMMUTABLE] =\n        expectProps[_IMMUTABLE] ?? EMPTY_OBJ);\n    for (const prop of keys) {\n        if (prop === 'children' || prop === QSlot) {\n            continue;\n        }\n        if (isSignal(immutableMeta[prop])) {\n            target[_IMMUTABLE_PREFIX + prop] = immutableMeta[prop];\n        }\n        else {\n            const value = expectProps[prop];\n            const oldValue = target[prop];\n            target[prop] = value;\n            if (oldValue !== value) {\n                manager.$notifySubs$(prop);\n            }\n        }\n    }\n    return !!(elCtx.$flags$ & HOST_FLAG_DIRTY);\n};\nexport const cleanupTree = (parent, staticCtx, subsManager, stopSlots) => {\n    if (stopSlots && parent.hasAttribute(QSlotS)) {\n        staticCtx.$rmSlots$.push(parent);\n        return;\n    }\n    const ctx = tryGetContext(parent);\n    if (ctx) {\n        cleanupContext(ctx, subsManager);\n    }\n    const ch = getChildren(parent, 'elements');\n    for (const child of ch) {\n        cleanupTree(child, staticCtx, subsManager, true);\n    }\n};\nexport const executeContextWithSlots = ({ $static$: ctx }) => {\n    executeDOMRender(ctx);\n};\nexport const directAppendChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.appendTo(parent);\n    }\n    else {\n        parent.appendChild(child);\n    }\n};\nexport const directRemoveChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.remove();\n    }\n    else {\n        parent.removeChild(child);\n    }\n};\nexport const directInsertBefore = (parent, child, ref) => {\n    if (isVirtualElement(child)) {\n        child.insertBeforeTo(parent, getRootNode(ref));\n    }\n    else {\n        parent.insertBefore(child, getRootNode(ref));\n    }\n};\nconst createKeyToOldIdx = (children, beginIdx, endIdx) => {\n    const map = {};\n    for (let i = beginIdx; i <= endIdx; ++i) {\n        const child = children[i];\n        const key = child.$key$;\n        if (key != null) {\n            map[key] = i;\n        }\n    }\n    return map;\n};\nconst browserSetEvent = (staticCtx, elCtx, prop, input) => {\n    const containerState = staticCtx.$containerState$;\n    const normalized = setEvent(elCtx.li, prop, input, containerState.$containerEl$);\n    if (!prop.startsWith('on')) {\n        setAttribute(staticCtx, elCtx.$element$, normalized, '');\n    }\n    addQwikEvent(normalized, containerState);\n};\nconst sameVnode = (vnode1, vnode2) => {\n    if (vnode1.$type$ !== vnode2.$type$) {\n        return false;\n    }\n    return vnode1.$key$ === vnode2.$key$;\n};\nconst isTagName = (elm, tagName) => {\n    return elm.$type$ === tagName;\n};\n//# sourceMappingURL=data:application/json;base64,","export const emitEvent = (el, eventName, detail, bubbles) => {\n    if (el && typeof CustomEvent === 'function') {\n        el.dispatchEvent(new CustomEvent(eventName, {\n            detail,\n            bubbles: bubbles,\n            composed: bubbles,\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBdUIsRUFDdkIsU0FBaUIsRUFDakIsTUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLEVBQUUsSUFBSSxPQUFPLFdBQVcsS0FBSyxVQUFVLEVBQUU7UUFDM0MsRUFBRSxDQUFDLGFBQWEsQ0FDZCxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDekIsTUFBTTtZQUNOLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1NBQ2xCLENBQUMsQ0FDSCxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZW1pdEV2ZW50ID0gKFxuICBlbDogRWxlbWVudCB8IHVuZGVmaW5lZCxcbiAgZXZlbnROYW1lOiBzdHJpbmcsXG4gIGRldGFpbDogYW55LFxuICBidWJibGVzOiBib29sZWFuXG4pID0+IHtcbiAgaWYgKGVsICYmIHR5cGVvZiBDdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIGRldGFpbCxcbiAgICAgICAgYnViYmxlczogYnViYmxlcyxcbiAgICAgICAgY29tcG9zZWQ6IGJ1YmJsZXMsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG4iXX0=","export const hashCode = (text, hash = 0) => {\n    if (text.length === 0)\n        return hash;\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaGFzaF9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLENBQUMsRUFBRSxFQUFFO0lBQ3pELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0tBQ3ZDO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaGFzaENvZGUgPSAodGV4dDogc3RyaW5nLCBoYXNoOiBudW1iZXIgPSAwKSA9PiB7XG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNociA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hyO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cbiAgcmV0dXJuIE51bWJlcihNYXRoLmFicyhoYXNoKSkudG9TdHJpbmcoMzYpO1xufTtcbiJdfQ==","import { ComponentStylesPrefixContent } from '../util/markers';\nimport { hashCode } from '../util/hash_code';\nimport { assertQrl } from '../qrl/qrl-class';\nexport const styleKey = (qStyles, index) => {\n    assertQrl(qStyles);\n    return `${hashCode(qStyles.$hash$)}-${index}`;\n};\nexport const styleHost = (styleId) => {\n    return styleId;\n};\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\nexport const serializeSStyle = (scopeIds) => {\n    const value = scopeIds.join(' ');\n    if (value.length > 0) {\n        return value;\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zdHlsZS9xcmwtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFN0MsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBb0IsRUFBRSxLQUFhLEVBQVUsRUFBRTtJQUN0RSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkIsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDbkQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDdEQsT0FBTyw0QkFBNEIsR0FBRyxPQUFPLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsUUFBa0IsRUFBRSxFQUFFO0lBQ3BELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNwQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50U3R5bGVzUHJlZml4Q29udGVudCB9IGZyb20gJy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBoYXNoQ29kZSB9IGZyb20gJy4uL3V0aWwvaGFzaF9jb2RlJztcbmltcG9ydCB0eXBlIHsgUVJMIH0gZnJvbSAnLi4vcXJsL3FybC5wdWJsaWMnO1xuaW1wb3J0IHsgYXNzZXJ0UXJsIH0gZnJvbSAnLi4vcXJsL3FybC1jbGFzcyc7XG5cbmV4cG9ydCBjb25zdCBzdHlsZUtleSA9IChxU3R5bGVzOiBRUkw8c3RyaW5nPiwgaW5kZXg6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIGFzc2VydFFybChxU3R5bGVzKTtcbiAgcmV0dXJuIGAke2hhc2hDb2RlKHFTdHlsZXMuJGhhc2gkKX0tJHtpbmRleH1gO1xufTtcblxuZXhwb3J0IGNvbnN0IHN0eWxlSG9zdCA9IChzdHlsZUlkOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gc3R5bGVJZDtcbn07XG5cbmV4cG9ydCBjb25zdCBzdHlsZUNvbnRlbnQgPSAoc3R5bGVJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgKyBzdHlsZUlkO1xufTtcblxuZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZVNTdHlsZSA9IChzY29wZUlkczogc3RyaW5nW10pID0+IHtcbiAgY29uc3QgdmFsdWUgPSBzY29wZUlkcy5qb2luKCcgJyk7XG4gIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuIl19","import { assertDefined, assertEqual, assertTrue } from '../error/assert';\nimport { getDocument } from '../util/dom';\nimport { isComment, isDocument, isElement, isNode, isQwikElement, isText, isVirtualElement, } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr, QScopedStyle } from '../util/markers';\nimport { qDev } from '../util/qdev';\nimport { destroyWatch, isResourceWatch, WatchFlagsIsDirty, } from '../use/use-watch';\nimport { qError, QError_containerAlreadyPaused, QError_missingObjectId, QError_verifySerializable, } from '../error/error';\nimport { isArray, isObject, isSerializableObject } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { isNotNullable, isPromise } from '../util/promises';\nimport { collectDeps, serializeValue, UNDEFINED_PREFIX } from './serializers';\nimport { FILTER_REJECT, FILTER_SKIP, getContainerState, intToStr, SHOW_COMMENT, SHOW_ELEMENT, } from './container';\nimport { processVirtualNodes } from '../render/dom/virtual-element';\nimport { groupListeners } from '../state/listeners';\nimport { serializeSStyle } from '../style/qrl-styles';\nimport { serializeQRLs } from '../qrl/qrl';\nimport { fastShouldSerialize, getProxyFlags, getProxyManager, getProxyTarget, isConnected, serializeSubscription, } from '../state/common';\nimport { HOST_FLAG_DYNAMIC, tryGetContext } from '../state/context';\nimport { SignalImpl } from '../state/signal';\n// <docs markdown=\"../readme.md#pauseContainer\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#pauseContainer instead)\n/**\n * Serialize the current state of the application into DOM\n *\n */\n// </docs>\nexport const pauseContainer = async (elmOrDoc, defaultParentJSON) => {\n    const doc = getDocument(elmOrDoc);\n    const documentElement = doc.documentElement;\n    const containerEl = isDocument(elmOrDoc) ? documentElement : elmOrDoc;\n    if (directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        throw qError(QError_containerAlreadyPaused);\n    }\n    const parentJSON = defaultParentJSON ?? (containerEl === doc.documentElement ? doc.body : containerEl);\n    const containerState = getContainerState(containerEl);\n    const contexts = getNodesInScope(containerEl, hasContext);\n    // Set container to paused\n    directSetAttribute(containerEl, QContainerAttr, 'paused');\n    // Update elements with context\n    for (const elCtx of contexts) {\n        const elm = elCtx.$element$;\n        const listeners = elCtx.li;\n        if (elCtx.$scopeIds$) {\n            const value = serializeSStyle(elCtx.$scopeIds$);\n            if (value) {\n                elm.setAttribute(QScopedStyle, value);\n            }\n        }\n        if (elCtx.$id$) {\n            elm.setAttribute(ELEMENT_ID, elCtx.$id$);\n        }\n        if (isElement(elm) && listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            for (const listener of groups) {\n                elm.setAttribute(listener[0], serializeQRLs(listener[1], elCtx));\n            }\n        }\n    }\n    // Serialize data\n    const data = await _pauseFromContexts(contexts, containerState, (el) => {\n        if (isNode(el) && isText(el)) {\n            return getTextID(el, containerState);\n        }\n        return null;\n    });\n    // Emit Qwik JSON\n    const qwikJson = doc.createElement('script');\n    directSetAttribute(qwikJson, 'type', 'qwik/json');\n    qwikJson.textContent = escapeText(JSON.stringify(data.state, undefined, qDev ? '  ' : undefined));\n    parentJSON.appendChild(qwikJson);\n    // Emit event registration\n    const extraListeners = Array.from(containerState.$events$, (s) => JSON.stringify(s));\n    const eventsScript = doc.createElement('script');\n    eventsScript.textContent = `window.qwikevents||=[];window.qwikevents.push(${extraListeners.join(', ')})`;\n    parentJSON.appendChild(eventsScript);\n    return data;\n};\n/**\n * @internal\n */\nexport const _pauseFromContexts = async (allContexts, containerState, fallbackGetObjId) => {\n    const collector = createCollector(containerState);\n    let hasListeners = false;\n    // TODO: optimize\n    for (const ctx of allContexts) {\n        if (ctx.$watches$) {\n            for (const watch of ctx.$watches$) {\n                if (qDev) {\n                    if (watch.$flags$ & WatchFlagsIsDirty) {\n                        logWarn('Serializing dirty watch. Looks like an internal error.');\n                    }\n                    if (!isConnected(watch)) {\n                        logWarn('Serializing disconneted watch. Looks like an internal error.');\n                    }\n                }\n                if (isResourceWatch(watch)) {\n                    collector.$resources$.push(watch.$resource$);\n                }\n                destroyWatch(watch);\n            }\n        }\n    }\n    for (const ctx of allContexts) {\n        const el = ctx.$element$;\n        const ctxListeners = ctx.li;\n        for (const listener of ctxListeners) {\n            if (isElement(el)) {\n                const qrl = listener[1];\n                const captured = qrl.$captureRef$;\n                if (captured) {\n                    for (const obj of captured) {\n                        collectValue(obj, collector, true);\n                    }\n                }\n                collector.$qrls$.push(qrl);\n                hasListeners = true;\n            }\n        }\n    }\n    // No listeners implies static page\n    if (!hasListeners) {\n        return {\n            state: {\n                ctx: {},\n                objs: [],\n                subs: [],\n            },\n            objs: [],\n            qrls: [],\n            resources: collector.$resources$,\n            mode: 'static',\n        };\n    }\n    // Wait for remaining promises\n    let promises;\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // If at this point any component can render, we need to capture Context and Props\n    const canRender = collector.$elements$.length > 0;\n    if (canRender) {\n        for (const elCtx of collector.$deferElements$) {\n            collectElementData(elCtx, collector, false);\n        }\n        for (const ctx of allContexts) {\n            collectProps(ctx, collector);\n        }\n    }\n    // Wait for remaining promises\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // Convert objSet to array\n    const elementToIndex = new Map();\n    const objs = Array.from(collector.$objSet$.keys());\n    const objToId = new Map();\n    const getElementID = (el) => {\n        let id = elementToIndex.get(el);\n        if (id === undefined) {\n            id = getQId(el);\n            if (!id) {\n                console.warn('Missing ID', el);\n            }\n            else {\n                id = ELEMENT_ID_PREFIX + id;\n            }\n            elementToIndex.set(el, id);\n        }\n        return id;\n    };\n    const getObjId = (obj) => {\n        let suffix = '';\n        if (isPromise(obj)) {\n            const { value, resolved } = getPromiseValue(obj);\n            obj = value;\n            if (resolved) {\n                suffix += '~';\n            }\n            else {\n                suffix += '_';\n            }\n        }\n        if (isObject(obj)) {\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n                obj = target;\n            }\n            else if (isQwikElement(obj)) {\n                const elID = getElementID(obj);\n                if (elID) {\n                    return elID + suffix;\n                }\n                return null;\n            }\n        }\n        const id = objToId.get(obj);\n        if (id) {\n            return id + suffix;\n        }\n        if (fallbackGetObjId) {\n            return fallbackGetObjId(obj);\n        }\n        return null;\n    };\n    const mustGetObjId = (obj) => {\n        const key = getObjId(obj);\n        if (key === null) {\n            throw qError(QError_missingObjectId, obj);\n        }\n        return key;\n    };\n    // Compute subscriptions\n    const subsMap = new Map();\n    objs.forEach((obj) => {\n        const subs = getManager(obj, containerState)?.$subs$;\n        if (!subs) {\n            return null;\n        }\n        const flags = getProxyFlags(obj) ?? 0;\n        const convered = [];\n        if (flags > 0) {\n            convered.push(flags);\n        }\n        for (const sub of subs) {\n            const host = sub[1];\n            if (sub[0] === 0 && isNode(host) && isVirtualElement(host)) {\n                if (!collector.$elements$.includes(tryGetContext(host))) {\n                    continue;\n                }\n            }\n            convered.push(sub);\n        }\n        if (convered.length > 0) {\n            subsMap.set(obj, convered);\n        }\n    });\n    // Sort objects: the ones with subscriptions go first\n    objs.sort((a, b) => {\n        const isProxyA = subsMap.has(a) ? 0 : 1;\n        const isProxyB = subsMap.has(b) ? 0 : 1;\n        return isProxyA - isProxyB;\n    });\n    // Generate object ID by using a monotonic counter\n    let count = 0;\n    for (const obj of objs) {\n        objToId.set(obj, intToStr(count));\n        count++;\n    }\n    if (collector.$noSerialize$.length > 0) {\n        const undefinedID = objToId.get(undefined);\n        assertDefined(undefinedID, 'undefined ID must be defined');\n        for (const obj of collector.$noSerialize$) {\n            objToId.set(obj, undefinedID);\n        }\n    }\n    // Serialize object subscriptions\n    const subs = [];\n    for (const obj of objs) {\n        const value = subsMap.get(obj);\n        if (value == null) {\n            break;\n        }\n        subs.push(value\n            .map((s) => {\n            if (typeof s === 'number') {\n                return `_${s}`;\n            }\n            return serializeSubscription(s, getObjId);\n        })\n            .filter(isNotNullable));\n    }\n    assertEqual(subs.length, subsMap.size, 'missing subscriptions to serialize', subs, subsMap);\n    // Serialize objects\n    const convertedObjs = objs.map((obj) => {\n        if (obj === null) {\n            return null;\n        }\n        const typeObj = typeof obj;\n        switch (typeObj) {\n            case 'undefined':\n                return UNDEFINED_PREFIX;\n            case 'number':\n                if (!Number.isFinite(obj)) {\n                    break;\n                }\n                return obj;\n            case 'string':\n            case 'boolean':\n                return obj;\n        }\n        const value = serializeValue(obj, mustGetObjId, containerState);\n        if (value !== undefined) {\n            return value;\n        }\n        if (typeObj === 'object') {\n            if (isArray(obj)) {\n                return obj.map(mustGetObjId);\n            }\n            if (isSerializableObject(obj)) {\n                const output = {};\n                for (const key of Object.keys(obj)) {\n                    output[key] = mustGetObjId(obj[key]);\n                }\n                return output;\n            }\n        }\n        throw qError(QError_verifySerializable, obj);\n    });\n    const meta = {};\n    // Write back to the dom\n    allContexts.forEach((ctx) => {\n        assertDefined(ctx, `pause: missing context for dom node`);\n        const node = ctx.$element$;\n        const ref = ctx.$refMap$;\n        const props = ctx.$props$;\n        const contexts = ctx.$contexts$;\n        const watches = ctx.$watches$;\n        const renderQrl = ctx.$componentQrl$;\n        const seq = ctx.$seq$;\n        const metaValue = {};\n        const elementCaptured = isVirtualElement(node) && collector.$elements$.includes(ctx);\n        let add = false;\n        if (ref.length > 0) {\n            const value = ref.map(mustGetObjId).join(' ');\n            if (value) {\n                metaValue.r = value;\n                add = true;\n            }\n        }\n        if (canRender) {\n            if (elementCaptured && props) {\n                metaValue.h = mustGetObjId(props) + ' ' + mustGetObjId(renderQrl);\n                add = true;\n            }\n            if (watches && watches.length > 0) {\n                const value = watches.map(getObjId).filter(isNotNullable).join(' ');\n                if (value) {\n                    metaValue.w = value;\n                    add = true;\n                }\n            }\n            if (elementCaptured && seq && seq.length > 0) {\n                const value = seq.map(mustGetObjId).join(' ');\n                metaValue.s = value;\n                add = true;\n            }\n            if (contexts) {\n                const serializedContexts = [];\n                contexts.forEach((value, key) => {\n                    const id = getObjId(value);\n                    if (id) {\n                        serializedContexts.push(`${key}=${id}`);\n                    }\n                });\n                const value = serializedContexts.join(' ');\n                if (value) {\n                    metaValue.c = value;\n                    add = true;\n                }\n            }\n        }\n        if (add) {\n            const elementID = getElementID(node);\n            assertDefined(elementID, `pause: can not generate ID for dom node`, node);\n            meta[elementID] = metaValue;\n        }\n    });\n    // Sanity check of serialized element\n    if (qDev) {\n        elementToIndex.forEach((value, el) => {\n            if (!value) {\n                logWarn('unconnected element', el.nodeName, '\\n');\n            }\n        });\n    }\n    return {\n        state: {\n            ctx: meta,\n            objs: convertedObjs,\n            subs,\n        },\n        objs,\n        resources: collector.$resources$,\n        qrls: collector.$qrls$,\n        mode: canRender ? 'render' : 'listeners',\n    };\n};\nexport const getNodesInScope = (parent, predicate) => {\n    const results = [];\n    const v = predicate(parent);\n    if (v !== undefined) {\n        results.push(v);\n    }\n    const walker = parent.ownerDocument.createTreeWalker(parent, SHOW_ELEMENT | SHOW_COMMENT, {\n        acceptNode(node) {\n            if (isContainer(node)) {\n                return FILTER_REJECT;\n            }\n            const v = predicate(node);\n            if (v !== undefined) {\n                results.push(v);\n            }\n            return FILTER_SKIP;\n        },\n    });\n    while (walker.nextNode())\n        ;\n    return results;\n};\nconst collectProps = (elCtx, collector) => {\n    const parentCtx = elCtx.$parent$;\n    if (parentCtx && elCtx.$props$ && collector.$elements$.includes(parentCtx)) {\n        const subs = getProxyManager(elCtx.$props$)?.$subs$;\n        const el = elCtx.$element$;\n        if (subs && subs.some((e) => e[0] === 0 && e[1] === el)) {\n            collectElement(el, collector);\n        }\n    }\n};\nconst createCollector = (containerState) => {\n    return {\n        $containerState$: containerState,\n        $seen$: new Set(),\n        $objSet$: new Set(),\n        $prefetch$: 0,\n        $noSerialize$: [],\n        $resources$: [],\n        $elements$: [],\n        $qrls$: [],\n        $deferElements$: [],\n        $promises$: [],\n    };\n};\nconst collectDeferElement = (el, collector) => {\n    const ctx = tryGetContext(el);\n    if (collector.$elements$.includes(ctx)) {\n        return;\n    }\n    collector.$elements$.push(ctx);\n    collector.$prefetch$++;\n    if (ctx.$flags$ & HOST_FLAG_DYNAMIC) {\n        collectElementData(ctx, collector, true);\n    }\n    else {\n        collector.$deferElements$.push(ctx);\n    }\n    collector.$prefetch$--;\n};\nconst collectElement = (el, collector) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        if (collector.$elements$.includes(ctx)) {\n            return;\n        }\n        collector.$elements$.push(ctx);\n        collectElementData(ctx, collector, false);\n    }\n};\nexport const collectElementData = (elCtx, collector, dynamic) => {\n    if (elCtx.$props$) {\n        collectValue(elCtx.$props$, collector, dynamic);\n    }\n    if (elCtx.$componentQrl$) {\n        collectValue(elCtx.$componentQrl$, collector, dynamic);\n    }\n    if (elCtx.$seq$) {\n        for (const obj of elCtx.$seq$) {\n            collectValue(obj, collector, dynamic);\n        }\n    }\n    if (elCtx.$watches$) {\n        for (const obj of elCtx.$watches$) {\n            collectValue(obj, collector, dynamic);\n        }\n    }\n    if (dynamic) {\n        let parent = elCtx;\n        while (parent) {\n            if (parent.$contexts$) {\n                for (const obj of parent.$contexts$.values()) {\n                    collectValue(obj, collector, dynamic);\n                }\n                if (parent.$contexts$.get('_') === true) {\n                    break;\n                }\n            }\n            parent = parent.$parent$;\n        }\n    }\n};\nexport const escapeText = (str) => {\n    return str.replace(/<(\\/?script)/g, '\\\\x3C$1');\n};\nexport const collectSubscriptions = (manager, collector) => {\n    if (collector.$seen$.has(manager)) {\n        return;\n    }\n    collector.$seen$.add(manager);\n    const subs = manager.$subs$;\n    assertDefined(subs, 'subs must be defined');\n    for (const key of subs) {\n        const host = key[1];\n        if (isNode(host) && isVirtualElement(host)) {\n            if (key[0] === 0) {\n                collectDeferElement(host, collector);\n            }\n        }\n        else {\n            collectValue(host, collector, true);\n        }\n    }\n};\nconst PROMISE_VALUE = Symbol();\nconst resolvePromise = (promise) => {\n    return promise.then((value) => {\n        const v = {\n            resolved: true,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    }, (value) => {\n        const v = {\n            resolved: false,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    });\n};\nconst getPromiseValue = (promise) => {\n    assertTrue(PROMISE_VALUE in promise, 'pause: promise was not resolved previously', promise);\n    return promise[PROMISE_VALUE];\n};\nexport const collectValue = (obj, collector, leaks) => {\n    if (obj !== null) {\n        const objType = typeof obj;\n        switch (objType) {\n            case 'function':\n            case 'object': {\n                const seen = collector.$seen$;\n                if (seen.has(obj)) {\n                    return;\n                }\n                seen.add(obj);\n                if (!fastShouldSerialize(obj)) {\n                    collector.$objSet$.add(undefined);\n                    collector.$noSerialize$.push(obj);\n                    return;\n                }\n                const input = obj;\n                const target = getProxyTarget(obj);\n                if (target) {\n                    obj = target;\n                    if (seen.has(obj)) {\n                        return;\n                    }\n                    seen.add(obj);\n                    if (leaks) {\n                        collectSubscriptions(getProxyManager(input), collector);\n                    }\n                }\n                const collected = collectDeps(obj, collector, leaks);\n                if (collected) {\n                    collector.$objSet$.add(obj);\n                    return;\n                }\n                if (isPromise(obj)) {\n                    collector.$promises$.push(resolvePromise(obj).then((value) => {\n                        collectValue(value, collector, leaks);\n                    }));\n                    return;\n                }\n                if (objType === 'object') {\n                    if (isNode(obj)) {\n                        return;\n                    }\n                    if (isArray(obj)) {\n                        for (let i = 0; i < obj.length; i++) {\n                            collectValue(obj[i], collector, leaks);\n                        }\n                    }\n                    else if (isSerializableObject(obj)) {\n                        for (const key of Object.keys(obj)) {\n                            collectValue(obj[key], collector, leaks);\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n    collector.$objSet$.add(obj);\n};\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nconst hasContext = (el) => {\n    const node = processVirtualNodes(el);\n    if (isQwikElement(node)) {\n        const ctx = tryGetContext(node);\n        if (ctx && ctx.$id$) {\n            return ctx;\n        }\n    }\n    return undefined;\n};\nconst getManager = (obj, containerState) => {\n    if (!isObject(obj)) {\n        return undefined;\n    }\n    if (obj instanceof SignalImpl) {\n        return getProxyManager(obj);\n    }\n    const proxy = containerState.$proxyMap$.get(obj);\n    if (proxy) {\n        return getProxyManager(proxy);\n    }\n    return undefined;\n};\nconst getQId = (el) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx.$id$;\n    }\n    return null;\n};\nconst getTextID = (node, containerState) => {\n    const prev = node.previousSibling;\n    if (prev && isComment(prev)) {\n        if (prev.data.startsWith('t=')) {\n            return ELEMENT_ID_PREFIX + prev.data.slice(2);\n        }\n    }\n    const doc = node.ownerDocument;\n    const id = intToStr(containerState.$elementIndex$++);\n    const open = doc.createComment(`t=${id}`);\n    const close = doc.createComment('');\n    const parent = node.parentElement;\n    parent.insertBefore(open, node);\n    parent.insertBefore(close, node.nextSibling);\n    return ELEMENT_ID_PREFIX + id;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertTrue } from '../error/assert';\nimport { getDocument } from '../util/dom';\nimport { assertElement, assertQwikElement, isComment, isElement, isText } from '../util/element';\nimport { logDebug, logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr, QScopedStyle, QStyle, } from '../util/markers';\nimport { emitEvent } from '../util/event';\nimport { isArray, isSerializableObject, isString } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { createParser, OBJECT_TRANSFORMS, UNDEFINED_PREFIX } from './serializers';\nimport { FILTER_ACCEPT, FILTER_REJECT, FILTER_SKIP, getContainerState, isContainer, SHOW_COMMENT, SHOW_ELEMENT, strToInt, } from './container';\nimport { findClose, VirtualElementImpl } from '../render/dom/virtual-element';\nimport { getDomListeners } from '../state/listeners';\nimport { domToVnode } from '../render/dom/visitor';\nimport { parseSubscription } from '../state/common';\nimport { createProxy } from '../state/store';\nimport { qSerialize } from '../util/qdev';\nimport { pauseContainer } from './pause';\nimport { getContext, HOST_FLAG_MOUNTED } from '../state/context';\nimport { QObjectFlagsSymbol } from '../state/constants';\nexport const resumeIfNeeded = (containerEl) => {\n    const isResumed = directGetAttribute(containerEl, QContainerAttr);\n    if (isResumed === 'paused') {\n        resumeContainer(containerEl);\n        if (qSerialize) {\n            appendQwikDevTools(containerEl);\n        }\n    }\n};\nexport const resumeContainer = (containerEl) => {\n    if (!isContainer(containerEl)) {\n        logWarn('Skipping hydration because parent element is not q:container');\n        return;\n    }\n    let maxId = 0;\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON);\n    if (!script) {\n        logWarn('Skipping hydration qwik/json metadata was not found.');\n        return;\n    }\n    script.remove();\n    const containerState = getContainerState(containerEl);\n    moveStyles(containerEl, containerState);\n    const meta = JSON.parse(unescapeText(script.textContent || '{}'));\n    // Collect all elements\n    const elements = new Map();\n    const getObject = (id) => {\n        return getObjectImpl(id, elements, meta.objs, containerState);\n    };\n    const elementWalker = doc.createTreeWalker(containerEl, SHOW_COMMENT | SHOW_ELEMENT, {\n        acceptNode(node) {\n            if (isComment(node)) {\n                const data = node.data;\n                if (data.startsWith('qv ')) {\n                    const close = findClose(node);\n                    const virtual = new VirtualElementImpl(node, close);\n                    const id = directGetAttribute(virtual, ELEMENT_ID);\n                    if (id) {\n                        const elCtx = getContext(virtual);\n                        elCtx.$id$ = id;\n                        elements.set(ELEMENT_ID_PREFIX + id, virtual);\n                        maxId = Math.max(maxId, strToInt(id));\n                    }\n                }\n                else if (data.startsWith('t=')) {\n                    const id = data.slice(2);\n                    elements.set(ELEMENT_ID_PREFIX + data.slice(2), getTextNode(node));\n                    maxId = Math.max(maxId, strToInt(id));\n                }\n                return FILTER_SKIP;\n            }\n            if (isContainer(node)) {\n                return FILTER_REJECT;\n            }\n            return node.hasAttribute(ELEMENT_ID) ? FILTER_ACCEPT : FILTER_SKIP;\n        },\n    });\n    let el = null;\n    while ((el = elementWalker.nextNode())) {\n        assertElement(el);\n        const id = directGetAttribute(el, ELEMENT_ID);\n        assertDefined(id, `resume: element missed q:id`, el);\n        const elCtx = getContext(el);\n        elCtx.$id$ = id;\n        elCtx.$vdom$ = domToVnode(el);\n        elements.set(ELEMENT_ID_PREFIX + id, el);\n        maxId = Math.max(maxId, strToInt(id));\n    }\n    containerState.$elementIndex$ = ++maxId;\n    const parser = createParser(getObject, containerState, doc);\n    // Revive proxies with subscriptions into the proxymap\n    reviveValues(meta.objs, parser);\n    reviveSubscriptions(meta.objs, meta.subs, getObject, containerState, parser);\n    // Rebuild target objects\n    for (const obj of meta.objs) {\n        reviveNestedObjects(obj, getObject, parser);\n    }\n    for (const elementID of Object.keys(meta.ctx)) {\n        assertTrue(elementID.startsWith('#'), 'elementId must start with #');\n        const ctxMeta = meta.ctx[elementID];\n        const el = elements.get(elementID);\n        assertDefined(el, `resume: cant find dom node for id`, elementID);\n        assertQwikElement(el);\n        const elCtx = getContext(el);\n        const refMap = ctxMeta.r;\n        const seq = ctxMeta.s;\n        const host = ctxMeta.h;\n        const contexts = ctxMeta.c;\n        const watches = ctxMeta.w;\n        if (refMap) {\n            assertTrue(isElement(el), 'el must be an actual DOM element');\n            elCtx.$refMap$ = refMap.split(' ').map(getObject);\n            elCtx.li = getDomListeners(elCtx, containerEl);\n        }\n        if (seq) {\n            elCtx.$seq$ = seq.split(' ').map(getObject);\n        }\n        if (watches) {\n            elCtx.$watches$ = watches.split(' ').map(getObject);\n        }\n        if (contexts) {\n            elCtx.$contexts$ = new Map();\n            for (const part of contexts.split(' ')) {\n                const [key, value] = part.split('=');\n                elCtx.$contexts$.set(key, getObject(value));\n            }\n        }\n        // Restore sequence scoping\n        if (host) {\n            const [props, renderQrl] = host.split(' ');\n            const styleIds = el.getAttribute(QScopedStyle);\n            assertDefined(props, `resume: props missing in host metadata`, host);\n            assertDefined(renderQrl, `resume: renderQRL missing in host metadata`, host);\n            elCtx.$scopeIds$ = styleIds ? styleIds.split(' ') : null;\n            elCtx.$flags$ = HOST_FLAG_MOUNTED;\n            elCtx.$props$ = getObject(props);\n            elCtx.$componentQrl$ = getObject(renderQrl);\n        }\n    }\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    logDebug('Container resumed');\n    emitEvent(containerEl, 'qresume', undefined, true);\n};\nconst reviveValues = (objs, parser) => {\n    for (let i = 0; i < objs.length; i++) {\n        const value = objs[i];\n        if (isString(value)) {\n            objs[i] = value === UNDEFINED_PREFIX ? undefined : parser.prepare(value);\n        }\n    }\n};\nconst reviveSubscriptions = (objs, objsSubs, getObject, containerState, parser) => {\n    for (let i = 0; i < objsSubs.length; i++) {\n        const value = objs[i];\n        const subs = objsSubs[i];\n        if (subs) {\n            const converted = [];\n            let flag = 0;\n            for (const sub of subs) {\n                if (sub.startsWith('_')) {\n                    flag = parseInt(sub.slice(1), 10);\n                }\n                else {\n                    converted.push(parseSubscription(sub, getObject));\n                }\n            }\n            if (flag > 0) {\n                value[QObjectFlagsSymbol] = flag;\n            }\n            if (!parser.subs(value, converted)) {\n                createProxy(value, containerState, converted);\n            }\n        }\n    }\n};\nconst reviveNestedObjects = (obj, getObject, parser) => {\n    if (parser.fill(obj)) {\n        return;\n    }\n    if (obj && typeof obj == 'object') {\n        if (isArray(obj)) {\n            for (let i = 0; i < obj.length; i++) {\n                obj[i] = getObject(obj[i]);\n            }\n        }\n        else if (isSerializableObject(obj)) {\n            for (const key of Object.keys(obj)) {\n                obj[key] = getObject(obj[key]);\n            }\n        }\n    }\n};\nconst getObjectImpl = (id, elements, objs, containerState) => {\n    assertTrue(typeof id === 'string' && id.length > 0, 'resume: id must be an non-empty string, got:', id);\n    if (id.startsWith(ELEMENT_ID_PREFIX)) {\n        assertTrue(elements.has(id), `missing element for id:`, id);\n        return elements.get(id);\n    }\n    const index = strToInt(id);\n    assertTrue(objs.length > index, 'resume: index is out of bounds', id);\n    let obj = objs[index];\n    for (let i = id.length - 1; i >= 0; i--) {\n        const code = id[i];\n        const transform = OBJECT_TRANSFORMS[code];\n        if (!transform) {\n            break;\n        }\n        obj = transform(obj, containerState);\n    }\n    return obj;\n};\nexport const moveStyles = (containerEl, containerState) => {\n    const head = containerEl.ownerDocument.head;\n    containerEl.querySelectorAll('style[q\\\\:style]').forEach((el) => {\n        containerState.$styleIds$.add(directGetAttribute(el, QStyle));\n        head.appendChild(el);\n    });\n};\nexport const unescapeText = (str) => {\n    return str.replace(/\\\\x3C(\\/?script)/g, '<$1');\n};\nexport const getQwikJSON = (parentElm) => {\n    let child = parentElm.lastElementChild;\n    while (child) {\n        if (child.tagName === 'SCRIPT' && directGetAttribute(child, 'type') === 'qwik/json') {\n            return child;\n        }\n        child = child.previousElementSibling;\n    }\n    return undefined;\n};\nconst getTextNode = (mark) => {\n    const nextNode = mark.nextSibling;\n    if (isText(nextNode)) {\n        return nextNode;\n    }\n    else {\n        const textNode = mark.ownerDocument.createTextNode('');\n        mark.parentElement.insertBefore(textNode, mark);\n        return textNode;\n    }\n};\nexport const appendQwikDevTools = (containerEl) => {\n    containerEl['qwik'] = {\n        pause: () => pauseContainer(containerEl),\n        state: getContainerState(containerEl),\n    };\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../error/assert';\nimport { inflateQrl, parseQRL } from '../qrl/qrl';\nimport { getWrappingContainer, getInvokeContext } from './use-core';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { getContext } from '../state/context';\nimport { resumeIfNeeded } from '../container/resume';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexically scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @internal\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    let qrl = context.$qrl$;\n    if (!qrl) {\n        const el = context.$element$;\n        assertDefined(el, 'invoke: element must be defined inside useLexicalScope()', context);\n        const container = getWrappingContainer(el);\n        const elCtx = getContext(el);\n        assertDefined(container, `invoke: cant find parent q:container of`, el);\n        qrl = parseQRL(decodeURIComponent(String(context.$url$)), container);\n        assertQrl(qrl);\n        resumeIfNeeded(container);\n        inflateQrl(qrl, elCtx);\n    }\n    else {\n        assertQrl(qrl);\n        assertDefined(qrl.$captureRef$, 'invoke: qrl $captureRef$ must be defined inside useLexicalScope()', qrl);\n    }\n    return qrl.$captureRef$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRCxpREFBaUQ7QUFDakQseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qzs7Ozs7Ozs7O0dBU0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQTZCLEVBQUU7SUFDNUQsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDUixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQzdCLGFBQWEsQ0FBQyxFQUFFLEVBQUUsMERBQTBELEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkYsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLGFBQWEsQ0FBQyxTQUFTLEVBQUUseUNBQXlDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDckUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDeEI7U0FBTTtRQUNMLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLGFBQWEsQ0FDWCxHQUFHLENBQUMsWUFBWSxFQUNoQixtRUFBbUUsRUFDbkUsR0FBRyxDQUNKLENBQUM7S0FDSDtJQUNELE9BQU8sR0FBRyxDQUFDLFlBQW9CLENBQUM7QUFDbEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCB9IGZyb20gJy4uL2Vycm9yL2Fzc2VydCc7XG5pbXBvcnQgeyBpbmZsYXRlUXJsLCBwYXJzZVFSTCB9IGZyb20gJy4uL3FybC9xcmwnO1xuaW1wb3J0IHsgZ2V0V3JhcHBpbmdDb250YWluZXIsIGdldEludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gJy4uL3N0YXRlL2NvbnRleHQnO1xuaW1wb3J0IHsgcmVzdW1lSWZOZWVkZWQgfSBmcm9tICcuLi9jb250YWluZXIvcmVzdW1lJztcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlTGV4aWNhbFNjb3BlXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZUxleGljYWxTY29wZSBpbnN0ZWFkKVxuLyoqXG4gKiBVc2VkIGJ5IHRoZSBRd2lrIE9wdGltaXplciB0byByZXN0b3JlIHRoZSBsZXhpY2FsbHkgc2NvcGVkIHZhcmlhYmxlcy5cbiAqXG4gKiBUaGlzIG1ldGhvZCBzaG91bGQgbm90IGJlIHByZXNlbnQgaW4gdGhlIGFwcGxpY2F0aW9uIHNvdXJjZSBjb2RlLlxuICpcbiAqIE5PVEU6IGB1c2VMZXhpY2FsU2NvcGVgIG1ldGhvZCBjYW4gb25seSBiZSB1c2VkIGluIHRoZSBzeW5jaHJvbm91cyBwb3J0aW9uIG9mIHRoZSBjYWxsYmFja1xuICogKGJlZm9yZSBhbnkgYGF3YWl0YCBzdGF0ZW1lbnRzLilcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZUxleGljYWxTY29wZSA9IDxWQVJTIGV4dGVuZHMgYW55W10+KCk6IFZBUlMgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gZ2V0SW52b2tlQ29udGV4dCgpO1xuICBsZXQgcXJsID0gY29udGV4dC4kcXJsJDtcbiAgaWYgKCFxcmwpIHtcbiAgICBjb25zdCBlbCA9IGNvbnRleHQuJGVsZW1lbnQkO1xuICAgIGFzc2VydERlZmluZWQoZWwsICdpbnZva2U6IGVsZW1lbnQgbXVzdCBiZSBkZWZpbmVkIGluc2lkZSB1c2VMZXhpY2FsU2NvcGUoKScsIGNvbnRleHQpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGdldFdyYXBwaW5nQ29udGFpbmVyKGVsKTtcbiAgICBjb25zdCBlbEN0eCA9IGdldENvbnRleHQoZWwpO1xuICAgIGFzc2VydERlZmluZWQoY29udGFpbmVyLCBgaW52b2tlOiBjYW50IGZpbmQgcGFyZW50IHE6Y29udGFpbmVyIG9mYCwgZWwpO1xuICAgIHFybCA9IHBhcnNlUVJMKGRlY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29udGV4dC4kdXJsJCkpLCBjb250YWluZXIpO1xuICAgIGFzc2VydFFybChxcmwpO1xuICAgIHJlc3VtZUlmTmVlZGVkKGNvbnRhaW5lcik7XG4gICAgaW5mbGF0ZVFybChxcmwsIGVsQ3R4KTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRRcmwocXJsKTtcbiAgICBhc3NlcnREZWZpbmVkKFxuICAgICAgcXJsLiRjYXB0dXJlUmVmJCxcbiAgICAgICdpbnZva2U6IHFybCAkY2FwdHVyZVJlZiQgbXVzdCBiZSBkZWZpbmVkIGluc2lkZSB1c2VMZXhpY2FsU2NvcGUoKScsXG4gICAgICBxcmxcbiAgICApO1xuICB9XG4gIHJldHVybiBxcmwuJGNhcHR1cmVSZWYkIGFzIFZBUlM7XG59O1xuIl19","import { tryGetContext } from '../../state/context';\nimport { jsxToString } from '../execute-component';\nimport { setProperty } from './operations';\nimport { smartSetProperty, SVG_NS } from './visitor';\nexport const executeSignalOperation = (staticCtx, operation) => {\n    const prop = operation[5] ?? 'value';\n    const value = operation[2][prop];\n    switch (operation[0]) {\n        case 1: {\n            const prop = operation[4];\n            const elm = operation[3];\n            const ctx = tryGetContext(elm);\n            const isSVG = elm.namespaceURI === SVG_NS;\n            let oldValue = undefined;\n            if (ctx && ctx.$vdom$) {\n                const normalizedProp = isSVG ? prop : prop.toLowerCase();\n                oldValue = ctx.$vdom$.$props$[normalizedProp];\n                ctx.$vdom$.$props$[normalizedProp] = value;\n            }\n            return smartSetProperty(staticCtx, elm, prop, value, oldValue, isSVG);\n        }\n        case 2:\n            return setProperty(staticCtx, operation[3], 'data', jsxToString(value));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL3NpZ25hbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFckQsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsQ0FDcEMsU0FBOEIsRUFDOUIsU0FBMkIsRUFDM0IsRUFBRTtJQUNGLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUM7SUFDckMsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLFFBQVEsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3BCLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDTixNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsWUFBWSxLQUFLLE1BQU0sQ0FBQztZQUMxQyxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7WUFDekIsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtnQkFDckIsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDekQsUUFBUSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDNUM7WUFDRCxPQUFPLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdkU7UUFDRCxLQUFLLENBQUM7WUFDSixPQUFPLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUMzRTtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgU3Vic2NyaWJlclNpZ25hbCB9IGZyb20gJy4uLy4uL3N0YXRlL2NvbW1vbic7XG5pbXBvcnQgeyB0cnlHZXRDb250ZXh0IH0gZnJvbSAnLi4vLi4vc3RhdGUvY29udGV4dCc7XG5pbXBvcnQgeyBqc3hUb1N0cmluZyB9IGZyb20gJy4uL2V4ZWN1dGUtY29tcG9uZW50JztcbmltcG9ydCB0eXBlIHsgUmVuZGVyU3RhdGljQ29udGV4dCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNldFByb3BlcnR5IH0gZnJvbSAnLi9vcGVyYXRpb25zJztcbmltcG9ydCB7IHNtYXJ0U2V0UHJvcGVydHksIFNWR19OUyB9IGZyb20gJy4vdmlzaXRvcic7XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlU2lnbmFsT3BlcmF0aW9uID0gKFxuICBzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsXG4gIG9wZXJhdGlvbjogU3Vic2NyaWJlclNpZ25hbFxuKSA9PiB7XG4gIGNvbnN0IHByb3AgPSBvcGVyYXRpb25bNV0gPz8gJ3ZhbHVlJztcbiAgY29uc3QgdmFsdWUgPSBvcGVyYXRpb25bMl1bcHJvcF07XG4gIHN3aXRjaCAob3BlcmF0aW9uWzBdKSB7XG4gICAgY2FzZSAxOiB7XG4gICAgICBjb25zdCBwcm9wID0gb3BlcmF0aW9uWzRdO1xuICAgICAgY29uc3QgZWxtID0gb3BlcmF0aW9uWzNdO1xuICAgICAgY29uc3QgY3R4ID0gdHJ5R2V0Q29udGV4dChlbG0pO1xuICAgICAgY29uc3QgaXNTVkcgPSBlbG0ubmFtZXNwYWNlVVJJID09PSBTVkdfTlM7XG4gICAgICBsZXQgb2xkVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAoY3R4ICYmIGN0eC4kdmRvbSQpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFByb3AgPSBpc1NWRyA/IHByb3AgOiBwcm9wLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIG9sZFZhbHVlID0gY3R4LiR2ZG9tJC4kcHJvcHMkW25vcm1hbGl6ZWRQcm9wXTtcbiAgICAgICAgY3R4LiR2ZG9tJC4kcHJvcHMkW25vcm1hbGl6ZWRQcm9wXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNtYXJ0U2V0UHJvcGVydHkoc3RhdGljQ3R4LCBlbG0sIHByb3AsIHZhbHVlLCBvbGRWYWx1ZSwgaXNTVkcpO1xuICAgIH1cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gc2V0UHJvcGVydHkoc3RhdGljQ3R4LCBvcGVyYXRpb25bM10sICdkYXRhJywganN4VG9TdHJpbmcodmFsdWUpKTtcbiAgfVxufTtcbiJdfQ==","import { assertDefined, assertTrue } from '../../error/assert';\nimport { executeContextWithSlots, IS_HEAD, IS_SVG, SVG_NS } from './visitor';\nimport { getDocument } from '../../util/dom';\nimport { logError, logWarn } from '../../util/log';\nimport { getWrappingContainer } from '../../use/use-core';\nimport { runSubscriber, WatchFlagsIsDirty, WatchFlagsIsEffect, WatchFlagsIsResource, WatchFlagsIsWatch, } from '../../use/use-watch';\nimport { then } from '../../util/promises';\nimport { useLexicalScope } from '../../use/use-lexical-scope.public';\nimport { renderComponent } from './render-dom';\nimport { getContainerState } from '../../container/container';\nimport { createRenderContext } from '../execute-component';\nimport { getRootNode } from './virtual-element';\nimport { printRenderStats } from './operations';\nimport { executeSignalOperation } from './signals';\nimport { getPlatform, isServer } from '../../platform/platform';\nimport { qDev } from '../../util/qdev';\nimport { isQwikElement } from '../../util/element';\nimport { resumeIfNeeded } from '../../container/resume';\nimport { getContext, HOST_FLAG_DIRTY } from '../../state/context';\nexport const notifyChange = (subAction, containerState) => {\n    if (subAction[0] === 0) {\n        const host = subAction[1];\n        if (isQwikElement(host)) {\n            notifyRender(host, containerState);\n        }\n        else {\n            notifyWatch(host, containerState);\n        }\n    }\n    else {\n        notifySignalOperation(subAction, containerState);\n    }\n};\n/**\n * Mark component for rendering.\n *\n * Use `notifyRender` method to mark a component for rendering at some later point in time.\n * This method uses `getPlatform(doc).queueRender` for scheduling of the rendering. The\n * default implementation of the method is to use `requestAnimationFrame` to do actual rendering.\n *\n * The method is intended to coalesce multiple calls into `notifyRender` into a single call for\n * rendering.\n *\n * @param hostElement - Host-element of the component to re-render.\n * @returns A promise which is resolved when the component has been rendered.\n *\n */\nconst notifyRender = (hostElement, containerState) => {\n    const server = isServer();\n    if (!server) {\n        resumeIfNeeded(containerState.$containerEl$);\n    }\n    const elCtx = getContext(hostElement);\n    assertDefined(elCtx.$componentQrl$, `render: notified host element must have a defined $renderQrl$`, elCtx);\n    if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n        return;\n    }\n    elCtx.$flags$ |= HOST_FLAG_DIRTY;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$hostsStaging$.add(hostElement);\n    }\n    else {\n        if (server) {\n            logWarn('Can not rerender in server platform');\n            return undefined;\n        }\n        containerState.$hostsNext$.add(hostElement);\n        scheduleFrame(containerState);\n    }\n};\nconst notifySignalOperation = (op, containerState) => {\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$opsNext$.add(op);\n    }\n    else {\n        containerState.$opsNext$.add(op);\n        scheduleFrame(containerState);\n    }\n};\nexport const notifyWatch = (watch, containerState) => {\n    if (watch.$flags$ & WatchFlagsIsDirty) {\n        return;\n    }\n    watch.$flags$ |= WatchFlagsIsDirty;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$watchStaging$.add(watch);\n    }\n    else {\n        containerState.$watchNext$.add(watch);\n        scheduleFrame(containerState);\n    }\n};\nconst scheduleFrame = (containerState) => {\n    if (containerState.$renderPromise$ === undefined) {\n        containerState.$renderPromise$ = getPlatform().nextTick(() => renderMarked(containerState));\n    }\n    return containerState.$renderPromise$;\n};\n/**\n * Low-level API used by the Optimizer to process `useWatch$()` API. This method\n * is not intended to be used by developers.\n *\n * @internal\n *\n */\nexport const _hW = () => {\n    const [watch] = useLexicalScope();\n    notifyWatch(watch, getContainerState(getWrappingContainer(watch.$el$)));\n};\nconst renderMarked = async (containerState) => {\n    const doc = getDocument(containerState.$containerEl$);\n    try {\n        const ctx = createRenderContext(doc, containerState);\n        const staticCtx = ctx.$static$;\n        const hostsRendering = (containerState.$hostsRendering$ = new Set(containerState.$hostsNext$));\n        containerState.$hostsNext$.clear();\n        await executeWatchesBefore(containerState);\n        containerState.$hostsStaging$.forEach((host) => {\n            hostsRendering.add(host);\n        });\n        containerState.$hostsStaging$.clear();\n        const renderingQueue = Array.from(hostsRendering);\n        sortNodes(renderingQueue);\n        for (const el of renderingQueue) {\n            if (!staticCtx.$hostElements$.has(el)) {\n                const elCtx = getContext(el);\n                if (elCtx.$componentQrl$) {\n                    assertTrue(el.isConnected, 'element must be connected to the dom');\n                    staticCtx.$roots$.push(elCtx);\n                    try {\n                        await renderComponent(ctx, elCtx, getFlags(el.parentElement));\n                    }\n                    catch (err) {\n                        if (qDev) {\n                            throw err;\n                        }\n                    }\n                }\n            }\n        }\n        containerState.$opsNext$.forEach((op) => executeSignalOperation(staticCtx, op));\n        containerState.$opsNext$.clear();\n        // Add post operations\n        staticCtx.$operations$.push(...staticCtx.$postOperations$);\n        // Early exist, no dom operations\n        if (staticCtx.$operations$.length === 0) {\n            printRenderStats(staticCtx);\n            await postRendering(containerState, staticCtx);\n            return;\n        }\n        await getPlatform().raf(() => {\n            executeContextWithSlots(ctx);\n            printRenderStats(staticCtx);\n            return postRendering(containerState, staticCtx);\n        });\n    }\n    catch (err) {\n        logError(err);\n    }\n};\nconst getFlags = (el) => {\n    let flags = 0;\n    if (el) {\n        if (el.namespaceURI === SVG_NS) {\n            flags |= IS_SVG;\n        }\n        if (el.tagName === 'HEAD') {\n            flags |= IS_HEAD;\n        }\n    }\n    return flags;\n};\nexport const postRendering = async (containerState, ctx) => {\n    await executeWatchesAfter(containerState, (watch, stage) => {\n        if ((watch.$flags$ & WatchFlagsIsEffect) === 0) {\n            return false;\n        }\n        if (stage) {\n            return ctx.$hostElements$.has(watch.$el$);\n        }\n        return true;\n    });\n    // Clear staging\n    containerState.$hostsStaging$.forEach((el) => {\n        containerState.$hostsNext$.add(el);\n    });\n    containerState.$hostsStaging$.clear();\n    containerState.$hostsRendering$ = undefined;\n    containerState.$renderPromise$ = undefined;\n    const pending = containerState.$hostsNext$.size +\n        containerState.$watchNext$.size +\n        containerState.$opsNext$.size;\n    if (pending > 0) {\n        scheduleFrame(containerState);\n    }\n};\nconst executeWatchesBefore = async (containerState) => {\n    const containerEl = containerState.$containerEl$;\n    const resourcesPromises = [];\n    const watchPromises = [];\n    const isWatch = (watch) => (watch.$flags$ & WatchFlagsIsWatch) !== 0;\n    const isResourceWatch = (watch) => (watch.$flags$ & WatchFlagsIsResource) !== 0;\n    containerState.$watchNext$.forEach((watch) => {\n        if (isWatch(watch)) {\n            watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n        if (isResourceWatch(watch)) {\n            resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (isWatch(watch)) {\n                watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            }\n            else if (isResourceWatch(watch)) {\n                resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runSubscriber(watch, containerState);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n    if (resourcesPromises.length > 0) {\n        const resources = await Promise.all(resourcesPromises);\n        sortWatches(resources);\n        resources.forEach((watch) => runSubscriber(watch, containerState));\n    }\n};\nconst executeWatchesAfter = async (containerState, watchPred) => {\n    const watchPromises = [];\n    const containerEl = containerState.$containerEl$;\n    containerState.$watchNext$.forEach((watch) => {\n        if (watchPred(watch, false)) {\n            watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (watchPred(watch, true)) {\n                watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runSubscriber(watch, containerState);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n};\nconst sortNodes = (elements) => {\n    elements.sort((a, b) => (a.compareDocumentPosition(getRootNode(b)) & 2 ? 1 : -1));\n};\nconst sortWatches = (watches) => {\n    watches.sort((a, b) => {\n        if (a.$el$ === b.$el$) {\n            return a.$index$ < b.$index$ ? -1 : 1;\n        }\n        return (a.$el$.compareDocumentPosition(getRootNode(b.$el$)) & 2) !== 0 ? 1 : -1;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LXJlbmRlci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL25vdGlmeS1yZW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDN0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDMUQsT0FBTyxFQUNMLGFBQWEsRUFFYixpQkFBaUIsRUFDakIsa0JBQWtCLEVBQ2xCLG9CQUFvQixFQUNwQixpQkFBaUIsR0FDbEIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFL0MsT0FBTyxFQUFrQixpQkFBaUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDaEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlC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LE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QztRQUNELE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnREZWZpbmVkLCBhc3NlcnRUcnVlIH0gZnJvbSAnLi4vLi4vZXJyb3IvYXNzZXJ0JztcbmltcG9ydCB7IGV4ZWN1dGVDb250ZXh0V2l0aFNsb3RzLCBJU19IRUFELCBJU19TVkcsIFNWR19OUyB9IGZyb20gJy4vdmlzaXRvcic7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4uLy4uL3V0aWwvZG9tJztcbmltcG9ydCB7IGxvZ0Vycm9yLCBsb2dXYXJuIH0gZnJvbSAnLi4vLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgZ2V0V3JhcHBpbmdDb250YWluZXIgfSBmcm9tICcuLi8uLi91c2UvdXNlLWNvcmUnO1xuaW1wb3J0IHtcbiAgcnVuU3Vic2NyaWJlcixcbiAgU3Vic2NyaWJlckVmZmVjdCxcbiAgV2F0Y2hGbGFnc0lzRGlydHksXG4gIFdhdGNoRmxhZ3NJc0VmZmVjdCxcbiAgV2F0Y2hGbGFnc0lzUmVzb3VyY2UsXG4gIFdhdGNoRmxhZ3NJc1dhdGNoLFxufSBmcm9tICcuLi8uLi91c2UvdXNlLXdhdGNoJztcbmltcG9ydCB7IHRoZW4gfSBmcm9tICcuLi8uLi91dGlsL3Byb21pc2VzJztcbmltcG9ydCB0eXBlIHsgVmFsdWVPclByb21pc2UgfSBmcm9tICcuLi8uLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IHVzZUxleGljYWxTY29wZSB9IGZyb20gJy4uLy4uL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMnO1xuaW1wb3J0IHsgcmVuZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9yZW5kZXItZG9tJztcbmltcG9ydCB0eXBlIHsgUmVuZGVyU3RhdGljQ29udGV4dCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IENvbnRhaW5lclN0YXRlLCBnZXRDb250YWluZXJTdGF0ZSB9IGZyb20gJy4uLy4uL2NvbnRhaW5lci9jb250YWluZXInO1xuaW1wb3J0IHsgY3JlYXRlUmVuZGVyQ29udGV4dCB9IGZyb20gJy4uL2V4ZWN1dGUtY29tcG9uZW50JztcbmltcG9ydCB7IGdldFJvb3ROb2RlLCBRd2lrRWxlbWVudCB9IGZyb20gJy4vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IHByaW50UmVuZGVyU3RhdHMgfSBmcm9tICcuL29wZXJhdGlvbnMnO1xuaW1wb3J0IHsgZXhlY3V0ZVNpZ25hbE9wZXJhdGlvbiB9IGZyb20gJy4vc2lnbmFscyc7XG5pbXBvcnQgeyBnZXRQbGF0Zm9ybSwgaXNTZXJ2ZXIgfSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vLi4vdXRpbC9xZGV2JztcbmltcG9ydCB7IGlzUXdpa0VsZW1lbnQgfSBmcm9tICcuLi8uLi91dGlsL2VsZW1lbnQnO1xuaW1wb3J0IHR5cGUgeyBTdWJzY3JpYmVyU2lnbmFsLCBTdWJzY3JpcHRpb25zIH0gZnJvbSAnLi4vLi4vc3RhdGUvY29tbW9uJztcbmltcG9ydCB7IHJlc3VtZUlmTmVlZGVkIH0gZnJvbSAnLi4vLi4vY29udGFpbmVyL3Jlc3VtZSc7XG5pbXBvcnQgeyBnZXRDb250ZXh0LCBIT1NUX0ZMQUdfRElSVFkgfSBmcm9tICcuLi8uLi9zdGF0ZS9jb250ZXh0JztcblxuZXhwb3J0IGNvbnN0IG5vdGlmeUNoYW5nZSA9IChzdWJBY3Rpb246IFN1YnNjcmlwdGlvbnMsIGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSkgPT4ge1xuICBpZiAoc3ViQWN0aW9uWzBdID09PSAwKSB7XG4gICAgY29uc3QgaG9zdCA9IHN1YkFjdGlvblsxXTtcbiAgICBpZiAoaXNRd2lrRWxlbWVudChob3N0KSkge1xuICAgICAgbm90aWZ5UmVuZGVyKGhvc3QsIGNvbnRhaW5lclN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm90aWZ5V2F0Y2goaG9zdCwgY29udGFpbmVyU3RhdGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBub3RpZnlTaWduYWxPcGVyYXRpb24oc3ViQWN0aW9uLCBjb250YWluZXJTdGF0ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogTWFyayBjb21wb25lbnQgZm9yIHJlbmRlcmluZy5cbiAqXG4gKiBVc2UgYG5vdGlmeVJlbmRlcmAgbWV0aG9kIHRvIG1hcmsgYSBjb21wb25lbnQgZm9yIHJlbmRlcmluZyBhdCBzb21lIGxhdGVyIHBvaW50IGluIHRpbWUuXG4gKiBUaGlzIG1ldGhvZCB1c2VzIGBnZXRQbGF0Zm9ybShkb2MpLnF1ZXVlUmVuZGVyYCBmb3Igc2NoZWR1bGluZyBvZiB0aGUgcmVuZGVyaW5nLiBUaGVcbiAqIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIG1ldGhvZCBpcyB0byB1c2UgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgdG8gZG8gYWN0dWFsIHJlbmRlcmluZy5cbiAqXG4gKiBUaGUgbWV0aG9kIGlzIGludGVuZGVkIHRvIGNvYWxlc2NlIG11bHRpcGxlIGNhbGxzIGludG8gYG5vdGlmeVJlbmRlcmAgaW50byBhIHNpbmdsZSBjYWxsIGZvclxuICogcmVuZGVyaW5nLlxuICpcbiAqIEBwYXJhbSBob3N0RWxlbWVudCAtIEhvc3QtZWxlbWVudCBvZiB0aGUgY29tcG9uZW50IHRvIHJlLXJlbmRlci5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gcmVuZGVyZWQuXG4gKlxuICovXG5jb25zdCBub3RpZnlSZW5kZXIgPSAoaG9zdEVsZW1lbnQ6IFF3aWtFbGVtZW50LCBjb250YWluZXJTdGF0ZTogQ29udGFpbmVyU3RhdGUpOiB2b2lkID0+IHtcbiAgY29uc3Qgc2VydmVyID0gaXNTZXJ2ZXIoKTtcbiAgaWYgKCFzZXJ2ZXIpIHtcbiAgICByZXN1bWVJZk5lZWRlZChjb250YWluZXJTdGF0ZS4kY29udGFpbmVyRWwkKTtcbiAgfVxuXG4gIGNvbnN0IGVsQ3R4ID0gZ2V0Q29udGV4dChob3N0RWxlbWVudCk7XG4gIGFzc2VydERlZmluZWQoXG4gICAgZWxDdHguJGNvbXBvbmVudFFybCQsXG4gICAgYHJlbmRlcjogbm90aWZpZWQgaG9zdCBlbGVtZW50IG11c3QgaGF2ZSBhIGRlZmluZWQgJHJlbmRlclFybCRgLFxuICAgIGVsQ3R4XG4gICk7XG4gIGlmIChlbEN0eC4kZmxhZ3MkICYgSE9TVF9GTEFHX0RJUlRZKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsQ3R4LiRmbGFncyQgfD0gSE9TVF9GTEFHX0RJUlRZO1xuICBjb25zdCBhY3RpdmVSZW5kZXJpbmcgPSBjb250YWluZXJTdGF0ZS4kaG9zdHNSZW5kZXJpbmckICE9PSB1bmRlZmluZWQ7XG4gIGlmIChhY3RpdmVSZW5kZXJpbmcpIHtcbiAgICBhc3NlcnREZWZpbmVkKFxuICAgICAgY29udGFpbmVyU3RhdGUuJHJlbmRlclByb21pc2UkLFxuICAgICAgJ3JlbmRlcjogd2hpbGUgcmVuZGVyaW5nLCAkcmVuZGVyUHJvbWlzZSQgbXVzdCBiZSBkZWZpbmVkJyxcbiAgICAgIGNvbnRhaW5lclN0YXRlXG4gICAgKTtcbiAgICBjb250YWluZXJTdGF0ZS4kaG9zdHNTdGFnaW5nJC5hZGQoaG9zdEVsZW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzZXJ2ZXIpIHtcbiAgICAgIGxvZ1dhcm4oJ0NhbiBub3QgcmVyZW5kZXIgaW4gc2VydmVyIHBsYXRmb3JtJyk7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb250YWluZXJTdGF0ZS4kaG9zdHNOZXh0JC5hZGQoaG9zdEVsZW1lbnQpO1xuICAgIHNjaGVkdWxlRnJhbWUoY29udGFpbmVyU3RhdGUpO1xuICB9XG59O1xuXG5jb25zdCBub3RpZnlTaWduYWxPcGVyYXRpb24gPSAob3A6IFN1YnNjcmliZXJTaWduYWwsIGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSk6IHZvaWQgPT4ge1xuICBjb25zdCBhY3RpdmVSZW5kZXJpbmcgPSBjb250YWluZXJTdGF0ZS4kaG9zdHNSZW5kZXJpbmckICE9PSB1bmRlZmluZWQ7XG4gIGlmIChhY3RpdmVSZW5kZXJpbmcpIHtcbiAgICBhc3NlcnREZWZpbmVkKFxuICAgICAgY29udGFpbmVyU3RhdGUuJHJlbmRlclByb21pc2UkLFxuICAgICAgJ3JlbmRlcjogd2hpbGUgcmVuZGVyaW5nLCAkcmVuZGVyUHJvbWlzZSQgbXVzdCBiZSBkZWZpbmVkJyxcbiAgICAgIGNvbnRhaW5lclN0YXRlXG4gICAgKTtcbiAgICBjb250YWluZXJTdGF0ZS4kb3BzTmV4dCQuYWRkKG9wKTtcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXJTdGF0ZS4kb3BzTmV4dCQuYWRkKG9wKTtcbiAgICBzY2hlZHVsZUZyYW1lKGNvbnRhaW5lclN0YXRlKTtcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBub3RpZnlXYXRjaCA9ICh3YXRjaDogU3Vic2NyaWJlckVmZmVjdCwgY29udGFpbmVyU3RhdGU6IENvbnRhaW5lclN0YXRlKSA9PiB7XG4gIGlmICh3YXRjaC4kZmxhZ3MkICYgV2F0Y2hGbGFnc0lzRGlydHkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgd2F0Y2guJGZsYWdzJCB8PSBXYXRjaEZsYWdzSXNEaXJ0eTtcblxuICBjb25zdCBhY3RpdmVSZW5kZXJpbmcgPSBjb250YWluZXJTdGF0ZS4kaG9zdHNSZW5kZXJpbmckICE9PSB1bmRlZmluZWQ7XG4gIGlmIChhY3RpdmVSZW5kZXJpbmcpIHtcbiAgICBhc3NlcnREZWZpbmVkKFxuICAgICAgY29udGFpbmVyU3RhdGUuJHJlbmRlclByb21pc2UkLFxuICAgICAgJ3JlbmRlcjogd2hpbGUgcmVuZGVyaW5nLCAkcmVuZGVyUHJvbWlzZSQgbXVzdCBiZSBkZWZpbmVkJyxcbiAgICAgIGNvbnRhaW5lclN0YXRlXG4gICAgKTtcbiAgICBjb250YWluZXJTdGF0ZS4kd2F0Y2hTdGFnaW5nJC5hZGQod2F0Y2gpO1xuICB9IGVsc2Uge1xuICAgIGNvbnRhaW5lclN0YXRlLiR3YXRjaE5leHQkLmFkZCh3YXRjaCk7XG4gICAgc2NoZWR1bGVGcmFtZShjb250YWluZXJTdGF0ZSk7XG4gIH1cbn07XG5cbmNvbnN0IHNjaGVkdWxlRnJhbWUgPSAoY29udGFpbmVyU3RhdGU6IENvbnRhaW5lclN0YXRlKTogUHJvbWlzZTxSZW5kZXJTdGF0aWNDb250ZXh0PiA9PiB7XG4gIGlmIChjb250YWluZXJTdGF0ZS4kcmVuZGVyUHJvbWlzZSQgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnRhaW5lclN0YXRlLiRyZW5kZXJQcm9taXNlJCA9IGdldFBsYXRmb3JtKCkubmV4dFRpY2soKCkgPT4gcmVuZGVyTWFya2VkKGNvbnRhaW5lclN0YXRlKSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRhaW5lclN0YXRlLiRyZW5kZXJQcm9taXNlJDtcbn07XG5cbi8qKlxuICogTG93LWxldmVsIEFQSSB1c2VkIGJ5IHRoZSBPcHRpbWl6ZXIgdG8gcHJvY2VzcyBgdXNlV2F0Y2gkKClgIEFQSS4gVGhpcyBtZXRob2RcbiAqIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGJ5IGRldmVsb3BlcnMuXG4gKlxuICogQGludGVybmFsXG4gKlxuICovXG5leHBvcnQgY29uc3QgX2hXID0gKCkgPT4ge1xuICBjb25zdCBbd2F0Y2hdID0gdXNlTGV4aWNhbFNjb3BlPFtTdWJzY3JpYmVyRWZmZWN0XT4oKTtcbiAgbm90aWZ5V2F0Y2god2F0Y2gsIGdldENvbnRhaW5lclN0YXRlKGdldFdyYXBwaW5nQ29udGFpbmVyKHdhdGNoLiRlbCQpISkpO1xufTtcblxuY29uc3QgcmVuZGVyTWFya2VkID0gYXN5bmMgKGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBkb2MgPSBnZXREb2N1bWVudChjb250YWluZXJTdGF0ZS4kY29udGFpbmVyRWwkKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBjdHggPSBjcmVhdGVSZW5kZXJDb250ZXh0KGRvYywgY29udGFpbmVyU3RhdGUpO1xuICAgIGNvbnN0IHN0YXRpY0N0eCA9IGN0eC4kc3RhdGljJDtcbiAgICBjb25zdCBob3N0c1JlbmRlcmluZyA9IChjb250YWluZXJTdGF0ZS4kaG9zdHNSZW5kZXJpbmckID0gbmV3IFNldChjb250YWluZXJTdGF0ZS4kaG9zdHNOZXh0JCkpO1xuICAgIGNvbnRhaW5lclN0YXRlLiRob3N0c05leHQkLmNsZWFyKCk7XG4gICAgYXdhaXQgZXhlY3V0ZVdhdGNoZXNCZWZvcmUoY29udGFpbmVyU3RhdGUpO1xuXG4gICAgY29udGFpbmVyU3RhdGUuJGhvc3RzU3RhZ2luZyQuZm9yRWFjaCgoaG9zdCkgPT4ge1xuICAgICAgaG9zdHNSZW5kZXJpbmcuYWRkKGhvc3QpO1xuICAgIH0pO1xuICAgIGNvbnRhaW5lclN0YXRlLiRob3N0c1N0YWdpbmckLmNsZWFyKCk7XG5cbiAgICBjb25zdCByZW5kZXJpbmdRdWV1ZSA9IEFycmF5LmZyb20oaG9zdHNSZW5kZXJpbmcpO1xuICAgIHNvcnROb2RlcyhyZW5kZXJpbmdRdWV1ZSk7XG5cbiAgICBmb3IgKGNvbnN0IGVsIG9mIHJlbmRlcmluZ1F1ZXVlKSB7XG4gICAgICBpZiAoIXN0YXRpY0N0eC4kaG9zdEVsZW1lbnRzJC5oYXMoZWwpKSB7XG4gICAgICAgIGNvbnN0IGVsQ3R4ID0gZ2V0Q29udGV4dChlbCk7XG4gICAgICAgIGlmIChlbEN0eC4kY29tcG9uZW50UXJsJCkge1xuICAgICAgICAgIGFzc2VydFRydWUoZWwuaXNDb25uZWN0ZWQsICdlbGVtZW50IG11c3QgYmUgY29ubmVjdGVkIHRvIHRoZSBkb20nKTtcbiAgICAgICAgICBzdGF0aWNDdHguJHJvb3RzJC5wdXNoKGVsQ3R4KTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgcmVuZGVyQ29tcG9uZW50KGN0eCwgZWxDdHgsIGdldEZsYWdzKGVsLnBhcmVudEVsZW1lbnQpKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChxRGV2KSB7XG4gICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb250YWluZXJTdGF0ZS4kb3BzTmV4dCQuZm9yRWFjaCgob3ApID0+IGV4ZWN1dGVTaWduYWxPcGVyYXRpb24oc3RhdGljQ3R4LCBvcCkpO1xuICAgIGNvbnRhaW5lclN0YXRlLiRvcHNOZXh0JC5jbGVhcigpO1xuXG4gICAgLy8gQWRkIHBvc3Qgb3BlcmF0aW9uc1xuICAgIHN0YXRpY0N0eC4kb3BlcmF0aW9ucyQucHVzaCguLi5zdGF0aWNDdHguJHBvc3RPcGVyYXRpb25zJCk7XG5cbiAgICAvLyBFYXJseSBleGlzdCwgbm8gZG9tIG9wZXJhdGlvbnNcbiAgICBpZiAoc3RhdGljQ3R4LiRvcGVyYXRpb25zJC5sZW5ndGggPT09IDApIHtcbiAgICAgIHByaW50UmVuZGVyU3RhdHMoc3RhdGljQ3R4KTtcbiAgICAgIGF3YWl0IHBvc3RSZW5kZXJpbmcoY29udGFpbmVyU3RhdGUsIHN0YXRpY0N0eCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXdhaXQgZ2V0UGxhdGZvcm0oKS5yYWYoKCkgPT4ge1xuICAgICAgZXhlY3V0ZUNvbnRleHRXaXRoU2xvdHMoY3R4KTtcbiAgICAgIHByaW50UmVuZGVyU3RhdHMoc3RhdGljQ3R4KTtcbiAgICAgIHJldHVybiBwb3N0UmVuZGVyaW5nKGNvbnRhaW5lclN0YXRlLCBzdGF0aWNDdHgpO1xuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2dFcnJvcihlcnIpO1xuICB9XG59O1xuXG5jb25zdCBnZXRGbGFncyA9IChlbDogRWxlbWVudCB8IG51bGwpID0+IHtcbiAgbGV0IGZsYWdzID0gMDtcbiAgaWYgKGVsKSB7XG4gICAgaWYgKGVsLm5hbWVzcGFjZVVSSSA9PT0gU1ZHX05TKSB7XG4gICAgICBmbGFncyB8PSBJU19TVkc7XG4gICAgfVxuICAgIGlmIChlbC50YWdOYW1lID09PSAnSEVBRCcpIHtcbiAgICAgIGZsYWdzIHw9IElTX0hFQUQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBmbGFncztcbn07XG5cbmV4cG9ydCBjb25zdCBwb3N0UmVuZGVyaW5nID0gYXN5bmMgKGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSwgY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0KSA9PiB7XG4gIGF3YWl0IGV4ZWN1dGVXYXRjaGVzQWZ0ZXIoY29udGFpbmVyU3RhdGUsICh3YXRjaCwgc3RhZ2UpID0+IHtcbiAgICBpZiAoKHdhdGNoLiRmbGFncyQgJiBXYXRjaEZsYWdzSXNFZmZlY3QpID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChzdGFnZSkge1xuICAgICAgcmV0dXJuIGN0eC4kaG9zdEVsZW1lbnRzJC5oYXMod2F0Y2guJGVsJCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcblxuICAvLyBDbGVhciBzdGFnaW5nXG4gIGNvbnRhaW5lclN0YXRlLiRob3N0c1N0YWdpbmckLmZvckVhY2goKGVsKSA9PiB7XG4gICAgY29udGFpbmVyU3RhdGUuJGhvc3RzTmV4dCQuYWRkKGVsKTtcbiAgfSk7XG4gIGNvbnRhaW5lclN0YXRlLiRob3N0c1N0YWdpbmckLmNsZWFyKCk7XG5cbiAgY29udGFpbmVyU3RhdGUuJGhvc3RzUmVuZGVyaW5nJCA9IHVuZGVmaW5lZDtcbiAgY29udGFpbmVyU3RhdGUuJHJlbmRlclByb21pc2UkID0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0IHBlbmRpbmcgPVxuICAgIGNvbnRhaW5lclN0YXRlLiRob3N0c05leHQkLnNpemUgK1xuICAgIGNvbnRhaW5lclN0YXRlLiR3YXRjaE5leHQkLnNpemUgK1xuICAgIGNvbnRhaW5lclN0YXRlLiRvcHNOZXh0JC5zaXplO1xuICBpZiAocGVuZGluZyA+IDApIHtcbiAgICBzY2hlZHVsZUZyYW1lKGNvbnRhaW5lclN0YXRlKTtcbiAgfVxufTtcblxuY29uc3QgZXhlY3V0ZVdhdGNoZXNCZWZvcmUgPSBhc3luYyAoY29udGFpbmVyU3RhdGU6IENvbnRhaW5lclN0YXRlKSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lckVsID0gY29udGFpbmVyU3RhdGUuJGNvbnRhaW5lckVsJDtcbiAgY29uc3QgcmVzb3VyY2VzUHJvbWlzZXM6IFZhbHVlT3JQcm9taXNlPFN1YnNjcmliZXJFZmZlY3Q+W10gPSBbXTtcbiAgY29uc3Qgd2F0Y2hQcm9taXNlczogVmFsdWVPclByb21pc2U8U3Vic2NyaWJlckVmZmVjdD5bXSA9IFtdO1xuICBjb25zdCBpc1dhdGNoID0gKHdhdGNoOiBTdWJzY3JpYmVyRWZmZWN0KSA9PiAod2F0Y2guJGZsYWdzJCAmIFdhdGNoRmxhZ3NJc1dhdGNoKSAhPT0gMDtcbiAgY29uc3QgaXNSZXNvdXJjZVdhdGNoID0gKHdhdGNoOiBTdWJzY3JpYmVyRWZmZWN0KSA9PiAod2F0Y2guJGZsYWdzJCAmIFdhdGNoRmxhZ3NJc1Jlc291cmNlKSAhPT0gMDtcblxuICBjb250YWluZXJTdGF0ZS4kd2F0Y2hOZXh0JC5mb3JFYWNoKCh3YXRjaCkgPT4ge1xuICAgIGlmIChpc1dhdGNoKHdhdGNoKSkge1xuICAgICAgd2F0Y2hQcm9taXNlcy5wdXNoKHRoZW4od2F0Y2guJHFybCQuJHJlc29sdmVMYXp5JChjb250YWluZXJFbCksICgpID0+IHdhdGNoKSk7XG4gICAgICBjb250YWluZXJTdGF0ZS4kd2F0Y2hOZXh0JC5kZWxldGUod2F0Y2gpO1xuICAgIH1cbiAgICBpZiAoaXNSZXNvdXJjZVdhdGNoKHdhdGNoKSkge1xuICAgICAgcmVzb3VyY2VzUHJvbWlzZXMucHVzaCh0aGVuKHdhdGNoLiRxcmwkLiRyZXNvbHZlTGF6eSQoY29udGFpbmVyRWwpLCAoKSA9PiB3YXRjaCkpO1xuICAgICAgY29udGFpbmVyU3RhdGUuJHdhdGNoTmV4dCQuZGVsZXRlKHdhdGNoKTtcbiAgICB9XG4gIH0pO1xuICBkbyB7XG4gICAgLy8gUnVuIHN0YWdpbmcgZWZmZWN0ZWRcbiAgICBjb250YWluZXJTdGF0ZS4kd2F0Y2hTdGFnaW5nJC5mb3JFYWNoKCh3YXRjaCkgPT4ge1xuICAgICAgaWYgKGlzV2F0Y2god2F0Y2gpKSB7XG4gICAgICAgIHdhdGNoUHJvbWlzZXMucHVzaCh0aGVuKHdhdGNoLiRxcmwkLiRyZXNvbHZlTGF6eSQoY29udGFpbmVyRWwpLCAoKSA9PiB3YXRjaCkpO1xuICAgICAgfSBlbHNlIGlmIChpc1Jlc291cmNlV2F0Y2god2F0Y2gpKSB7XG4gICAgICAgIHJlc291cmNlc1Byb21pc2VzLnB1c2godGhlbih3YXRjaC4kcXJsJC4kcmVzb2x2ZUxhenkkKGNvbnRhaW5lckVsKSwgKCkgPT4gd2F0Y2gpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lclN0YXRlLiR3YXRjaE5leHQkLmFkZCh3YXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb250YWluZXJTdGF0ZS4kd2F0Y2hTdGFnaW5nJC5jbGVhcigpO1xuXG4gICAgLy8gV2FpdCBmb3IgYWxsIHByb21pc2VzXG4gICAgaWYgKHdhdGNoUHJvbWlzZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qgd2F0Y2hlcyA9IGF3YWl0IFByb21pc2UuYWxsKHdhdGNoUHJvbWlzZXMpO1xuICAgICAgc29ydFdhdGNoZXMod2F0Y2hlcyk7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgd2F0Y2hlcy5tYXAoKHdhdGNoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJ1blN1YnNjcmliZXIod2F0Y2gsIGNvbnRhaW5lclN0YXRlKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICB3YXRjaFByb21pc2VzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9IHdoaWxlIChjb250YWluZXJTdGF0ZS4kd2F0Y2hTdGFnaW5nJC5zaXplID4gMCk7XG5cbiAgaWYgKHJlc291cmNlc1Byb21pc2VzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCByZXNvdXJjZXMgPSBhd2FpdCBQcm9taXNlLmFsbChyZXNvdXJjZXNQcm9taXNlcyk7XG4gICAgc29ydFdhdGNoZXMocmVzb3VyY2VzKTtcbiAgICByZXNvdXJjZXMuZm9yRWFjaCgod2F0Y2gpID0+IHJ1blN1YnNjcmliZXIod2F0Y2gsIGNvbnRhaW5lclN0YXRlKSk7XG4gIH1cbn07XG5cbmNvbnN0IGV4ZWN1dGVXYXRjaGVzQWZ0ZXIgPSBhc3luYyAoXG4gIGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSxcbiAgd2F0Y2hQcmVkOiAod2F0Y2g6IFN1YnNjcmliZXJFZmZlY3QsIHN0YWdpbmc6IGJvb2xlYW4pID0+IGJvb2xlYW5cbikgPT4ge1xuICBjb25zdCB3YXRjaFByb21pc2VzOiBWYWx1ZU9yUHJvbWlzZTxTdWJzY3JpYmVyRWZmZWN0PltdID0gW107XG4gIGNvbnN0IGNvbnRhaW5lckVsID0gY29udGFpbmVyU3RhdGUuJGNvbnRhaW5lckVsJDtcblxuICBjb250YWluZXJTdGF0ZS4kd2F0Y2hOZXh0JC5mb3JFYWNoKCh3YXRjaCkgPT4ge1xuICAgIGlmICh3YXRjaFByZWQod2F0Y2gsIGZhbHNlKSkge1xuICAgICAgd2F0Y2hQcm9taXNlcy5wdXNoKHRoZW4od2F0Y2guJHFybCQuJHJlc29sdmVMYXp5JChjb250YWluZXJFbCksICgpID0+IHdhdGNoKSk7XG4gICAgICBjb250YWluZXJTdGF0ZS4kd2F0Y2hOZXh0JC5kZWxldGUod2F0Y2gpO1xuICAgIH1cbiAgfSk7XG4gIGRvIHtcbiAgICAvLyBSdW4gc3RhZ2luZyBlZmZlY3RlZFxuICAgIGNvbnRhaW5lclN0YXRlLiR3YXRjaFN0YWdpbmckLmZvckVhY2goKHdhdGNoKSA9PiB7XG4gICAgICBpZiAod2F0Y2hQcmVkKHdhdGNoLCB0cnVlKSkge1xuICAgICAgICB3YXRjaFByb21pc2VzLnB1c2godGhlbih3YXRjaC4kcXJsJC4kcmVzb2x2ZUxhenkkKGNvbnRhaW5lckVsKSwgKCkgPT4gd2F0Y2gpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lclN0YXRlLiR3YXRjaE5leHQkLmFkZCh3YXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29udGFpbmVyU3RhdGUuJHdhdGNoU3RhZ2luZyQuY2xlYXIoKTtcblxuICAgIC8vIFdhaXQgZm9yIGFsbCBwcm9taXNlc1xuICAgIGlmICh3YXRjaFByb21pc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHdhdGNoZXMgPSBhd2FpdCBQcm9taXNlLmFsbCh3YXRjaFByb21pc2VzKTtcbiAgICAgIHNvcnRXYXRjaGVzKHdhdGNoZXMpO1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIHdhdGNoZXMubWFwKCh3YXRjaCkgPT4ge1xuICAgICAgICAgIHJldHVybiBydW5TdWJzY3JpYmVyKHdhdGNoLCBjb250YWluZXJTdGF0ZSk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgd2F0Y2hQcm9taXNlcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfSB3aGlsZSAoY29udGFpbmVyU3RhdGUuJHdhdGNoU3RhZ2luZyQuc2l6ZSA+IDApO1xufTtcblxuY29uc3Qgc29ydE5vZGVzID0gKGVsZW1lbnRzOiBRd2lrRWxlbWVudFtdKSA9PiB7XG4gIGVsZW1lbnRzLnNvcnQoKGEsIGIpID0+IChhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGdldFJvb3ROb2RlKGIpKSAmIDIgPyAxIDogLTEpKTtcbn07XG5cbmNvbnN0IHNvcnRXYXRjaGVzID0gKHdhdGNoZXM6IFN1YnNjcmliZXJFZmZlY3RbXSkgPT4ge1xuICB3YXRjaGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBpZiAoYS4kZWwkID09PSBiLiRlbCQpIHtcbiAgICAgIHJldHVybiBhLiRpbmRleCQgPCBiLiRpbmRleCQgPyAtMSA6IDE7XG4gICAgfVxuICAgIHJldHVybiAoYS4kZWwkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGdldFJvb3ROb2RlKGIuJGVsJCkpICYgMikgIT09IDAgPyAxIDogLTE7XG4gIH0pO1xufTtcbiJdfQ==","import { newInvokeContext, invoke, waitAndRun } from './use-core';\nimport { logError, logErrorAndStop } from '../util/log';\nimport { delay, safeCall, then } from '../util/promises';\nimport { isFunction, isObject } from '../util/types';\nimport { isServer } from '../platform/platform';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { assertDefined, assertEqual } from '../error/assert';\nimport { assertQrl, createQRL } from '../qrl/qrl-class';\nimport { codeToText, qError, QError_canNotMountUseServerMount, QError_trackUseStore, } from '../error/error';\nimport { useOn, useOnDocument } from './use-on';\nimport { intToStr, strToInt } from '../container/container';\nimport { notifyWatch, _hW } from '../render/dom/notify-render';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { handleError } from '../render/error-handling';\nimport { getProxyManager, noSerialize, unwrapProxy } from '../state/common';\nimport { getContext } from '../state/context';\nimport { isSignal } from '../state/signal';\nexport const WatchFlagsIsEffect = 1 << 0;\nexport const WatchFlagsIsWatch = 1 << 1;\nexport const WatchFlagsIsDirty = 1 << 2;\nexport const WatchFlagsIsCleanup = 1 << 3;\nexport const WatchFlagsIsResource = 1 << 4;\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs, use the\n * `obs` function to wrap property reads. This creates subscriptions that will trigger the\n * `watchFn` to rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ### Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatchQrl = (qrl, opts) => {\n    const { get, set, ctx, i } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    assertQrl(qrl);\n    const el = ctx.$hostElement$;\n    const containerState = ctx.$renderCtx$.$static$.$containerState$;\n    const watch = new Watch(WatchFlagsIsDirty | WatchFlagsIsWatch, i, el, qrl, undefined);\n    const elCtx = getContext(el);\n    set(true);\n    qrl.$resolveLazy$(containerState.$containerEl$);\n    if (!elCtx.$watches$) {\n        elCtx.$watches$ = [];\n    }\n    elCtx.$watches$.push(watch);\n    waitAndRun(ctx, () => runSubscriber(watch, containerState, ctx.$renderCtx$));\n    if (isServer()) {\n        useRunWatch(watch, opts?.eagerness);\n    }\n};\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs, use the\n * `obs` function to wrap property reads. This creates subscriptions that will trigger the\n * `watchFn` to rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ### Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatch$ = /*#__PURE__*/ implicit$FirstArg(useWatchQrl);\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffectQrl = (qrl, opts) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    const eagerness = opts?.eagerness ?? 'visible';\n    if (get) {\n        if (isServer()) {\n            useRunWatch(get, eagerness);\n        }\n        return;\n    }\n    assertQrl(qrl);\n    const el = ctx.$hostElement$;\n    const watch = new Watch(WatchFlagsIsEffect, i, el, qrl, undefined);\n    const elCtx = getContext(el);\n    const containerState = ctx.$renderCtx$.$static$.$containerState$;\n    if (!elCtx.$watches$) {\n        elCtx.$watches$ = [];\n    }\n    elCtx.$watches$.push(watch);\n    set(watch);\n    useRunWatch(watch, eagerness);\n    if (!isServer()) {\n        qrl.$resolveLazy$(containerState.$containerEl$);\n        notifyWatch(watch, containerState);\n    }\n};\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffect$ = /*#__PURE__*/ implicit$FirstArg(useClientEffectQrl);\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook that runs only in the server when the component is first\n * mounted.\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <div>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </div>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useMount`\n * @public\n */\n// </docs>\nexport const useServerMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    if (isServer()) {\n        waitAndRun(ctx, mountQrl);\n        set(true);\n    }\n    else {\n        throw qError(QError_canNotMountUseServerMount, ctx.$hostElement$);\n    }\n};\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook that runs only in the server when the component is first\n * mounted.\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <div>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </div>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useMount`\n * @public\n */\n// </docs>\nexport const useServerMount$ = /*#__PURE__*/ implicit$FirstArg(useServerMountQrl);\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register a server mount hook that runs only in the server when the component is first mounted.\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = (await res.json()) as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <div>\n *       <p>The temperature is: ${store.temp}</p>\n *     </div>\n *   );\n * });\n * ```\n *\n * @see `useServerMount`\n * @public\n */\n// </docs>\nexport const useMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    assertQrl(mountQrl);\n    mountQrl.$resolveLazy$(ctx.$renderCtx$.$static$.$containerState$.$containerEl$);\n    waitAndRun(ctx, mountQrl);\n    set(true);\n};\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register a server mount hook that runs only in the server when the component is first mounted.\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = (await res.json()) as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <div>\n *       <p>The temperature is: ${store.temp}</p>\n *     </div>\n *   );\n * });\n * ```\n *\n * @see `useServerMount`\n * @public\n */\n// </docs>\nexport const useMount$ = /*#__PURE__*/ implicit$FirstArg(useMountQrl);\nexport const isResourceWatch = (watch) => {\n    return !!watch.$resource$;\n};\nexport const runSubscriber = async (watch, containerState, rctx) => {\n    assertEqual(!!(watch.$flags$ & WatchFlagsIsDirty), true, 'Resource is not dirty', watch);\n    if (isResourceWatch(watch)) {\n        return runResource(watch, containerState);\n    }\n    else {\n        return runWatch(watch, containerState, rctx);\n    }\n};\nexport const runResource = (watch, containerState, waitOn) => {\n    watch.$flags$ &= ~WatchFlagsIsDirty;\n    cleanupWatch(watch);\n    const el = watch.$el$;\n    const invokationContext = newInvokeContext(el, undefined, 'WatchEvent');\n    const { $subsManager$: subsManager } = containerState;\n    watch.$qrl$.$captureRef$;\n    const watchFn = watch.$qrl$.getFn(invokationContext, () => {\n        subsManager.$clearSub$(watch);\n    });\n    const cleanups = [];\n    const resource = watch.$resource$;\n    assertDefined(resource, 'useResource: when running a resource, \"watch.r\" must be a defined.', watch);\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = watch;\n            return invoke(ctx, obj);\n        }\n        const manager = getProxyManager(obj);\n        if (manager) {\n            manager.$addSub$([0, watch, prop]);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else if (isSignal(obj)) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    };\n    const resourceTarget = unwrapProxy(resource);\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n        cache(policy) {\n            let milliseconds = 0;\n            if (policy === 'immutable') {\n                milliseconds = Infinity;\n            }\n            else {\n                milliseconds = policy;\n            }\n            resource._cache = milliseconds;\n        },\n        previous: resourceTarget._resolved,\n    };\n    let resolve;\n    let reject;\n    let done = false;\n    const setState = (resolved, value) => {\n        if (!done) {\n            done = true;\n            if (resolved) {\n                done = true;\n                resource.loading = false;\n                resource._state = 'resolved';\n                resource._resolved = value;\n                resource._error = undefined;\n                resolve(value);\n            }\n            else {\n                done = true;\n                resource.loading = false;\n                resource._state = 'rejected';\n                resource._resolved = undefined;\n                resource._error = value;\n                reject(value);\n            }\n            return true;\n        }\n        return false;\n    };\n    // Execute mutation inside empty invokation\n    invoke(invokationContext, () => {\n        resource._state = 'pending';\n        resource.loading = !isServer();\n        resource._resolved = undefined;\n        resource.promise = new Promise((r, re) => {\n            resolve = r;\n            reject = re;\n        });\n    });\n    watch.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const promise = safeCall(() => then(waitOn, () => watchFn(opts)), (value) => {\n        setState(true, value);\n    }, (reason) => {\n        setState(false, reason);\n    });\n    const timeout = resourceTarget._timeout;\n    if (timeout > 0) {\n        return Promise.race([\n            promise,\n            delay(timeout).then(() => {\n                if (setState(false, new Error('timeout'))) {\n                    cleanupWatch(watch);\n                }\n            }),\n        ]);\n    }\n    return promise;\n};\nexport const runWatch = (watch, containerState, rctx) => {\n    watch.$flags$ &= ~WatchFlagsIsDirty;\n    cleanupWatch(watch);\n    const hostElement = watch.$el$;\n    const invokationContext = newInvokeContext(hostElement, undefined, 'WatchEvent');\n    const { $subsManager$: subsManager } = containerState;\n    const watchFn = watch.$qrl$.getFn(invokationContext, () => {\n        subsManager.$clearSub$(watch);\n    });\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = watch;\n            return invoke(ctx, obj);\n        }\n        const manager = getProxyManager(obj);\n        if (manager) {\n            manager.$addSub$([0, watch, prop]);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else {\n            return obj;\n        }\n    };\n    const cleanups = [];\n    watch.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n    };\n    return safeCall(() => watchFn(opts), (returnValue) => {\n        if (isFunction(returnValue)) {\n            cleanups.push(returnValue);\n        }\n    }, (reason) => {\n        handleError(reason, hostElement, rctx);\n    });\n};\nexport const cleanupWatch = (watch) => {\n    const destroy = watch.$destroy$;\n    if (destroy) {\n        watch.$destroy$ = undefined;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nexport const destroyWatch = (watch) => {\n    if (watch.$flags$ & WatchFlagsIsCleanup) {\n        watch.$flags$ &= ~WatchFlagsIsCleanup;\n        const cleanup = watch.$qrl$;\n        cleanup();\n    }\n    else {\n        cleanupWatch(watch);\n    }\n};\nconst useRunWatch = (watch, eagerness) => {\n    if (eagerness === 'visible') {\n        useOn('qvisible', getWatchHandlerQrl(watch));\n    }\n    else if (eagerness === 'load') {\n        useOnDocument('qinit', getWatchHandlerQrl(watch));\n    }\n    else if (eagerness === 'idle') {\n        useOnDocument('qidle', getWatchHandlerQrl(watch));\n    }\n};\nconst getWatchHandlerQrl = (watch) => {\n    const watchQrl = watch.$qrl$;\n    const watchHandler = createQRL(watchQrl.$chunk$, '_hW', _hW, null, null, [watch], watchQrl.$symbol$);\n    return watchHandler;\n};\nexport const isWatchCleanup = (obj) => {\n    return isSubscriberDescriptor(obj) && !!(obj.$flags$ & WatchFlagsIsCleanup);\n};\nexport const isSubscriberDescriptor = (obj) => {\n    return isObject(obj) && obj instanceof Watch;\n};\nexport const serializeWatch = (watch, getObjId) => {\n    let value = `${intToStr(watch.$flags$)} ${intToStr(watch.$index$)} ${getObjId(watch.$qrl$)} ${getObjId(watch.$el$)}`;\n    if (isResourceWatch(watch)) {\n        value += ` ${getObjId(watch.$resource$)}`;\n    }\n    return value;\n};\nexport const parseWatch = (data) => {\n    const [flags, index, qrl, el, resource] = data.split(' ');\n    return new Watch(strToInt(flags), strToInt(index), el, qrl, resource);\n};\nexport class Watch {\n    constructor($flags$, $index$, $el$, $qrl$, $resource$) {\n        this.$flags$ = $flags$;\n        this.$index$ = $index$;\n        this.$el$ = $el$;\n        this.$qrl$ = $qrl$;\n        this.$resource$ = $resource$;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../qrl/qrl.public';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { runResource, WatchFlagsIsDirty, WatchFlagsIsResource, Watch, } from './use-watch';\nimport { Fragment, jsx } from '../render/jsx/jsx-runtime';\nimport { isServer } from '../platform/platform';\nimport { useBindInvokeContext } from './use-core';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { getContext } from '../state/context';\nimport { createProxy } from '../state/store';\nimport { getProxyTarget } from '../state/common';\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value\n * changes and returns some data.\n *\n * `useResouce` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the\n * input city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @see Resource\n * @see ResourceReturn\n *\n * @public\n */\n// </docs>\nexport const useResourceQrl = (qrl, opts) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    assertQrl(qrl);\n    const containerState = ctx.$renderCtx$.$static$.$containerState$;\n    const resource = createResourceReturn(containerState, opts);\n    const el = ctx.$hostElement$;\n    const watch = new Watch(WatchFlagsIsDirty | WatchFlagsIsResource, i, el, qrl, resource);\n    const previousWait = Promise.all(ctx.$waitOn$.slice());\n    const elCtx = getContext(el);\n    runResource(watch, containerState, previousWait);\n    if (!elCtx.$watches$) {\n        elCtx.$watches$ = [];\n    }\n    elCtx.$watches$.push(watch);\n    set(resource);\n    return resource;\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value\n * changes and returns some data.\n *\n * `useResouce` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the\n * input city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @see Resource\n * @see ResourceReturn\n *\n * @public\n */\n// </docs>\nexport const useResource$ = (generatorFn, opts) => {\n    return useResourceQrl($(generatorFn), opts);\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value\n * changes and returns some data.\n *\n * `useResouce` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the\n * input city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @see Resource\n * @see ResourceReturn\n *\n * @public\n */\n// </docs>\nexport const Resource = (props) => {\n    const isBrowser = !isServer();\n    const resource = props.value;\n    if (isBrowser) {\n        if (props.onRejected) {\n            resource.promise.catch(() => { });\n            if (resource._state === 'rejected') {\n                return props.onRejected(resource._error);\n            }\n        }\n        if (props.onPending) {\n            const state = resource._state;\n            if (state === 'pending') {\n                return props.onPending();\n            }\n            else if (state === 'resolved') {\n                return props.onResolved(resource._resolved);\n            }\n            else if (state === 'rejected') {\n                throw resource._error;\n            }\n        }\n    }\n    const promise = resource.promise.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    // Resource path\n    return jsx(Fragment, {\n        children: promise,\n    });\n};\nexport const _createResourceReturn = (opts) => {\n    const resource = {\n        __brand: 'resource',\n        promise: undefined,\n        loading: isServer() ? false : true,\n        _resolved: undefined,\n        _error: undefined,\n        _state: 'pending',\n        _timeout: opts?.timeout ?? -1,\n        _cache: 0,\n    };\n    return resource;\n};\nexport const createResourceReturn = (containerState, opts, initialPromise) => {\n    const result = _createResourceReturn(opts);\n    result.promise = initialPromise;\n    const resource = createProxy(result, containerState, undefined);\n    return resource;\n};\nexport const getInternalResource = (resource) => {\n    return getProxyTarget(resource);\n};\nexport const isResourceReturn = (obj) => {\n    return isObject(obj) && obj.__brand === 'resource';\n};\nexport const serializeResource = (resource, getObjId) => {\n    const state = resource._state;\n    if (state === 'resolved') {\n        return `0 ${getObjId(resource._resolved)}`;\n    }\n    else if (state === 'pending') {\n        return `1`;\n    }\n    else {\n        return `2 ${getObjId(resource._error)}`;\n    }\n};\nexport const parseResourceReturn = (data) => {\n    const [first, id] = data.split(' ');\n    const result = _createResourceReturn(undefined);\n    result.promise = Promise.resolve();\n    if (first === '0') {\n        result._state = 'resolved';\n        result._resolved = id;\n        result.loading = false;\n    }\n    else if (first === '1') {\n        result._state = 'pending';\n        result.promise = new Promise(() => { });\n        result.loading = true;\n    }\n    else if (first === '2') {\n        result._state = 'rejected';\n        result._error = id;\n        result.loading = false;\n    }\n    return result;\n};\n//# sourceMappingURL=data:application/json;base64,","import { componentQrl, isQwikComponent } from '../component/component.public';\nimport { parseQRL, serializeQRL } from '../qrl/qrl';\nimport { isQrl } from '../qrl/qrl-class';\nimport { isResourceReturn, parseResourceReturn, serializeResource } from '../use/use-resource';\nimport { isSubscriberDescriptor, parseWatch, serializeWatch, } from '../use/use-watch';\nimport { isDocument } from '../util/element';\nimport { SignalImpl, SignalWrapper } from '../state/signal';\nimport { collectSubscriptions, collectValue } from './pause';\nimport { getOrCreateProxy } from '../state/store';\nimport { QObjectManagerSymbol } from '../state/constants';\n/**\n * 0, 8, 9, A, B, C, D\n\\0: null character (U+0000 NULL) (only if the next character is not a decimal digit; else it’s an octal escape sequence)\n\\b: backspace (U+0008 BACKSPACE)\n\\t: horizontal tab (U+0009 CHARACTER TABULATION)\n\\n: line feed (U+000A LINE FEED)\n\\v: vertical tab (U+000B LINE TABULATION)\n\\f: form feed (U+000C FORM FEED)\n\\r: carriage return (U+000D CARRIAGE RETURN)\n\\\": double quote (U+0022 QUOTATION MARK)\n\\': single quote (U+0027 APOSTROPHE)\n\\\\: backslash (U+005C REVERSE SOLIDUS)\n */\nexport const UNDEFINED_PREFIX = '\\u0001';\nconst QRLSerializer = {\n    prefix: '\\u0002',\n    test: (v) => isQrl(v),\n    collect: (v, collector, leaks) => {\n        if (v.$captureRef$) {\n            for (const item of v.$captureRef$) {\n                collectValue(item, collector, leaks);\n            }\n        }\n        if (collector.$prefetch$ === 0) {\n            collector.$qrls$.push(v);\n        }\n    },\n    serialize: (obj, getObjId) => {\n        return serializeQRL(obj, {\n            $getObjId$: getObjId,\n        });\n    },\n    prepare: (data, containerState) => {\n        return parseQRL(data, containerState.$containerEl$);\n    },\n    fill: (qrl, getObject) => {\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n};\nconst WatchSerializer = {\n    prefix: '\\u0003',\n    test: (v) => isSubscriberDescriptor(v),\n    collect: (v, collector, leaks) => {\n        collectValue(v.$qrl$, collector, leaks);\n        if (v.$resource$) {\n            collectValue(v.$resource$, collector, leaks);\n        }\n    },\n    serialize: (obj, getObjId) => serializeWatch(obj, getObjId),\n    prepare: (data) => parseWatch(data),\n    fill: (watch, getObject) => {\n        watch.$el$ = getObject(watch.$el$);\n        watch.$qrl$ = getObject(watch.$qrl$);\n        if (watch.$resource$) {\n            watch.$resource$ = getObject(watch.$resource$);\n        }\n    },\n};\nconst ResourceSerializer = {\n    prefix: '\\u0004',\n    test: (v) => isResourceReturn(v),\n    collect: (obj, collector, leaks) => {\n        collectValue(obj.promise, collector, leaks);\n        collectValue(obj._resolved, collector, leaks);\n    },\n    serialize: (obj, getObjId) => {\n        return serializeResource(obj, getObjId);\n    },\n    prepare: (data) => {\n        return parseResourceReturn(data);\n    },\n    fill: (resource, getObject) => {\n        if (resource._state === 'resolved') {\n            resource._resolved = getObject(resource._resolved);\n            resource.promise = Promise.resolve(resource._resolved);\n        }\n        else if (resource._state === 'rejected') {\n            const p = Promise.reject(resource._error);\n            p.catch(() => null);\n            resource._error = getObject(resource._error);\n            resource.promise = p;\n        }\n    },\n};\nconst URLSerializer = {\n    prefix: '\\u0005',\n    test: (v) => v instanceof URL,\n    serialize: (obj) => obj.href,\n    prepare: (data) => new URL(data),\n    fill: undefined,\n};\nconst DateSerializer = {\n    prefix: '\\u0006',\n    test: (v) => v instanceof Date,\n    serialize: (obj) => obj.toISOString(),\n    prepare: (data) => new Date(data),\n    fill: undefined,\n};\nconst RegexSerializer = {\n    prefix: '\\u0007',\n    test: (v) => v instanceof RegExp,\n    serialize: (obj) => `${obj.flags} ${obj.source}`,\n    prepare: (data) => {\n        const space = data.indexOf(' ');\n        const source = data.slice(space + 1);\n        const flags = data.slice(0, space);\n        return new RegExp(source, flags);\n    },\n    fill: undefined,\n};\nconst ErrorSerializer = {\n    prefix: '\\u000E',\n    test: (v) => v instanceof Error,\n    serialize: (obj) => {\n        return obj.message;\n    },\n    prepare: (text) => {\n        const err = new Error(text);\n        err.stack = undefined;\n        return err;\n    },\n    fill: undefined,\n};\nconst DocumentSerializer = {\n    prefix: '\\u000F',\n    test: (v) => isDocument(v),\n    serialize: undefined,\n    prepare: (_, _c, doc) => {\n        return doc;\n    },\n    fill: undefined,\n};\nexport const SERIALIZABLE_STATE = Symbol('serializable-data');\nconst ComponentSerializer = {\n    prefix: '\\u0010',\n    test: (obj) => isQwikComponent(obj),\n    serialize: (obj, getObjId) => {\n        const [qrl] = obj[SERIALIZABLE_STATE];\n        return serializeQRL(qrl, {\n            $getObjId$: getObjId,\n        });\n    },\n    prepare: (data, containerState) => {\n        const optionsIndex = data.indexOf('{');\n        const qrlString = optionsIndex == -1 ? data : data.slice(0, optionsIndex);\n        const qrl = parseQRL(qrlString, containerState.$containerEl$);\n        return componentQrl(qrl);\n    },\n    fill: (component, getObject) => {\n        const [qrl] = component[SERIALIZABLE_STATE];\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n};\nconst PureFunctionSerializer = {\n    prefix: '\\u0011',\n    test: (obj) => typeof obj === 'function' && obj.__qwik_serializable__ !== undefined,\n    serialize: (obj) => {\n        return obj.toString();\n    },\n    prepare: (data) => {\n        const fn = new Function('return ' + data)();\n        fn.__qwik_serializable__ = true;\n        return fn;\n    },\n    fill: undefined,\n};\nconst SignalSerializer = {\n    prefix: '\\u0012',\n    test: (v) => v instanceof SignalImpl,\n    collect: (obj, collector, leaks) => {\n        collectValue(obj.untrackedValue, collector, leaks);\n        if (leaks) {\n            collectSubscriptions(obj[QObjectManagerSymbol], collector);\n        }\n        return obj;\n    },\n    serialize: (obj, getObjId) => {\n        return getObjId(obj.untrackedValue);\n    },\n    prepare: (data, containerState) => {\n        return new SignalImpl(data, containerState.$subsManager$.$createManager$());\n    },\n    subs: (signal, subs) => {\n        signal[QObjectManagerSymbol].$addSubs$(subs);\n    },\n    fill: (signal, getObject) => {\n        signal.untrackedValue = getObject(signal.untrackedValue);\n    },\n};\nconst SignalWrapperSerializer = {\n    prefix: '\\u0013',\n    test: (v) => v instanceof SignalWrapper,\n    collect(obj, collector, leaks) {\n        collectValue(obj.ref, collector, leaks);\n        return obj;\n    },\n    serialize: (obj, getObjId) => {\n        return `${getObjId(obj.ref)} ${obj.prop}`;\n    },\n    prepare: (data) => {\n        const [id, prop] = data.split(' ');\n        return new SignalWrapper(id, prop);\n    },\n    fill: (signal, getObject) => {\n        signal.ref = getObject(signal.ref);\n    },\n};\nconst NoFiniteNumberSerializer = {\n    prefix: '\\u0014',\n    test: (v) => typeof v === 'number',\n    serialize: (v) => {\n        return String(v);\n    },\n    prepare: (data) => {\n        return Number(data);\n    },\n    fill: undefined,\n};\nconst serializers = [\n    QRLSerializer,\n    SignalSerializer,\n    SignalWrapperSerializer,\n    WatchSerializer,\n    ResourceSerializer,\n    URLSerializer,\n    DateSerializer,\n    RegexSerializer,\n    ErrorSerializer,\n    DocumentSerializer,\n    ComponentSerializer,\n    PureFunctionSerializer,\n    NoFiniteNumberSerializer,\n];\nconst collectorSerializers = /*#__PURE__*/ serializers.filter((a) => a.collect);\nexport const canSerialize = (obj) => {\n    for (const s of serializers) {\n        if (s.test(obj)) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const collectDeps = (obj, collector, leaks) => {\n    for (const s of collectorSerializers) {\n        if (s.test(obj)) {\n            s.collect(obj, collector, leaks);\n            return true;\n        }\n    }\n    return false;\n};\nexport const serializeValue = (obj, getObjID, containerState) => {\n    for (const s of serializers) {\n        if (s.test(obj)) {\n            let value = s.prefix;\n            if (s.serialize) {\n                value += s.serialize(obj, getObjID, containerState);\n            }\n            return value;\n        }\n    }\n    return undefined;\n};\nexport const createParser = (getObject, containerState, doc) => {\n    const fillMap = new Map();\n    const subsMap = new Map();\n    return {\n        prepare(data) {\n            for (const s of serializers) {\n                const prefix = s.prefix;\n                if (data.startsWith(prefix)) {\n                    const value = s.prepare(data.slice(prefix.length), containerState, doc);\n                    if (s.fill) {\n                        fillMap.set(value, s);\n                    }\n                    if (s.subs) {\n                        subsMap.set(value, s);\n                    }\n                    return value;\n                }\n            }\n            return data;\n        },\n        subs(obj, subs) {\n            const serializer = subsMap.get(obj);\n            if (serializer) {\n                serializer.subs(obj, subs, containerState);\n                return true;\n            }\n            return false;\n        },\n        fill(obj) {\n            const serializer = fillMap.get(obj);\n            if (serializer) {\n                serializer.fill(obj, getObject, containerState);\n                return true;\n            }\n            return false;\n        },\n    };\n};\nexport const OBJECT_TRANSFORMS = {\n    '!': (obj, containerState) => {\n        return containerState.$proxyMap$.get(obj) ?? getOrCreateProxy(obj, containerState);\n    },\n    '~': (obj) => {\n        return Promise.resolve(obj);\n    },\n    _: (obj) => {\n        return Promise.reject(obj);\n    },\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertTrue } from '../error/assert';\nimport { qError, QError_verifySerializable } from '../error/error';\nimport { isDocument, isQwikElement } from '../util/element';\nimport { seal } from '../util/qdev';\nimport { isArray, isFunction, isObject, isSerializableObject } from '../util/types';\nimport { isPromise } from '../util/promises';\nimport { canSerialize } from '../container/serializers';\nimport { notifyChange } from '../render/dom/notify-render';\nimport { logError } from '../util/log';\nimport { tryGetContext } from './context';\nimport { QObjectFlagsSymbol, QObjectManagerSymbol, QOjectTargetSymbol } from './constants';\nexport const verifySerializable = (value) => {\n    const seen = new Set();\n    return _verifySerializable(value, seen);\n};\nconst _verifySerializable = (value, seen) => {\n    const unwrapped = unwrapProxy(value);\n    if (unwrapped == null) {\n        return value;\n    }\n    if (shouldSerialize(unwrapped)) {\n        if (seen.has(unwrapped)) {\n            return value;\n        }\n        seen.add(unwrapped);\n        if (canSerialize(unwrapped)) {\n            return value;\n        }\n        switch (typeof unwrapped) {\n            case 'object':\n                if (isPromise(unwrapped))\n                    return value;\n                if (isQwikElement(unwrapped))\n                    return value;\n                if (isDocument(unwrapped))\n                    return value;\n                if (isArray(unwrapped)) {\n                    for (const item of unwrapped) {\n                        _verifySerializable(item, seen);\n                    }\n                    return value;\n                }\n                if (isSerializableObject(unwrapped)) {\n                    for (const item of Object.values(unwrapped)) {\n                        _verifySerializable(item, seen);\n                    }\n                    return value;\n                }\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return value;\n        }\n        throw qError(QError_verifySerializable, unwrapped);\n    }\n    return value;\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\nexport const fastShouldSerialize = (obj) => {\n    return !noSerializeSet.has(obj);\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * Marks a property on a store as non-serializable.\n *\n * At times it is necessary to store values on a store that are non-serializable. Normally this\n * is a runtime error as Store wants to eagerly report when a non-serializable property is\n * assigned to it.\n *\n * You can use `noSerialize()` to mark a value as non-serializable. The value is persisted in the\n * Store but does not survive serialization. The implication is that when your application is\n * resumed, the value of this object will be `undefined`. You will be responsible for recovering\n * from this.\n *\n * See: [noSerialize Tutorial](http://qwik.builder.io/tutorial/store/no-serialize)\n *\n * @public\n */\n// </docs>\nexport const noSerialize = (input) => {\n    if (input != null) {\n        noSerializeSet.add(input);\n    }\n    return input;\n};\n/**\n * @alpha\n * @deprecated Remove it, not needed anymore\n */\nexport const mutable = (v) => {\n    console.warn('mutable() is deprecated, you can safely remove all usages of mutable() in your code');\n    return v;\n};\n/**\n * @internal\n * @deprecated Remove it, not needed anymore\n */\nexport const _useMutableProps = () => { };\nexport const isConnected = (sub) => {\n    if (isQwikElement(sub)) {\n        return !!tryGetContext(sub) || sub.isConnected;\n    }\n    else {\n        return isConnected(sub.$el$);\n    }\n};\n/**\n * @alpha\n */\nexport const unwrapProxy = (proxy) => {\n    return isObject(proxy) ? getProxyTarget(proxy) ?? proxy : proxy;\n};\nexport const getProxyTarget = (obj) => {\n    return obj[QOjectTargetSymbol];\n};\nexport const getProxyManager = (obj) => {\n    return obj[QObjectManagerSymbol];\n};\nexport const getProxyFlags = (obj) => {\n    return obj[QObjectFlagsSymbol];\n};\nexport const serializeSubscription = (sub, getObjId) => {\n    const type = sub[0];\n    const host = getObjId(sub[1]);\n    if (!host) {\n        return undefined;\n    }\n    let base = type + ' ' + host;\n    if (sub[0] === 0) {\n        if (sub[2]) {\n            base += ' ' + sub[2];\n        }\n    }\n    else {\n        const nodeID = typeof sub[3] === 'string' ? sub[3] : must(getObjId(sub[3]));\n        base += ` ${must(getObjId(sub[2]))} ${nodeID} ${sub[4]}`;\n        if (sub[5]) {\n            base += ` ${sub[5]}`;\n        }\n    }\n    return base;\n};\nexport const parseSubscription = (sub, getObject) => {\n    const parts = sub.split(' ');\n    const type = parseInt(parts[0], 10);\n    assertTrue(parts.length >= 2, 'At least 2 parts');\n    const subscription = [type, getObject(parts[1])];\n    if (type === 0) {\n        assertTrue(parts.length <= 3, 'Max 3 parts');\n        subscription.push(parts[2]);\n    }\n    else {\n        assertTrue(parts.length === 5 || parts.length === 6, 'Max 5 parts');\n        subscription.push(getObject(parts[2]), getObject(parts[3]), parts[4], parts[5]);\n    }\n    return subscription;\n};\nexport const createSubscriptionManager = (containerState) => {\n    const groupToManagers = new Map();\n    const manager = {\n        $createManager$: (initialMap) => {\n            return new LocalSubscriptionManager(groupToManagers, containerState, initialMap);\n        },\n        $clearSub$: (group) => {\n            const managers = groupToManagers.get(group);\n            if (managers) {\n                for (const manager of managers) {\n                    manager.$unsubGroup$(group);\n                }\n                groupToManagers.delete(group);\n                managers.length = 0;\n            }\n        },\n    };\n    seal(manager);\n    return manager;\n};\nexport class LocalSubscriptionManager {\n    constructor($groupToManagers$, $containerState$, initialMap) {\n        this.$groupToManagers$ = $groupToManagers$;\n        this.$containerState$ = $containerState$;\n        this.$subs$ = [];\n        if (initialMap) {\n            this.$addSubs$(initialMap);\n        }\n        seal(this);\n    }\n    $addSubs$(subs) {\n        this.$subs$.push(...subs);\n        for (const sub of this.$subs$) {\n            this.$addToGroup$(sub[1], this);\n        }\n    }\n    $addToGroup$(group, manager) {\n        let managers = this.$groupToManagers$.get(group);\n        if (!managers) {\n            this.$groupToManagers$.set(group, (managers = []));\n        }\n        if (!managers.includes(manager)) {\n            managers.push(manager);\n        }\n    }\n    $unsubGroup$(group) {\n        const subs = this.$subs$;\n        for (let i = 0; i < subs.length; i++) {\n            const found = subs[i][1] === group;\n            if (found) {\n                subs.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    $addSub$(sub) {\n        const subs = this.$subs$;\n        const group = sub[1];\n        const key = sub[sub.length - 1];\n        if (subs.some(([_type, _group, _key]) => _type === 0 && _group === group && _key === key)) {\n            return;\n        }\n        subs.push(sub);\n        this.$addToGroup$(group, this);\n    }\n    $notifySubs$(key) {\n        const subs = this.$subs$;\n        for (const sub of subs) {\n            const compare = sub[sub.length - 1];\n            if (key && compare && compare !== key) {\n                continue;\n            }\n            notifyChange(sub, this.$containerState$);\n        }\n    }\n}\nconst must = (a) => {\n    if (a == null) {\n        throw logError('must be non null', a);\n    }\n    return a;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_qrlIsNotFunction, QError_qrlMissingChunk, QError_qrlMissingContainer, } from '../error/error';\nimport { getPlatform, isServer } from '../platform/platform';\nimport { verifySerializable } from '../state/common';\nimport { newInvokeContext, invoke, newInvokeContextFromTuple, } from '../use/use-core';\nimport { then } from '../util/promises';\nimport { qDev, qTest, seal } from '../util/qdev';\nimport { isArray, isFunction } from '../util/types';\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\nexport const createQRL = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {\n    if (qDev) {\n        verifySerializable(captureRef);\n    }\n    let _containerEl;\n    const setContainer = (el) => {\n        if (!_containerEl) {\n            _containerEl = el;\n        }\n    };\n    const resolve = async (containerEl) => {\n        if (containerEl) {\n            setContainer(containerEl);\n        }\n        if (symbolRef !== null) {\n            return symbolRef;\n        }\n        if (symbolFn !== null) {\n            return (symbolRef = symbolFn().then((module) => (symbolRef = module[symbol])));\n        }\n        else {\n            if (!chunk) {\n                throw qError(QError_qrlMissingChunk, symbol);\n            }\n            if (!_containerEl) {\n                throw qError(QError_qrlMissingContainer, chunk, symbol);\n            }\n            const symbol2 = getPlatform().importSymbol(_containerEl, chunk, symbol);\n            return (symbolRef = then(symbol2, (ref) => {\n                return (symbolRef = ref);\n            }));\n        }\n    };\n    const resolveLazy = (containerEl) => {\n        return symbolRef !== null ? symbolRef : resolve(containerEl);\n    };\n    const invokeFn = (currentCtx, beforeFn) => {\n        return ((...args) => {\n            const start = now();\n            const fn = resolveLazy();\n            return then(fn, (fn) => {\n                if (isFunction(fn)) {\n                    if (beforeFn && beforeFn() === false) {\n                        return;\n                    }\n                    const baseContext = createInvokationContext(currentCtx);\n                    const context = {\n                        ...baseContext,\n                        $qrl$: QRL,\n                    };\n                    emitUsedSymbol(symbol, context.$element$, start);\n                    return invoke(context, fn, ...args);\n                }\n                throw qError(QError_qrlIsNotFunction);\n            });\n        });\n    };\n    const createInvokationContext = (invoke) => {\n        if (invoke == null) {\n            return newInvokeContext();\n        }\n        else if (isArray(invoke)) {\n            return newInvokeContextFromTuple(invoke);\n        }\n        else {\n            return invoke;\n        }\n    };\n    const invokeQRL = async function (...args) {\n        const fn = invokeFn();\n        const result = await fn(...args);\n        return result;\n    };\n    const resolvedSymbol = refSymbol ?? symbol;\n    const hash = getSymbolHash(resolvedSymbol);\n    const QRL = invokeQRL;\n    const methods = {\n        getSymbol: () => resolvedSymbol,\n        getHash: () => hash,\n        resolve,\n        $resolveLazy$: resolveLazy,\n        $setContainer$: setContainer,\n        $chunk$: chunk,\n        $symbol$: symbol,\n        $refSymbol$: refSymbol,\n        $hash$: hash,\n        getFn: invokeFn,\n        $capture$: capture,\n        $captureRef$: captureRef,\n        $dev$: null,\n    };\n    const qrl = Object.assign(invokeQRL, methods);\n    seal(qrl);\n    return qrl;\n};\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport function assertQrl(qrl) {\n    if (qDev) {\n        if (!isQrl(qrl)) {\n            throw new Error('Not a QRL');\n        }\n    }\n}\nexport const emitUsedSymbol = (symbol, element, reqTime) => {\n    emitEvent('qsymbol', {\n        symbol,\n        element,\n        reqTime,\n    });\n};\nexport const emitEvent = (eventName, detail) => {\n    if (!qTest && !isServer() && typeof document === 'object') {\n        document.dispatchEvent(new CustomEvent(eventName, {\n            bubbles: false,\n            detail,\n        }));\n    }\n};\nconst now = () => {\n    if (qTest || isServer()) {\n        return 0;\n    }\n    if (typeof performance === 'object') {\n        return performance.now();\n    }\n    return 0;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qRuntimeQrl } from '../util/qdev';\nimport { createQRL } from './qrl-class';\nlet runtimeSymbolId = 0;\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example, `$(...)` is used to capture the callback function of `onmousemove` into a\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $((event) => console.log('mousemove', event))\n * );\n * ```\n *\n * In this code, the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function, then all lexically captured values must be:\n *    - importable (vars show up in `import`s or `export`s)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n * import { importedFn } from './import/example';\n * import { createContext, useContext, useContextProvider } from './use/use-context';\n * import { useRef } from './use/use-ref';\n * import { Resource, useResource$ } from './use/use-resource';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(importedFn); // importedFn is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => importedFn()); // importedFn is importable\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n */\n// </docs>\nexport const $ = (expression) => {\n    if (!qRuntimeQrl) {\n        throw new Error('Optimizer should replace all usages of $() with some special syntax. If you need to create a QRL manually, use inlinedQrl() instead.');\n    }\n    return createQRL(null, 's' + runtimeSymbolId++, expression, null, null, null, null);\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../qrl/qrl.public';\nimport { OnRenderProp, QSlot } from '../util/markers';\nimport { jsx } from '../render/jsx/jsx-runtime';\nimport { SERIALIZABLE_STATE } from '../container/serializers';\nimport { qDev, qTest } from '../util/qdev';\nimport { Virtual } from '../render/jsx/utils.public';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { invoke, newInvokeContext } from '../use/use-core';\nimport { verifySerializable } from '../state/common';\n// const ELEMENTS_SKIP_KEY: JSXTagName[] = ['html', 'body', 'head'];\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (componentQrl) => {\n    // Return a QComponent Factory function.\n    function QwikComponent(props, key) {\n        assertQrl(componentQrl);\n        if (qDev) {\n            invoke(newInvokeContext(), () => {\n                for (const key of Object.keys(props)) {\n                    if (key !== 'children') {\n                        verifySerializable(props[key]);\n                    }\n                }\n            });\n        }\n        const hash = qTest ? 'sX' : componentQrl.$hash$;\n        const finalKey = hash + ':' + (key ? key : '');\n        return jsx(Virtual, {\n            [OnRenderProp]: componentQrl,\n            [QSlot]: props[QSlot],\n            children: props.children,\n            props,\n        }, finalKey);\n    }\n    QwikComponent[SERIALIZABLE_STATE] = [componentQrl];\n    return QwikComponent;\n};\nexport const isQwikComponent = (component) => {\n    return typeof component == 'function' && component[SERIALIZABLE_STATE] !== undefined;\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount) => {\n    return componentQrl($(onMount));\n};\n//# sourceMappingURL=data:application/json;base64,","/* eslint-disable */\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { JSXNodeImpl } from './jsx-runtime';\nimport { isArray } from '../../util/types';\nexport const flattenArray = (array, dst) => {\n    // Yes this function is just Array.flat, but we need to run on old versions of Node.\n    if (!dst)\n        dst = [];\n    for (const item of array) {\n        if (isArray(item)) {\n            flattenArray(item, dst);\n        }\n        else {\n            dst.push(item);\n        }\n    }\n    return dst;\n};\n/**\n * @public\n */\nexport function h(type, props, ...children) {\n    // Using legacy h() jsx transform and morphing it\n    // so it can use the modern vdom structure\n    // https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\n    // https://www.typescriptlang.org/tsconfig#jsxImportSource\n    const normalizedProps = {\n        children: arguments.length > 2 ? flattenArray(children) : EMPTY_ARRAY,\n    };\n    let key;\n    let i;\n    for (i in props) {\n        if (i == 'key')\n            key = props[i];\n        else\n            normalizedProps[i] = props[i];\n    }\n    return new JSXNodeImpl(type, normalizedProps, key);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvanN4L2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBSSxLQUFrQixFQUFFLEdBQVMsRUFBTyxFQUFFO0lBQ3BFLG9GQUFvRjtJQUNwRixJQUFJLENBQUMsR0FBRztRQUFFLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDbkIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN6QjthQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQjtLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sVUFBVSxDQUFDLENBQ2YsSUFBVSxFQUNWLEtBQW1CLEVBQ25CLEdBQUcsUUFBZTtJQUVsQixpREFBaUQ7SUFDakQsMENBQTBDO0lBQzFDLDZFQUE2RTtJQUM3RSwwREFBMEQ7SUFFMUQsTUFBTSxlQUFlLEdBQVE7UUFDM0IsUUFBUSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVc7S0FDdEUsQ0FBQztJQUVGLElBQUksR0FBUSxDQUFDO0lBQ2IsSUFBSSxDQUFNLENBQUM7SUFFWCxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDZixJQUFJLENBQUMsSUFBSSxLQUFLO1lBQUUsR0FBRyxHQUFJLEtBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1lBQ25ELGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBSSxLQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgRU1QVFlfQVJSQVkgfSBmcm9tICcuLi8uLi91dGlsL2ZseXdlaWdodCc7XG5pbXBvcnQgeyBKU1hOb2RlSW1wbCB9IGZyb20gJy4vanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBRd2lrSlNYIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpayc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlIH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBmbGF0dGVuQXJyYXkgPSA8VD4oYXJyYXk6IChUIHwgVFtdKVtdLCBkc3Q/OiBUW10pOiBUW10gPT4ge1xuICAvLyBZZXMgdGhpcyBmdW5jdGlvbiBpcyBqdXN0IEFycmF5LmZsYXQsIGJ1dCB3ZSBuZWVkIHRvIHJ1biBvbiBvbGQgdmVyc2lvbnMgb2YgTm9kZS5cbiAgaWYgKCFkc3QpIGRzdCA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyYXkpIHtcbiAgICBpZiAoaXNBcnJheShpdGVtKSkge1xuICAgICAgZmxhdHRlbkFycmF5KGl0ZW0sIGRzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHN0O1xufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoPFRZUEUgZXh0ZW5kcyBzdHJpbmcgfCBGdW5jdGlvbkNvbXBvbmVudDxQUk9QUz4sIFBST1BTIGV4dGVuZHMge30gPSB7fT4oXG4gIHR5cGU6IFRZUEUsXG4gIHByb3BzOiBQUk9QUyB8IG51bGwsXG4gIC4uLmNoaWxkcmVuOiBhbnlbXVxuKTogSlNYTm9kZTxUWVBFPiB7XG4gIC8vIFVzaW5nIGxlZ2FjeSBoKCkganN4IHRyYW5zZm9ybSBhbmQgbW9ycGhpbmcgaXRcbiAgLy8gc28gaXQgY2FuIHVzZSB0aGUgbW9kZXJuIHZkb20gc3RydWN0dXJlXG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvYmxvZy8yMDIwLzA5LzIyL2ludHJvZHVjaW5nLXRoZS1uZXctanN4LXRyYW5zZm9ybS5odG1sXG4gIC8vIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy90c2NvbmZpZyNqc3hJbXBvcnRTb3VyY2VcblxuICBjb25zdCBub3JtYWxpemVkUHJvcHM6IGFueSA9IHtcbiAgICBjaGlsZHJlbjogYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBmbGF0dGVuQXJyYXkoY2hpbGRyZW4pIDogRU1QVFlfQVJSQVksXG4gIH07XG5cbiAgbGV0IGtleTogYW55O1xuICBsZXQgaTogYW55O1xuXG4gIGZvciAoaSBpbiBwcm9wcykge1xuICAgIGlmIChpID09ICdrZXknKSBrZXkgPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gICAgZWxzZSBub3JtYWxpemVkUHJvcHNbaV0gPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gIH1cblxuICByZXR1cm4gbmV3IEpTWE5vZGVJbXBsKHR5cGUsIG5vcm1hbGl6ZWRQcm9wcywga2V5KTtcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBoIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogYW55KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBOb2RlLCBkYXRhOiBhbnkpOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHR5cGU6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGNoaWxkcmVuOiBBcnJheTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGRhdGE6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaChcbiAgICB0eXBlOiBhbnksXG4gICAgZGF0YTogYW55LFxuICAgIGNoaWxkcmVuOiBBcnJheTxKU1hOb2RlPGFueT4gfCB1bmRlZmluZWQgfCBudWxsPlxuICApOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHNlbDogYW55LCBkYXRhOiBhbnkgfCBudWxsLCBjaGlsZHJlbjogSlNYTm9kZTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuXG4gIGV4cG9ydCBuYW1lc3BhY2UgSlNYIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnQgZXh0ZW5kcyBRd2lrSlNYLkVsZW1lbnQge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0F0dHJpYnV0ZXMgZXh0ZW5kcyBRd2lrSlNYLkludHJpbnNpY0F0dHJpYnV0ZXMge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIGV4dGVuZHMgUXdpa0pTWC5JbnRyaW5zaWNFbGVtZW50cyB7fVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudENoaWxkcmVuQXR0cmlidXRlIHtcbiAgICAgIGNoaWxkcmVuPzogYW55O1xuICAgIH1cbiAgfVxufVxuIl19","import { QSlotS } from '../../util/markers';\nimport { Virtual } from './utils.public';\nimport { jsx } from './jsx-runtime';\n/**\n * Allows to project the children of the current component. <Slot/> can only be used within the context of a component defined with `component$`.\n *\n * @public\n */\nexport const Slot = (props) => {\n    const name = props.name ?? '';\n    return jsx(Virtual, {\n        [QSlotS]: '',\n    }, name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHcEM7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FFWixDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ2IsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7SUFDOUIsT0FBTyxHQUFHLENBQ1IsT0FBTyxFQUNQO1FBQ0UsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO0tBQ2IsRUFDRCxJQUFJLENBQ0wsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFFTbG90UyB9IGZyb20gJy4uLy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBWaXJ0dWFsIH0gZnJvbSAnLi91dGlscy5wdWJsaWMnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnLi9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5cbi8qKlxuICogQWxsb3dzIHRvIHByb2plY3QgdGhlIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC4gPFNsb3QvPiBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiB0aGUgY29udGV4dCBvZiBhIGNvbXBvbmVudCBkZWZpbmVkIHdpdGggYGNvbXBvbmVudCRgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFNsb3Q6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgbmFtZT86IHN0cmluZztcbn0+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBwcm9wcy5uYW1lID8/ICcnO1xuICByZXR1cm4ganN4KFxuICAgIFZpcnR1YWwsXG4gICAge1xuICAgICAgW1FTbG90U106ICcnLFxuICAgIH0sXG4gICAgbmFtZVxuICApO1xufTtcbiJdfQ==","/**\n * QWIK_VERSION\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBSSxVQUFrQixDQUFDLFlBQXNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFFXSUtfVkVSU0lPTlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IChnbG9iYWxUaGlzIGFzIGFueSkuUVdJS19WRVJTSU9OIGFzIHN0cmluZztcbiJdfQ==","import { isDocument } from '../../util/element';\nimport { isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { domToVnode, visitJsxNode } from './visitor';\nimport { getDocument } from '../../util/dom';\nimport { qDev } from '../../util/qdev';\nimport { version } from '../../version';\nimport { QContainerAttr } from '../../util/markers';\nimport { qError, QError_cannotRenderOverExistingContainer } from '../../error/error';\nimport { directSetAttribute } from '../fast-calls';\nimport { processData, wrapJSX } from './render-dom';\nimport { getContainerState } from '../../container/container';\nimport { postRendering } from './notify-render';\nimport { createRenderContext } from '../execute-component';\nimport { executeDOMRender, printRenderStats } from './operations';\nimport { logError } from '../../util/log';\nimport { appendQwikDevTools } from '../../container/resume';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means\n * it always tries to reuse what is already in the DOM (rather then destroy and\n * recreate content.)\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When\n *     possible the rendering will try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @alpha\n */\nexport const render = async (parent, jsxNode, opts) => {\n    // If input is not JSX, convert it\n    if (!isJSXNode(jsxNode)) {\n        jsxNode = jsx(jsxNode, null);\n    }\n    const doc = getDocument(parent);\n    const containerEl = getElement(parent);\n    if (qDev && containerEl.hasAttribute(QContainerAttr)) {\n        throw qError(QError_cannotRenderOverExistingContainer, containerEl);\n    }\n    // if (qDev) {\n    //   if (parent.childNodes.length > 0) {\n    //     throw new Error('Container must be empty before mounting anything inside');\n    //   }\n    // }\n    injectQContainer(containerEl);\n    const containerState = getContainerState(containerEl);\n    const envData = opts?.envData;\n    if (envData) {\n        Object.assign(containerState.$envData$, envData);\n    }\n    containerState.$hostsRendering$ = new Set();\n    containerState.$renderPromise$ = renderRoot(containerEl, jsxNode, doc, containerState, containerEl);\n    const renderCtx = await containerState.$renderPromise$;\n    await postRendering(containerState, renderCtx);\n};\nconst renderRoot = async (parent, jsxNode, doc, containerState, containerEl) => {\n    const ctx = createRenderContext(doc, containerState);\n    const staticCtx = ctx.$static$;\n    // staticCtx.$roots$.push(parent as Element);\n    try {\n        const processedNodes = await processData(jsxNode);\n        const rootJsx = domToVnode(parent);\n        await visitJsxNode(ctx, rootJsx, wrapJSX(parent, processedNodes), 0);\n    }\n    catch (err) {\n        logError(err);\n    }\n    staticCtx.$operations$.push(...staticCtx.$postOperations$);\n    executeDOMRender(staticCtx);\n    if (qDev) {\n        appendQwikDevTools(containerEl);\n        printRenderStats(staticCtx);\n    }\n    return staticCtx;\n};\nexport const getElement = (docOrElm) => {\n    return isDocument(docOrElm) ? docOrElm.documentElement : docOrElm;\n};\nexport const injectQContainer = (containerEl) => {\n    directSetAttribute(containerEl, 'q:version', version ?? 'dev');\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    directSetAttribute(containerEl, 'q:render', qDev ? 'dom-dev' : 'dom');\n};\n//# sourceMappingURL=data:application/json;base64,","import { isPromise, then } from '../../util/promises';\nimport { newInvokeContext, invoke } from '../../use/use-core';\nimport { isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { isArray, isFunction, isString } from '../../util/types';\nimport { createRenderContext, executeComponent, getNextIndex, jsxToString, stringifyStyle, } from '../execute-component';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotS, QStyle } from '../../util/markers';\nimport { InternalSSRStream, Virtual, SSRRaw } from '../jsx/utils.public';\nimport { logError, logWarn } from '../../util/log';\nimport { groupListeners, isOnProp, PREVENT_DEFAULT, setEvent } from '../../state/listeners';\nimport { version } from '../../version';\nimport { addQwikEvent, createContainerState, setRef, } from '../../container/container';\nimport { assertDefined } from '../../error/assert';\nimport { serializeSStyle } from '../../style/qrl-styles';\nimport { qDev, seal } from '../../util/qdev';\nimport { qError, QError_canNotRenderHTML } from '../../error/error';\nimport { addSignalSub, isSignal } from '../../state/signal';\nimport { serializeQRLs } from '../../qrl/qrl';\nimport { assertElement } from '../../util/element';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { getContext, HOST_FLAG_DYNAMIC, HOST_FLAG_NEED_ATTACH_LISTENER, Q_CTX, } from '../../state/context';\nimport { createProxy } from '../../state/store';\nimport { QObjectFlagsSymbol, QObjectImmutable, _IMMUTABLE, _IMMUTABLE_PREFIX, } from '../../state/constants';\nconst FLUSH_COMMENT = '<!--qkssr-f-->';\nconst IS_HEAD = 1 << 0;\nconst IS_HTML = 1 << 2;\nconst IS_TEXT = 1 << 3;\nexport const createDocument = () => {\n    const doc = { nodeType: 9 };\n    seal(doc);\n    return doc;\n};\n/**\n * @alpha\n */\nexport const renderSSR = async (node, opts) => {\n    const root = opts.containerTagName;\n    const containerEl = createContext(1).$element$;\n    const containerState = createContainerState(containerEl);\n    const doc = createDocument();\n    const rCtx = createRenderContext(doc, containerState);\n    const headNodes = opts.beforeContent ?? [];\n    const ssrCtx = {\n        rCtx,\n        $contexts$: [],\n        projectedChildren: undefined,\n        projectedContext: undefined,\n        hostCtx: null,\n        invocationContext: undefined,\n        headNodes: root === 'html' ? headNodes : [],\n        $pendingListeners$: [],\n    };\n    const containerAttributes = {\n        ...opts.containerAttributes,\n        'q:container': 'paused',\n        'q:version': version ?? 'dev',\n        'q:render': qDev ? 'ssr-dev' : 'ssr',\n        'q:base': opts.base,\n        children: root === 'html' ? [node] : [headNodes, node],\n    };\n    containerState.$envData$ = {\n        url: opts.url,\n        ...opts.envData,\n    };\n    node = jsx(root, containerAttributes);\n    containerState.$hostsRendering$ = new Set();\n    containerState.$renderPromise$ = Promise.resolve().then(() => renderRoot(node, ssrCtx, opts.stream, containerState, opts));\n    await containerState.$renderPromise$;\n};\nexport const renderRoot = async (node, ssrCtx, stream, containerState, opts) => {\n    const beforeClose = opts.beforeClose;\n    await renderNode(node, ssrCtx, stream, 0, beforeClose\n        ? (stream) => {\n            const result = beforeClose(ssrCtx.$contexts$, containerState);\n            return processData(result, ssrCtx, stream, 0, undefined);\n        }\n        : undefined);\n    if (qDev) {\n        if (ssrCtx.headNodes.length > 0) {\n            logError('Missing <head>. Global styles could not be rendered. Please render a <head> element at the root of the app');\n        }\n    }\n    return ssrCtx.rCtx.$static$;\n};\nexport const renderGenerator = async (node, ssrCtx, stream, flags) => {\n    stream.write(FLUSH_COMMENT);\n    const generator = node.props.children;\n    let value;\n    if (isFunction(generator)) {\n        const v = generator({\n            write(chunk) {\n                stream.write(chunk);\n                stream.write(FLUSH_COMMENT);\n            },\n        });\n        if (isPromise(v)) {\n            return v;\n        }\n        value = v;\n    }\n    else {\n        value = generator;\n    }\n    for await (const chunk of value) {\n        await processData(chunk, ssrCtx, stream, flags, undefined);\n        stream.write(FLUSH_COMMENT);\n    }\n};\nexport const renderNodeVirtual = (node, elCtx, extraNodes, ssrCtx, stream, flags, beforeClose) => {\n    const props = node.props;\n    const renderQrl = props[OnRenderProp];\n    if (renderQrl) {\n        elCtx.$componentQrl$ = renderQrl;\n        return renderSSRComponent(ssrCtx, stream, elCtx, node, flags, beforeClose);\n    }\n    let virtualComment = '<!--qv' + renderVirtualAttributes(props);\n    const isSlot = QSlotS in props;\n    const key = node.key != null ? String(node.key) : null;\n    if (isSlot) {\n        assertDefined(ssrCtx.hostCtx?.$id$, 'hostId must be defined for a slot');\n        virtualComment += ' q:sref=' + ssrCtx.hostCtx.$id$;\n    }\n    if (key != null) {\n        virtualComment += ' q:key=' + key;\n    }\n    virtualComment += '-->';\n    stream.write(virtualComment);\n    if (extraNodes) {\n        for (const node of extraNodes) {\n            renderNodeElementSync(node.type, node.props, stream);\n        }\n    }\n    const promise = walkChildren(props.children, ssrCtx, stream, flags);\n    return then(promise, () => {\n        // Fast path\n        if (!isSlot && !beforeClose) {\n            stream.write(CLOSE_VIRTUAL);\n            return;\n        }\n        let promise;\n        if (isSlot) {\n            assertDefined(key, 'key must be defined for a slot');\n            const content = ssrCtx.projectedChildren?.[key];\n            if (content) {\n                ssrCtx.projectedChildren[key] = undefined;\n                promise = processData(content, ssrCtx.projectedContext, stream, flags);\n            }\n        }\n        // Inject before close\n        if (beforeClose) {\n            promise = then(promise, () => beforeClose(stream));\n        }\n        return then(promise, () => {\n            stream.write(CLOSE_VIRTUAL);\n        });\n    });\n};\nconst CLOSE_VIRTUAL = `<!--/qv-->`;\nexport const renderAttributes = (attributes) => {\n    let text = '';\n    for (const prop of Object.keys(attributes)) {\n        if (prop === 'dangerouslySetInnerHTML') {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=\"' + value + '\"');\n        }\n    }\n    return text;\n};\nexport const renderVirtualAttributes = (attributes) => {\n    let text = '';\n    for (const prop of Object.keys(attributes)) {\n        if (prop === 'children') {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=' + value + '');\n        }\n    }\n    return text;\n};\nexport const renderNodeElementSync = (tagName, attributes, stream) => {\n    stream.write('<' + tagName + renderAttributes(attributes) + '>');\n    const empty = !!emptyElements[tagName];\n    if (empty) {\n        return;\n    }\n    // Render innerHTML\n    const innerHTML = attributes.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n        stream.write(innerHTML);\n    }\n    stream.write(`</${tagName}>`);\n};\nexport const renderSSRComponent = (ssrCtx, stream, elCtx, node, flags, beforeClose) => {\n    const props = node.props;\n    setComponentProps(ssrCtx.rCtx, elCtx, props.props);\n    return then(executeComponent(ssrCtx.rCtx, elCtx), (res) => {\n        const hostElement = elCtx.$element$;\n        const newCtx = res.rCtx;\n        const invocationContext = newInvokeContext(hostElement, undefined);\n        invocationContext.$subscriber$ = hostElement;\n        invocationContext.$renderCtx$ = newCtx;\n        const projectedContext = {\n            ...ssrCtx,\n            rCtx: newCtx,\n        };\n        const newSSrContext = {\n            ...ssrCtx,\n            projectedChildren: splitProjectedChildren(props.children, ssrCtx),\n            projectedContext,\n            rCtx: newCtx,\n            invocationContext,\n        };\n        const extraNodes = [];\n        if (elCtx.$appendStyles$) {\n            const isHTML = !!(flags & IS_HTML);\n            const array = isHTML ? ssrCtx.headNodes : extraNodes;\n            for (const style of elCtx.$appendStyles$) {\n                array.push(jsx('style', {\n                    [QStyle]: style.styleId,\n                    dangerouslySetInnerHTML: style.content,\n                }));\n            }\n        }\n        const newID = getNextIndex(ssrCtx.rCtx);\n        const scopeId = elCtx.$scopeIds$ ? serializeSStyle(elCtx.$scopeIds$) : undefined;\n        const processedNode = jsx(node.type, {\n            [QScopedStyle]: scopeId,\n            [ELEMENT_ID]: newID,\n            children: res.node,\n        }, node.key);\n        elCtx.$id$ = newID;\n        ssrCtx.$contexts$.push(elCtx);\n        newSSrContext.hostCtx = elCtx;\n        return renderNodeVirtual(processedNode, elCtx, extraNodes, newSSrContext, stream, flags, (stream) => {\n            if (elCtx.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                logWarn('Component registered some events, some component use useStyles$()');\n            }\n            if (beforeClose) {\n                return then(renderQTemplates(newSSrContext, stream), () => beforeClose(stream));\n            }\n            else {\n                return renderQTemplates(newSSrContext, stream);\n            }\n        });\n    });\n};\nconst renderQTemplates = (ssrContext, stream) => {\n    const projectedChildren = ssrContext.projectedChildren;\n    if (projectedChildren) {\n        const nodes = Object.keys(projectedChildren).map((slotName) => {\n            const value = projectedChildren[slotName];\n            if (value) {\n                return jsx('q:template', {\n                    [QSlot]: slotName,\n                    hidden: '',\n                    'aria-hidden': 'true',\n                    children: value,\n                });\n            }\n        });\n        return processData(nodes, ssrContext, stream, 0, undefined);\n    }\n};\nconst splitProjectedChildren = (children, ssrCtx) => {\n    const flatChildren = flatVirtualChildren(children, ssrCtx);\n    if (flatChildren === null) {\n        return undefined;\n    }\n    const slotMap = {};\n    for (const child of flatChildren) {\n        let slotName = '';\n        if (isJSXNode(child)) {\n            slotName = child.props[QSlot] ?? '';\n        }\n        let array = slotMap[slotName];\n        if (!array) {\n            slotMap[slotName] = array = [];\n        }\n        array.push(child);\n    }\n    return slotMap;\n};\nexport const createContext = (nodeType) => {\n    const elm = {\n        nodeType,\n        [Q_CTX]: null,\n    };\n    seal(elm);\n    return getContext(elm);\n};\nexport const renderNode = (node, ssrCtx, stream, flags, beforeClose) => {\n    const tagName = node.type;\n    const hostCtx = ssrCtx.hostCtx;\n    if (hostCtx && hasDynamicChildren(node)) {\n        hostCtx.$flags$ |= HOST_FLAG_DYNAMIC;\n    }\n    if (typeof tagName === 'string') {\n        const key = node.key;\n        const props = node.props;\n        const immutableMeta = props[_IMMUTABLE] ?? EMPTY_OBJ;\n        const elCtx = createContext(1);\n        const elm = elCtx.$element$;\n        const isHead = tagName === 'head';\n        let openingElement = '<' + tagName;\n        let useSignal = false;\n        assertElement(elm);\n        for (const prop of Object.keys(props)) {\n            if (prop === 'children' ||\n                prop === 'key' ||\n                prop === 'class' ||\n                prop === 'className' ||\n                prop === 'dangerouslySetInnerHTML') {\n                continue;\n            }\n            if (prop === 'ref') {\n                setRef(props[prop], elm);\n                continue;\n            }\n            let value = isSignal(immutableMeta[prop]) ? immutableMeta[prop] : props[prop];\n            if (isOnProp(prop)) {\n                setEvent(elCtx.li, prop, value, undefined);\n                continue;\n            }\n            const attrName = processPropKey(prop);\n            if (isSignal(value)) {\n                if (hostCtx) {\n                    const hostEl = hostCtx.$element$;\n                    addSignalSub(1, hostEl, value, elm, attrName);\n                    useSignal = true;\n                }\n                value = value.value;\n            }\n            if (prop.startsWith(PREVENT_DEFAULT)) {\n                addQwikEvent(prop.slice(PREVENT_DEFAULT.length), ssrCtx.rCtx.$static$.$containerState$);\n            }\n            const attrValue = processPropValue(attrName, value);\n            if (attrValue != null) {\n                openingElement +=\n                    ' ' + (value === '' ? attrName : attrName + '=\"' + escapeAttr(attrValue) + '\"');\n            }\n        }\n        const listeners = elCtx.li;\n        const classValue = props.class ?? props.className;\n        let classStr = stringifyClass(classValue);\n        if (hostCtx) {\n            if (qDev) {\n                if (tagName === 'html') {\n                    throw qError(QError_canNotRenderHTML);\n                }\n            }\n            if (hostCtx.$scopeIds$) {\n                classStr = hostCtx.$scopeIds$.join(' ') + ' ' + classStr;\n            }\n            if (hostCtx.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                listeners.push(...hostCtx.li);\n                hostCtx.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n            }\n        }\n        // Reset HOST flags\n        if (isHead) {\n            flags |= IS_HEAD;\n        }\n        if (textOnlyElements[tagName]) {\n            flags |= IS_TEXT;\n        }\n        classStr = classStr.trim();\n        if (classStr) {\n            openingElement += ' class=\"' + classStr + '\"';\n        }\n        if (listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            for (const listener of groups) {\n                openingElement += ' ' + listener[0] + '=\"' + serializeQRLs(listener[1], elCtx) + '\"';\n                addQwikEvent(listener[0], ssrCtx.rCtx.$static$.$containerState$);\n            }\n        }\n        if (key != null) {\n            openingElement += ' q:key=\"' + key + '\"';\n        }\n        if ('ref' in props || listeners.length > 0 || useSignal) {\n            const newID = getNextIndex(ssrCtx.rCtx);\n            openingElement += ' q:id=\"' + newID + '\"';\n            elCtx.$id$ = newID;\n            ssrCtx.$contexts$.push(elCtx);\n        }\n        if (flags & IS_HEAD) {\n            openingElement += ' q:head';\n        }\n        openingElement += '>';\n        stream.write(openingElement);\n        if (emptyElements[tagName]) {\n            return;\n        }\n        const innerHTML = props.dangerouslySetInnerHTML;\n        if (innerHTML != null) {\n            stream.write(String(innerHTML));\n            stream.write(`</${tagName}>`);\n            return;\n        }\n        if (!isHead) {\n            flags &= ~IS_HEAD;\n        }\n        if (tagName === 'html') {\n            flags |= IS_HTML;\n        }\n        else {\n            flags &= ~IS_HTML;\n        }\n        const promise = processData(props.children, ssrCtx, stream, flags);\n        return then(promise, () => {\n            // If head inject base styles\n            if (isHead) {\n                for (const node of ssrCtx.headNodes) {\n                    renderNodeElementSync(node.type, node.props, stream);\n                }\n                ssrCtx.headNodes.length = 0;\n            }\n            // Fast path\n            if (!beforeClose) {\n                stream.write(`</${tagName}>`);\n                return;\n            }\n            // Inject before close\n            return then(beforeClose(stream), () => {\n                stream.write(`</${tagName}>`);\n            });\n        });\n    }\n    if (tagName === Virtual) {\n        const elCtx = createContext(111);\n        elCtx.$parent$ = ssrCtx.hostCtx;\n        return renderNodeVirtual(node, elCtx, undefined, ssrCtx, stream, flags, beforeClose);\n    }\n    if (tagName === SSRRaw) {\n        stream.write(node.props.data);\n        return;\n    }\n    if (tagName === InternalSSRStream) {\n        return renderGenerator(node, ssrCtx, stream, flags);\n    }\n    const res = invoke(ssrCtx.invocationContext, tagName, node.props, node.key);\n    return processData(res, ssrCtx, stream, flags, beforeClose);\n};\nexport const processData = (node, ssrCtx, stream, flags, beforeClose) => {\n    if (node == null || typeof node === 'boolean') {\n        return;\n    }\n    if (isString(node) || typeof node === 'number') {\n        stream.write(escapeHtml(String(node)));\n    }\n    else if (isJSXNode(node)) {\n        return renderNode(node, ssrCtx, stream, flags, beforeClose);\n    }\n    else if (isArray(node)) {\n        return walkChildren(node, ssrCtx, stream, flags);\n    }\n    else if (isSignal(node)) {\n        const insideText = flags & IS_TEXT;\n        const hostEl = ssrCtx.hostCtx?.$element$;\n        let value;\n        if (hostEl) {\n            if (!insideText) {\n                value = node.value;\n                const id = getNextIndex(ssrCtx.rCtx);\n                addSignalSub(2, hostEl, node, '#' + id, 'data');\n                stream.write(`<!--t=${id}-->${escapeHtml(jsxToString(value))}<!---->`);\n                return;\n            }\n            else {\n                value = invoke(ssrCtx.invocationContext, () => node.value);\n            }\n        }\n        stream.write(escapeHtml(jsxToString(value)));\n        return;\n    }\n    else if (isPromise(node)) {\n        stream.write(FLUSH_COMMENT);\n        return node.then((node) => processData(node, ssrCtx, stream, flags, beforeClose));\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n    }\n};\nfunction walkChildren(children, ssrContext, stream, flags) {\n    if (children == null) {\n        return;\n    }\n    if (!isArray(children)) {\n        return processData(children, ssrContext, stream, flags);\n    }\n    if (children.length === 1) {\n        return processData(children[0], ssrContext, stream, flags);\n    }\n    if (children.length === 0) {\n        return;\n    }\n    let currentIndex = 0;\n    const buffers = [];\n    return children.reduce((prevPromise, child, index) => {\n        const buffer = [];\n        buffers.push(buffer);\n        const localStream = prevPromise\n            ? {\n                write(chunk) {\n                    if (currentIndex === index) {\n                        stream.write(chunk);\n                    }\n                    else {\n                        buffer.push(chunk);\n                    }\n                },\n            }\n            : stream;\n        const rendered = processData(child, ssrContext, localStream, flags);\n        const next = () => {\n            currentIndex++;\n            if (buffers.length > currentIndex) {\n                buffers[currentIndex].forEach((chunk) => stream.write(chunk));\n            }\n        };\n        if (isPromise(rendered) && prevPromise) {\n            return Promise.all([rendered, prevPromise]).then(next);\n        }\n        else if (isPromise(rendered)) {\n            return rendered.then(next);\n        }\n        else if (prevPromise) {\n            return prevPromise.then(next);\n        }\n        else {\n            currentIndex++;\n            return undefined;\n        }\n    }, undefined);\n}\nexport const flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    const result = _flatVirtualChildren(children, ssrCtx);\n    const nodes = isArray(result) ? result : [result];\n    if (nodes.length === 0) {\n        return null;\n    }\n    return nodes;\n};\nexport const stringifyClass = (str) => {\n    if (!str) {\n        return '';\n    }\n    if (typeof str === 'string') {\n        return str;\n    }\n    if (Array.isArray(str)) {\n        return str.join(' ');\n    }\n    const output = [];\n    for (const key in str) {\n        if (Object.prototype.hasOwnProperty.call(str, key)) {\n            const value = str[key];\n            if (value) {\n                output.push(key);\n            }\n        }\n    }\n    return output.join(' ');\n};\nexport const _flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    if (isArray(children)) {\n        return children.flatMap((c) => _flatVirtualChildren(c, ssrCtx));\n    }\n    else if (isJSXNode(children) &&\n        isFunction(children.type) &&\n        children.type !== SSRRaw &&\n        children.type !== InternalSSRStream &&\n        children.type !== Virtual) {\n        const res = invoke(ssrCtx.invocationContext, children.type, children.props, children.key);\n        return flatVirtualChildren(res, ssrCtx);\n    }\n    return children;\n};\nconst setComponentProps = (rCtx, elCtx, expectProps) => {\n    const keys = Object.keys(expectProps);\n    const target = {\n        [QObjectFlagsSymbol]: QObjectImmutable,\n    };\n    elCtx.$props$ = createProxy(target, rCtx.$static$.$containerState$);\n    if (keys.length === 0) {\n        return;\n    }\n    const immutableMeta = (target[_IMMUTABLE] =\n        expectProps[_IMMUTABLE] ?? EMPTY_OBJ);\n    for (const prop of keys) {\n        if (prop === 'children' || prop === QSlot) {\n            continue;\n        }\n        if (isSignal(immutableMeta[prop])) {\n            target[_IMMUTABLE_PREFIX + prop] = immutableMeta[prop];\n        }\n        else {\n            target[prop] = expectProps[prop];\n        }\n    }\n};\nfunction processPropKey(prop) {\n    if (prop === 'htmlFor') {\n        return 'for';\n    }\n    return prop;\n}\nfunction processPropValue(prop, value) {\n    if (prop === 'style') {\n        return stringifyStyle(value);\n    }\n    if (value === false || value == null) {\n        return null;\n    }\n    if (value === true) {\n        return '';\n    }\n    return String(value);\n}\nconst textOnlyElements = {\n    title: true,\n    style: true,\n    script: true,\n    noframes: true,\n    noscript: true,\n};\nconst emptyElements = {\n    area: true,\n    base: true,\n    basefont: true,\n    bgsound: true,\n    br: true,\n    col: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n};\nconst ESCAPE_HTML = /[&<>]/g;\nconst ESCAPE_ATTRIBUTES = /[&\"]/g;\nexport const escapeHtml = (s) => {\n    return s.replace(ESCAPE_HTML, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '<':\n                return '&lt;';\n            case '>':\n                return '&gt;';\n            default:\n                return '';\n        }\n    });\n};\nexport const escapeAttr = (s) => {\n    return s.replace(ESCAPE_ATTRIBUTES, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '\"':\n                return '&quot;';\n            default:\n                return '';\n        }\n    });\n};\nexport const joinClasses = (styles, existing) => {\n    return styles.join(' ') + existing;\n};\nconst hasDynamicChildren = (node) => {\n    return node.props[_IMMUTABLE]?.children === false;\n};\n//# sourceMappingURL=data:application/json;base64,","import { QObjectRecursive } from '../state/constants';\nimport { getOrCreateProxy } from '../state/store';\nimport { isFunction } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates an object that Qwik can track across serializations.\n *\n * Use `useStore` to create a state for your application. The returned object is a proxy that has\n * a unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ### Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of the count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <div>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </div>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    const value = isFunction(initialState) ? initialState() : initialState;\n    if (opts?.reactive === false) {\n        set(value);\n        return value;\n    }\n    else {\n        const containerState = ctx.$renderCtx$.$static$.$containerState$;\n        const recursive = opts?.recursive ?? false;\n        const flags = recursive ? QObjectRecursive : 0;\n        const newStore = getOrCreateProxy(value, containerState, flags);\n        set(newStore);\n        return newStore;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0b3JlLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0b3JlLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBVTVELDBDQUEwQztBQUMxQyx5Q0FBeUM7QUFDekMsdUNBQXVDO0FBQ3ZDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMERHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixZQUFtQyxFQUNuQyxJQUFzQixFQUNmLEVBQUU7SUFDVCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxrQkFBa0IsRUFBUyxDQUFDO0lBQ3RELElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtRQUNmLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFDRCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFFLFlBQXlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQ3JGLElBQUksSUFBSSxFQUFFLFFBQVEsS0FBSyxLQUFLLEVBQUU7UUFDNUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ1gsT0FBTyxLQUFLLENBQUM7S0FDZDtTQUFNO1FBQ0wsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7UUFDakUsTUFBTSxTQUFTLEdBQUcsSUFBSSxFQUFFLFNBQVMsSUFBSSxLQUFLLENBQUM7UUFDM0MsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxRQUFRLENBQUM7S0FDakI7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRT2JqZWN0UmVjdXJzaXZlIH0gZnJvbSAnLi4vc3RhdGUvY29uc3RhbnRzJztcbmltcG9ydCB7IGdldE9yQ3JlYXRlUHJveHkgfSBmcm9tICcuLi9zdGF0ZS9zdG9yZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyB1c2VTZXF1ZW50aWFsU2NvcGUgfSBmcm9tICcuL3VzZS1zZXF1ZW50aWFsLXNjb3BlJztcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU3RvcmVPcHRpb25zIHtcbiAgcmVjdXJzaXZlPzogYm9vbGVhbjtcbiAgcmVhY3RpdmU/OiBib29sZWFuO1xufVxuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VTdG9yZVwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VTdG9yZSBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IFF3aWsgY2FuIHRyYWNrIGFjcm9zcyBzZXJpYWxpemF0aW9ucy5cbiAqXG4gKiBVc2UgYHVzZVN0b3JlYCB0byBjcmVhdGUgYSBzdGF0ZSBmb3IgeW91ciBhcHBsaWNhdGlvbi4gVGhlIHJldHVybmVkIG9iamVjdCBpcyBhIHByb3h5IHRoYXQgaGFzXG4gKiBhIHVuaXF1ZSBJRC4gVGhlIElEIG9mIHRoZSBvYmplY3QgaXMgdXNlZCBpbiB0aGUgYFFSTGBzIHRvIHJlZmVyIHRvIHRoZSBzdG9yZS5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIEV4YW1wbGUgc2hvd2luZyBob3cgYHVzZVN0b3JlYCBpcyB1c2VkIGluIENvdW50ZXIgZXhhbXBsZSB0byBrZWVwIHRyYWNrIG9mIHRoZSBjb3VudC5cbiAqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IFN0b3JlcyA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlQ291bnRlcigxKTtcbiAqXG4gKiAgIC8vIFJlYWN0aXZpdHkgaGFwcGVucyBldmVuIGZvciBuZXN0ZWQgb2JqZWN0cyBhbmQgYXJyYXlzXG4gKiAgIGNvbnN0IHVzZXJEYXRhID0gdXNlU3RvcmUoe1xuICogICAgIG5hbWU6ICdNYW51JyxcbiAqICAgICBhZGRyZXNzOiB7XG4gKiAgICAgICBhZGRyZXNzOiAnJyxcbiAqICAgICAgIGNpdHk6ICcnLFxuICogICAgIH0sXG4gKiAgICAgb3JnczogW10sXG4gKiAgIH0pO1xuICpcbiAqICAgLy8gdXNlU3RvcmUoKSBjYW4gYWxzbyBhY2NlcHQgYSBmdW5jdGlvbiB0byBjYWxjdWxhdGUgdGhlIGluaXRpYWwgdmFsdWVcbiAqICAgY29uc3Qgc3RhdGUgPSB1c2VTdG9yZSgoKSA9PiB7XG4gKiAgICAgcmV0dXJuIHtcbiAqICAgICAgIHZhbHVlOiBleHBlbnNpdmVJbml0aWFsVmFsdWUoKSxcbiAqICAgICB9O1xuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxkaXY+Q291bnRlcjoge2NvdW50ZXIudmFsdWV9PC9kaXY+XG4gKiAgICAgICA8Q2hpbGQgdXNlckRhdGE9e3VzZXJEYXRhfSBzdGF0ZT17c3RhdGV9IC8+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9KTtcbiAqXG4gKiBmdW5jdGlvbiB1c2VDb3VudGVyKHN0ZXA6IG51bWJlcikge1xuICogICAvLyBNdWx0aXBsZSBzdG9yZXMgY2FuIGJlIGNyZWF0ZWQgaW4gY3VzdG9tIGhvb2tzIGZvciBjb252ZW5pZW5jZSBhbmQgY29tcG9zYWJpbGl0eVxuICogICBjb25zdCBjb3VudGVyU3RvcmUgPSB1c2VTdG9yZSh7XG4gKiAgICAgdmFsdWU6IDAsXG4gKiAgIH0pO1xuICogICB1c2VDbGllbnRFZmZlY3QkKCgpID0+IHtcbiAqICAgICAvLyBPbmx5IHJ1bnMgaW4gdGhlIGNsaWVudFxuICogICAgIGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICogICAgICAgY291bnRlclN0b3JlLnZhbHVlICs9IHN0ZXA7XG4gKiAgICAgfSwgNTAwKTtcbiAqICAgICByZXR1cm4gKCkgPT4ge1xuICogICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiAgIHJldHVybiBjb3VudGVyU3RvcmU7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTdG9yZSA9IDxTVEFURSBleHRlbmRzIG9iamVjdD4oXG4gIGluaXRpYWxTdGF0ZTogU1RBVEUgfCAoKCkgPT4gU1RBVEUpLFxuICBvcHRzPzogVXNlU3RvcmVPcHRpb25zXG4pOiBTVEFURSA9PiB7XG4gIGNvbnN0IHsgZ2V0LCBzZXQsIGN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFNUQVRFPigpO1xuICBpZiAoZ2V0ICE9IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0O1xuICB9XG4gIGNvbnN0IHZhbHVlID0gaXNGdW5jdGlvbihpbml0aWFsU3RhdGUpID8gKGluaXRpYWxTdGF0ZSBhcyBGdW5jdGlvbikoKSA6IGluaXRpYWxTdGF0ZTtcbiAgaWYgKG9wdHM/LnJlYWN0aXZlID09PSBmYWxzZSkge1xuICAgIHNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gY3R4LiRyZW5kZXJDdHgkLiRzdGF0aWMkLiRjb250YWluZXJTdGF0ZSQ7XG4gICAgY29uc3QgcmVjdXJzaXZlID0gb3B0cz8ucmVjdXJzaXZlID8/IGZhbHNlO1xuICAgIGNvbnN0IGZsYWdzID0gcmVjdXJzaXZlID8gUU9iamVjdFJlY3Vyc2l2ZSA6IDA7XG4gICAgY29uc3QgbmV3U3RvcmUgPSBnZXRPckNyZWF0ZVByb3h5KHZhbHVlLCBjb250YWluZXJTdGF0ZSwgZmxhZ3MpO1xuICAgIHNldChuZXdTdG9yZSk7XG4gICAgcmV0dXJuIG5ld1N0b3JlO1xuICB9XG59O1xuIl19","import { useStore } from './use-store.public';\n// <docs markdown=\"../readme.md#useRef\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useRef instead)\n/**\n * It's a very thin wrapper around `useStore()`, including the proper type signature to be passed\n * to the `ref` property in JSX.\n *\n * ```tsx\n * export function useRef<T = Element>(current?: T): Ref<T> {\n *   return useStore({ current });\n * }\n * ```\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const input = useRef<HTMLInputElement>();\n *\n *   useClientEffect$(({ track }) => {\n *     const el = track(() => input.current)!;\n *     el.focus();\n *   });\n *\n *   return (\n *     <div>\n *       <input type=\"text\" ref={input} />\n *     </div>\n *   );\n * });\n *\n * ```\n *\n * @deprecated Use `useSignal` instead.\n * @alpha\n */\n// </docs>\nexport const useRef = (current) => {\n    return useStore({ current });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFXOUMsd0NBQXdDO0FBQ3hDLHlDQUF5QztBQUN6QyxxQ0FBcUM7QUFDckM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBZ0NHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUE4QixPQUFXLEVBQVUsRUFBRTtJQUN6RSxPQUFPLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICcuL3VzZS1zdG9yZS5wdWJsaWMnO1xuXG4vKipcbiAqIFR5cGUgb2YgdGhlIHZhbHVlIHJldHVybmVkIGJ5IGB1c2VSZWYoKWAuXG4gKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVmPFQgPSBFbGVtZW50PiB7XG4gIGN1cnJlbnQ6IFQgfCB1bmRlZmluZWQ7XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVJlZlwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VSZWYgaW5zdGVhZClcbi8qKlxuICogSXQncyBhIHZlcnkgdGhpbiB3cmFwcGVyIGFyb3VuZCBgdXNlU3RvcmUoKWAsIGluY2x1ZGluZyB0aGUgcHJvcGVyIHR5cGUgc2lnbmF0dXJlIHRvIGJlIHBhc3NlZFxuICogdG8gdGhlIGByZWZgIHByb3BlcnR5IGluIEpTWC5cbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiB1c2VSZWY8VCA9IEVsZW1lbnQ+KGN1cnJlbnQ/OiBUKTogUmVmPFQ+IHtcbiAqICAgcmV0dXJuIHVzZVN0b3JlKHsgY3VycmVudCB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBDbXAgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3QgaW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4oKTtcbiAqXG4gKiAgIHVzZUNsaWVudEVmZmVjdCQoKHsgdHJhY2sgfSkgPT4ge1xuICogICAgIGNvbnN0IGVsID0gdHJhY2soKCkgPT4gaW5wdXQuY3VycmVudCkhO1xuICogICAgIGVsLmZvY3VzKCk7XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVmPXtpbnB1dH0gLz5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICpcbiAqIGBgYFxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgdXNlU2lnbmFsYCBpbnN0ZWFkLlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VSZWYgPSA8VCBleHRlbmRzIEVsZW1lbnQgPSBFbGVtZW50PihjdXJyZW50PzogVCk6IFJlZjxUPiA9PiB7XG4gIHJldHVybiB1c2VTdG9yZSh7IGN1cnJlbnQgfSk7XG59O1xuIl19","import { useInvokeContext } from './use-core';\n/**\n * @alpha\n */\nexport function useEnvData(key, defaultValue) {\n    const ctx = useInvokeContext();\n    return ctx.$renderCtx$.$static$.$containerState$.$envData$[key] ?? defaultValue;\n}\n/**\n * @alpha\n * @deprecated Please use `useEnvData` instead.\n */\nexport const useUserContext = useEnvData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVudi1kYXRhLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZW52LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBWTlDOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFXLEVBQUUsWUFBa0I7SUFDeEQsTUFBTSxHQUFHLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxZQUFZLENBQUM7QUFDbEYsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VFbnZEYXRhPFQ+KGtleTogc3RyaW5nKTogVCB8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVudkRhdGE8VCwgQiA9IFQ+KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IEIpOiBUIHwgQjtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVudkRhdGEoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IGFueSkge1xuICBjb25zdCBjdHggPSB1c2VJbnZva2VDb250ZXh0KCk7XG4gIHJldHVybiBjdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJC4kZW52RGF0YSRba2V5XSA/PyBkZWZhdWx0VmFsdWU7XG59XG5cbi8qKlxuICogQGFscGhhXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGB1c2VFbnZEYXRhYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgY29uc3QgdXNlVXNlckNvbnRleHQgPSB1c2VFbnZEYXRhO1xuIl19","/* eslint-disable no-console */\nimport { ComponentStylesPrefixContent } from '../util/markers';\nimport { qDev } from '../util/qdev';\n// Make sure this is always set to `false` in production, but it is useful to set for `true` in development for debugging.\nconst DEBUG = false;\nexport const STYLE_CACHE = new Map();\nexport const getScopedStyles = (css, scopeId) => {\n    if (qDev) {\n        return scopeStylesheet(css, scopeId);\n    }\n    let styleCss = STYLE_CACHE.get(scopeId);\n    if (!styleCss) {\n        STYLE_CACHE.set(scopeId, (styleCss = scopeStylesheet(css, scopeId)));\n    }\n    return styleCss;\n};\nexport const scopeStylesheet = (css, scopeId) => {\n    const end = css.length;\n    const out = [];\n    const stack = [];\n    let idx = 0;\n    let lastIdx = idx;\n    let mode = rule;\n    let lastCh = 0;\n    DEBUG && console.log('--------------------------');\n    while (idx < end) {\n        DEBUG && console.log(css);\n        DEBUG && console.log(new Array(idx).fill(' ').join('') + '^');\n        DEBUG && console.log('MODE', ...stack.map(modeToString), modeToString(mode));\n        let ch = css.charCodeAt(idx++);\n        if (ch === BACKSLASH) {\n            idx++;\n            ch = A; // Pretend it's a letter\n        }\n        const arcs = STATE_MACHINE[mode];\n        for (let i = 0; i < arcs.length; i++) {\n            const arc = arcs[i];\n            const [expectLastCh, expectCh, newMode] = arc;\n            if (expectLastCh === lastCh ||\n                expectLastCh === ANY ||\n                (expectLastCh === IDENT && isIdent(lastCh)) ||\n                (expectLastCh === WHITESPACE && isWhiteSpace(lastCh))) {\n                if (expectCh === ch ||\n                    expectCh === ANY ||\n                    (expectCh === IDENT && isIdent(ch)) ||\n                    (expectCh === NOT_IDENT && !isIdent(ch) && ch !== DOT) ||\n                    (expectCh === WHITESPACE && isWhiteSpace(ch))) {\n                    if (arc.length == 3 || lookAhead(arc)) {\n                        if (arc.length > 3) {\n                            // If matched on lookAhead than we we have to update current `ch`\n                            ch = css.charCodeAt(idx - 1);\n                        }\n                        DEBUG &&\n                            console.log('MATCH', charToString(expectLastCh), charToString(expectCh), modeToString(newMode));\n                        // We found a match!\n                        if (newMode === EXIT || newMode == EXIT_INSERT_SCOPE) {\n                            if (newMode === EXIT_INSERT_SCOPE) {\n                                if (mode === starSelector && !shouldNotInsertScoping()) {\n                                    // Replace `*` with the scoping elementClassIdSelector.\n                                    if (isChainedSelector(ch)) {\n                                        // *foo\n                                        flush(idx - 2);\n                                    }\n                                    else {\n                                        // * (by itself)\n                                        insertScopingSelector(idx - 2);\n                                    }\n                                    lastIdx++;\n                                }\n                                else {\n                                    if (!isChainedSelector(ch)) {\n                                        // We are exiting one of the Selector so we may need to\n                                        const offset = expectCh == NOT_IDENT ? 1 : expectCh == CLOSE_PARENTHESIS ? 2 : 0;\n                                        insertScopingSelector(idx - offset);\n                                    }\n                                }\n                            }\n                            if (expectCh === NOT_IDENT) {\n                                // NOT_IDENT is not a real character more like lack of what we expected.\n                                // if pseudoGlobal we need to give it a chance to exit as well.\n                                // For this reason we need to reparse the last character again.\n                                idx--;\n                                ch = lastCh;\n                            }\n                            do {\n                                mode = stack.pop() || rule;\n                                if (mode === pseudoGlobal) {\n                                    // Skip over the `)` in `:global(...)`.\n                                    flush(idx - 1);\n                                    lastIdx++;\n                                }\n                            } while (isSelfClosingRule(mode));\n                        }\n                        else {\n                            stack.push(mode);\n                            if (mode === pseudoGlobal && newMode === rule) {\n                                flush(idx - 8); // `:global(`.length\n                                lastIdx = idx; // skip over \":global(\"\n                            }\n                            else if (newMode === pseudoElement) {\n                                // We are entering pseudoElement `::foo`; insert scoping in front of it.\n                                insertScopingSelector(idx - 2);\n                            }\n                            mode = newMode;\n                            ch == SPACE; // Pretend not an identifier so that we don't flush again on elementClassIdSelector\n                        }\n                        break; // get out of the for loop as we found a match\n                    }\n                }\n            }\n        }\n        lastCh = ch;\n    }\n    flush(idx);\n    return out.join('');\n    function flush(idx) {\n        out.push(css.substring(lastIdx, idx));\n        DEBUG && console.log('FLUSH', out.join(''));\n        lastIdx = idx;\n    }\n    function insertScopingSelector(idx) {\n        if (mode === pseudoGlobal || shouldNotInsertScoping())\n            return;\n        flush(idx);\n        out.push('.', ComponentStylesPrefixContent, scopeId);\n        DEBUG && console.log('INSERT', out.join(''));\n    }\n    function lookAhead(arc) {\n        let prefix = 0; // Ignore vendor prefixes such as `-webkit-`.\n        if (css.charCodeAt(idx) === DASH) {\n            for (let i = 1; i < 10; i++) {\n                // give up after 10 characters\n                if (css.charCodeAt(idx + i) === DASH) {\n                    prefix = i + 1;\n                    break;\n                }\n            }\n        }\n        words: for (let arcIndx = 3; arcIndx < arc.length; arcIndx++) {\n            const txt = arc[arcIndx];\n            for (let i = 0; i < txt.length; i++) {\n                if ((css.charCodeAt(idx + i + prefix) | LOWERCASE) !== txt.charCodeAt(i)) {\n                    continue words;\n                }\n            }\n            // we found a match;\n            idx += txt.length + prefix;\n            return true;\n        }\n        return false;\n    }\n    function shouldNotInsertScoping() {\n        return stack.indexOf(pseudoGlobal) !== -1 || stack.indexOf(atRuleSelector) !== -1;\n    }\n};\nconst isIdent = (ch) => {\n    return ((ch >= _0 && ch <= _9) ||\n        (ch >= A && ch <= Z) ||\n        (ch >= a && ch <= z) ||\n        ch >= 0x80 ||\n        ch === UNDERSCORE ||\n        ch === DASH);\n};\nconst isChainedSelector = (ch) => {\n    return ch === COLON || ch === DOT || ch === OPEN_BRACKET || ch === HASH || isIdent(ch);\n};\nconst isSelfClosingRule = (mode) => {\n    return (mode === atRuleBlock || mode === atRuleSelector || mode === atRuleInert || mode === pseudoGlobal);\n};\nconst isWhiteSpace = (ch) => {\n    return ch === SPACE || ch === TAB || ch === NEWLINE || ch === CARRIAGE_RETURN;\n};\nconst modeToString = (mode) => {\n    return [\n        'rule',\n        'elementClassIdSelector',\n        'starSelector',\n        'pseudoClassWithSelector',\n        'pseudoClass',\n        'pseudoGlobal',\n        'pseudoElement',\n        'attrSelector',\n        'inertParenthesis',\n        'inertBlock',\n        'atRuleSelector',\n        'atRuleBlock',\n        'atInert',\n        'body',\n        'stringSingle',\n        'stringDouble',\n        'commentMultiline',\n        'EXIT',\n        'EXIT_INSERT_SCOPE',\n    ][mode];\n};\nconst charToString = (ch) => {\n    return ['ANY', 'IDENT', 'NOT_IDENT', 'WHITESPACE'][ch] || String.fromCharCode(ch);\n};\nconst rule = 0; // top level initial space.\nconst elementClassIdSelector = 1; // .elementClassIdSelector {}\nconst starSelector = 2; // * {}\nconst pseudoClassWithSelector = 3; // :pseudoClass(elementClassIdSelector) {}\nconst pseudoClass = 4; // :pseudoClass {}\nconst pseudoGlobal = 5; // :global(elementClassIdSelector)\nconst pseudoElement = 6; // ::pseudoElement {}\nconst attrSelector = 7; // [attr] {}\nconst inertParenthesis = 8; // (ignored)\nconst inertBlock = 9; // {ignored}\nconst atRuleSelector = 10; // @keyframe elementClassIdSelector {}\nconst atRuleBlock = 11; // @media {elementClassIdSelector {}}\nconst atRuleInert = 12; // @atRule something;\nconst body = 13; // .elementClassIdSelector {body}\nconst stringSingle = 14; // 'text'\nconst stringDouble = 15; // 'text'\nconst commentMultiline = 16; // /* ... */\n// NOT REAL MODES\nconst EXIT = 17; // Exit the mode\nconst EXIT_INSERT_SCOPE = 18; // Exit the mode INSERT SCOPE\nconst ANY = 0;\nconst IDENT = 1;\nconst NOT_IDENT = 2;\nconst WHITESPACE = 3;\nconst TAB = 9; // `\\t`.charCodeAt(0);\nconst NEWLINE = 10; // `\\n`.charCodeAt(0);\nconst CARRIAGE_RETURN = 13; // `\\r`.charCodeAt(0);\nconst SPACE = 32; // ` `.charCodeAt(0);\nconst DOUBLE_QUOTE = 34; // `\"`.charCodeAt(0);\nconst HASH = 35; // `#`.charCodeAt(0);\nconst SINGLE_QUOTE = 39; // `'`.charCodeAt(0);\nconst OPEN_PARENTHESIS = 40; // `(`.charCodeAt(0);\nconst CLOSE_PARENTHESIS = 41; // `)`.charCodeAt(0);\nconst STAR = 42; // `*`.charCodeAt(0);\n// const COMMA = 44; // `,`.charCodeAt(0);\nconst DASH = 45; // `-`.charCodeAt(0);\nconst DOT = 46; // `.`.charCodeAt(0);\nconst FORWARD_SLASH = 47; // `/`.charCodeAt(0);\nconst _0 = 48; // `0`.charCodeAt(0);\nconst _9 = 57; // `9`.charCodeAt(0);\nconst COLON = 58; // `:`.charCodeAt(0);\nconst SEMICOLON = 59; // `;`.charCodeAt(0);\n// const LESS_THAN = 60; // `<`.charCodeAt(0);\nconst AT = 64; // `@`.charCodeAt(0);\nconst A = 65; // `A`.charCodeAt(0);\nconst Z = 90; // `Z`.charCodeAt(0);\nconst OPEN_BRACKET = 91; // `[`.charCodeAt(0);\nconst CLOSE_BRACKET = 93; // `]`.charCodeAt(0);\nconst BACKSLASH = 92; // `\\\\`.charCodeAt(0);\nconst UNDERSCORE = 95; // `_`.charCodeAt(0);\nconst LOWERCASE = 0x20; // `a`.charCodeAt(0);\nconst a = 97; // `a`.charCodeAt(0);\n// const d = 100; // `d`.charCodeAt(0);\n// const g = 103; // 'g'.charCodeAt(0);\n// const h = 104; // `h`.charCodeAt(0);\n// const i = 105; // `i`.charCodeAt(0);\n// const l = 108; // `l`.charCodeAt(0);\n// const t = 116; // `t`.charCodeAt(0);\nconst z = 122; // `z`.charCodeAt(0);\nconst OPEN_BRACE = 123; // `{`.charCodeAt(0);\nconst CLOSE_BRACE = 125; // `}`.charCodeAt(0);\nconst STRINGS_COMMENTS = /*__PURE__*/ (() => [\n    [ANY, SINGLE_QUOTE, stringSingle],\n    [ANY, DOUBLE_QUOTE, stringDouble],\n    [ANY, FORWARD_SLASH, commentMultiline, '*'],\n])();\nconst STATE_MACHINE = /*__PURE__*/ (() => [\n    [\n        /// rule\n        [ANY, STAR, starSelector],\n        [ANY, OPEN_BRACKET, attrSelector],\n        [ANY, COLON, pseudoElement, ':'],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [\n            ANY,\n            COLON,\n            pseudoClassWithSelector,\n            'has',\n            'host-context',\n            'not',\n            'where',\n            'is',\n            'matches',\n            'any',\n        ],\n        [ANY, COLON, pseudoClass],\n        [ANY, IDENT, elementClassIdSelector],\n        [ANY, DOT, elementClassIdSelector],\n        [ANY, HASH, elementClassIdSelector],\n        [ANY, AT, atRuleSelector, 'keyframe'],\n        [ANY, AT, atRuleBlock, 'media', 'supports'],\n        [ANY, AT, atRuleInert],\n        [ANY, OPEN_BRACE, body],\n        [FORWARD_SLASH, STAR, commentMultiline],\n        [ANY, SEMICOLON, EXIT],\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// elementClassIdSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// starSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClassWithSelector\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClass\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoGlobal\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// pseudoElement\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// attrSelector\n        [ANY, CLOSE_BRACKET, EXIT_INSERT_SCOPE],\n        [ANY, SINGLE_QUOTE, stringSingle],\n        [ANY, DOUBLE_QUOTE, stringDouble],\n    ],\n    [\n        /// inertParenthesis\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// inertBlock\n        [ANY, CLOSE_BRACE, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleSelector\n        [ANY, CLOSE_BRACE, EXIT],\n        [WHITESPACE, IDENT, elementClassIdSelector],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [ANY, OPEN_BRACE, body],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleBlock\n        [ANY, OPEN_BRACE, rule],\n        [ANY, SEMICOLON, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleInert\n        [ANY, SEMICOLON, EXIT],\n        [ANY, OPEN_BRACE, inertBlock],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// body\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, OPEN_BRACE, body],\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// stringSingle\n        [ANY, SINGLE_QUOTE, EXIT],\n    ],\n    [\n        /// stringDouble\n        [ANY, DOUBLE_QUOTE, EXIT],\n    ],\n    [\n        /// commentMultiline\n        [STAR, FORWARD_SLASH, EXIT],\n    ],\n])();\n//# sourceMappingURL=data:application/json;base64,","import { styleContent, styleKey } from '../style/qrl-styles';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { getScopedStyles } from '../style/scoped-stylesheet';\nimport { hasStyle } from '../render/execute-component';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { isPromise } from '../util/promises';\nimport { assertDefined } from '../error/assert';\nimport { getContext } from '../state/context';\nimport { ComponentStylesPrefixContent } from '../util/markers';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStylesScoped`\n *\n * @public\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    _useStyles(styles, (str) => str, false);\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStylesScoped`\n *\n * @public\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStyles`\n *\n * @alpha\n */\n// </docs>\nexport const useStylesScopedQrl = (styles) => {\n    return {\n        scopeId: ComponentStylesPrefixContent + _useStyles(styles, getScopedStyles, true),\n    };\n};\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStyles`\n *\n * @alpha\n */\n// </docs>\nexport const useStylesScoped$ = /*#__PURE__*/ implicit$FirstArg(useStylesScopedQrl);\nconst _useStyles = (styleQrl, transform, scoped) => {\n    assertQrl(styleQrl);\n    const { get, set, ctx, i } = useSequentialScope();\n    if (get) {\n        return get;\n    }\n    const renderCtx = ctx.$renderCtx$;\n    const styleId = styleKey(styleQrl, i);\n    const containerState = renderCtx.$static$.$containerState$;\n    const elCtx = getContext(ctx.$hostElement$);\n    set(styleId);\n    if (!elCtx.$appendStyles$) {\n        elCtx.$appendStyles$ = [];\n    }\n    if (!elCtx.$scopeIds$) {\n        elCtx.$scopeIds$ = [];\n    }\n    if (scoped) {\n        elCtx.$scopeIds$.push(styleContent(styleId));\n    }\n    if (hasStyle(containerState, styleId)) {\n        return styleId;\n    }\n    containerState.$styleIds$.add(styleId);\n    const value = styleQrl.$resolveLazy$(containerState.$containerEl$);\n    const appendStyle = (styleText) => {\n        assertDefined(elCtx.$appendStyles$, 'appendStyles must be defined');\n        elCtx.$appendStyles$.push({\n            styleId,\n            content: transform(styleText, styleId),\n        });\n    };\n    if (isPromise(value)) {\n        ctx.$waitOn$.push(value.then(appendStyle));\n    }\n    else {\n        appendStyle(value);\n    }\n    return styleId;\n};\n//# sourceMappingURL=data:application/json;base64,","import { createSignal } from '../state/signal';\nimport { useSequentialScope } from './use-sequential-scope';\n/**\n * @alpha\n */\nexport const useSignal = (initialState) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    const containerState = ctx.$renderCtx$.$static$.$containerState$;\n    const signal = createSignal(initialState, containerState, undefined);\n    set(signal);\n    return signal;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNpZ25hbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXNpZ25hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFVLE1BQU0saUJBQWlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFVNUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQWMsQ0FBUSxZQUFvQixFQUFpQixFQUFFO0lBQ2pGLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLGtCQUFrQixFQUFpQixDQUFDO0lBQzlELElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtRQUNmLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFFRCxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqRSxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsWUFBWSxFQUFFLGNBQWMsRUFBRSxTQUFTLENBQWtCLENBQUM7SUFDdEYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ1osT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2lnbmFsLCBTaWduYWwgfSBmcm9tICcuLi9zdGF0ZS9zaWduYWwnO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc2VxdWVudGlhbC1zY29wZSc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU2lnbmFsIHtcbiAgPFQ+KCk6IFNpZ25hbDxUIHwgdW5kZWZpbmVkPjtcbiAgPFQ+KHZhbHVlOiBUKTogU2lnbmFsPFQ+O1xufVxuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgdXNlU2lnbmFsOiBVc2VTaWduYWwgPSA8U1RBVEU+KGluaXRpYWxTdGF0ZT86IFNUQVRFKTogU2lnbmFsPFNUQVRFPiA9PiB7XG4gIGNvbnN0IHsgZ2V0LCBzZXQsIGN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFNpZ25hbDxTVEFURT4+KCk7XG4gIGlmIChnZXQgIT0gbnVsbCkge1xuICAgIHJldHVybiBnZXQ7XG4gIH1cblxuICBjb25zdCBjb250YWluZXJTdGF0ZSA9IGN0eC4kcmVuZGVyQ3R4JC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkO1xuICBjb25zdCBzaWduYWwgPSBjcmVhdGVTaWduYWwoaW5pdGlhbFN0YXRlLCBjb250YWluZXJTdGF0ZSwgdW5kZWZpbmVkKSBhcyBTaWduYWw8U1RBVEU+O1xuICBzZXQoc2lnbmFsKTtcbiAgcmV0dXJuIHNpZ25hbDtcbn07XG4iXX0=","import { qrl } from '../qrl/qrl';\nimport { ERROR_CONTEXT } from '../render/error-handling';\nimport { useContextProvider } from './use-context';\nimport { useOn } from './use-on';\nimport { useStore } from './use-store.public';\n/**\n * @alpha\n */\nexport const useErrorBoundary = () => {\n    const store = useStore({\n        error: undefined,\n    });\n    useOn('error-boundary', qrl('/runtime', 'error', [store]));\n    useContextProvider(ERROR_CONTEXT, store);\n    return store;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVycm9yLWJvdW5kYXJ5LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZXJyb3ItYm91bmRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLEVBQXNCLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5Qzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQWlDLEVBQUU7SUFDakUsTUFBTSxLQUFLLEdBQXVCLFFBQVEsQ0FBQztRQUN6QyxLQUFLLEVBQUUsU0FBUztLQUNqQixDQUFDLENBQUM7SUFDSCxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0Qsa0JBQWtCLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXpDLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcXJsIH0gZnJvbSAnLi4vcXJsL3FybCc7XG5pbXBvcnQgeyBFcnJvckJvdW5kYXJ5U3RvcmUsIEVSUk9SX0NPTlRFWFQgfSBmcm9tICcuLi9yZW5kZXIvZXJyb3ItaGFuZGxpbmcnO1xuaW1wb3J0IHsgdXNlQ29udGV4dFByb3ZpZGVyIH0gZnJvbSAnLi91c2UtY29udGV4dCc7XG5pbXBvcnQgeyB1c2VPbiB9IGZyb20gJy4vdXNlLW9uJztcbmltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAnLi91c2Utc3RvcmUucHVibGljJztcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUVycm9yQm91bmRhcnkgPSAoKTogUmVhZG9ubHk8RXJyb3JCb3VuZGFyeVN0b3JlPiA9PiB7XG4gIGNvbnN0IHN0b3JlOiBFcnJvckJvdW5kYXJ5U3RvcmUgPSB1c2VTdG9yZSh7XG4gICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgfSk7XG4gIHVzZU9uKCdlcnJvci1ib3VuZGFyeScsIHFybCgnL3J1bnRpbWUnLCAnZXJyb3InLCBbc3RvcmVdKSk7XG4gIHVzZUNvbnRleHRQcm92aWRlcihFUlJPUl9DT05URVhULCBzdG9yZSk7XG5cbiAgcmV0dXJuIHN0b3JlO1xufTtcbiJdfQ=="],"names":["tryGetContext","SHOW_COMMENT","FILTER_ACCEPT","FILTER_REJECT","isContainer","createContext","processData","IS_HEAD","setComponentProps","emitEvent","renderRoot"],"mappings":"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KAAK,CAAC,iBAAiB,CAAC,CAAC;AACvC,CAAC,CAAC;AACK,MAAM,WAAW,GAAG,CAAC,IAAI,KAAK;AACrC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AACtB,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;AAChC,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC;AACzB,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,CAAC;;AC/RD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACC,eAAa,GAAG,CAAC,IAAI,KAAK;AACvC,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,+CAA+C,EAAE,IAAI,CAAC,CAAC;AAC/F,IAAI,qBAAqB,MAAM,CAAC,MAAM,CAAC;AACvC,QAAQ,EAAE,EAAE,oBAAoB,CAAC,IAAI,CAAC;AACtC,KAAK,CAAC,CAAC;AACP,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,kBAAkB,GAAG,CAAC,OAAO,EAAE,QAAQ,KAAK;AACzD,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;AACnD,IAAI,IAAI,GAAG,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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,iBAAiB,GAAG,CAAC,QAAQ,KAAK;AAC/C,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;AACnD,IAAI,IAAI,GAAG,EAAE;AACb,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,IAAI,QAAQ,EAAE,EAAE;AACpB,QAAQ,UAAU,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAClC,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;AAClB,KAAK;AACL,SAAS;AACT,QAAQ,MAAM,MAAM,CAAC,gCAAgC,EAAE,GAAG,CAAC,aAAa,CAAC,CAAC;AAC1E,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,eAAe,iBAAiB,iBAAiB,CAAC,iBAAiB,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,WAAW,GAAG,CAAC,QAAQ,KAAK;AACzC,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;AACnD,IAAI,IAAI,GAAG,EAAE;AACb,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC;AACxB,IAAI,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,QAA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AAK,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;AACrD,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;AAC1B,QAAQ,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC;AAC7B,KAAK;AACL,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;AAClB,IAAI,OAAO,QAAQ,CAAC;AACpB,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,YAAY,GAAG,CAAC,WAAW,EAAE,IAAI,KAAK;AACnD,IAAI,OAAO,cAAc,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;AAChD,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,QAAQ,GAAG,CAAC,KAAK,KAAK;AACnC,IAAI,MAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,CAAC;AAClC,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;AACjC,IAAI,IAAI,SAAS,EAAE;AACnB,QAAQ,IAAI,KAAK,CAAC,UAAU,EAAE;AAC9B,YAAY,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AAC9C,YAAY,IAAI,QAAQ,CAAC,MAAM,KAAK,UAAU,EAAE;AAChD,gBAAgB,OAAO,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACzD,aAAa;AACb,SAAS;AACT,QAAQ,IAAI,KAAK,CAAC,SAAS,EAAE;AAC7B,YAAY,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC;AAC1C,YAAY,IAAI,KAAK,KAAK,SAAS,EAAE;AACrC,gBAAgB,OAAO,KAAK,CAAC,SAAS,EAAE,CAAC;AACzC,aAAa;AACb,iBAAiB,IAAI,KAAK,KAAK,UAAU,EAAE;AAC3C,gBAAgB,OAAO,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC5D,aAAa;AACb,iBAAiB,IAAI,KAAK,KAAK,UAAU,EAAE;AAC3C,gBAAgB,MAAM,QAAQ,CAAC,MAAM,CAAC;AACtC,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,oBAAoB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;AAC1H;AACA,IAAI,OAAO,GAAG,CAAC,QAAQ,EAAE;AACzB,QAAQ,QAAQ,EAAE,OAAO;AACzB,KAAK,CAAC,CAAC;AACP,EAAE;AACK,MAAM,qBAAqB,GAAG,CAAC,IAAI,KAAK;AAC/C,IAAI,MAAM,QAAQ,GAAG;AACrB,QAAQ,OAAO,EAAE,UAAU;AAC3B,QAAQ,OAAO,EAAE,SAAS;AAC1B,QAAQ,OAAO,EAAE,QAAQ,EAAE,GAAG,KAAK,GAAG,IAAI;AAC1C,QAAQ,SAAS,EAAE,SAAS;AAC5B,QAAQ,MAAM,EAAE,SAAS;AACzB,QAAQ,MAAM,EAAE,SAAS;AACzB,QAAQ,QAAQ,EAAE,IAAI,EAAE,OAAO,IAAI,CAAC,CAAC;AACrC,QAAQ,MAAM,EAAE,CAAC;AACjB,KAAK,CAAC;AACN,IAAI,OAAO,QAAQ,CAAC;AACpB,CAAC,CAAC;AACK,MAAM,oBAAoB,GAAG,CAAC,cAAc,EAAE,IAAI,EAAE,cAAc,KAAK;AAC9E,IAAI,MAAM,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;AAC/C,IAAI,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC;AACpC,IAAI,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;AACpE,IAAI,OAAO,QAAQ,CAAC;AACpB,CAAC,CAAC;AAIK,MAAM,gBAAgB,GAAG,CAAC,GAAG,KAAK;AACzC,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,OAAO,KAAK,UAAU,CAAC;AACvD,CAAC,CAAC;AACK,MAAM,iBAAiB,GAAG,CAAC,QAAQ,EAAE,QAAQ,KAAK;AACzD,IAAI,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC;AAClC,IAAI,IAAI,KAAK,KAAK,UAAU,EAAE;AAC9B,QAAQ,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AACnD,KAAK;AACL,SAAS,IAAI,KAAK,KAAK,SAAS,EAAE;AAClC,QAAQ,OAAO,CAAC,CAAC,CAAC,CAAC;AACnB,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAChD,KAAK;AACL,CAAC,CAAC;AACK,MAAM,mBAAmB,GAAG,CAAC,IAAI,KAAK;AAC7C,IAAI,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACxC,IAAI,MAAM,MAAM,GAAG,qBAAqB,CAAC,SAAS,CAAC,CAAC;AACpD,IAAI,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;AACvC,IAAI,IAAI,KAAK,KAAK,GAAG,EAAE;AACvB,QAAQ,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC;AACnC,QAAQ,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;AAC9B,QAAQ,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;AAC/B,KAAK;AACL,SAAS,IAAI,KAAK,KAAK,GAAG,EAAE;AAC5B,QAAQ,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;AAClC,QAAQ,MAAM,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;AAChD,QAAQ,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AAC9B,KAAK;AACL,SAAS,IAAI,KAAK,KAAK,GAAG,EAAE;AAC5B,QAAQ,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC;AACnC,QAAQ,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;AAC3B,QAAQ,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;AAC/B,KAAK;AACL,IAAI,OAAO,MAAM,CAAC;AAClB,CAAC;;AC5RD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,gBAAgB,GAAG,QAAQ,CAAC;AACzC,MAAM,aAAa,GAAG;AACtB,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;AACzB,IAAI,OAAO,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,KAAK;AACtC,QAAQ,IAAI,CAAC,CAAC,YAAY,EAAE;AAC5B,YAAY,KAAK,MAAM,IAAI,IAAI,CAAC,CAAC,YAAY,EAAE;AAC/C,gBAAgB,YAAY,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AACrD,aAAa;AACb,SAAS;AACT,QAAQ,IAAI,SAAS,CAAC,UAAU,KAAK,CAAC,EAAE;AACxC,YAAY,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACrC,SAAS;AACT,KAAK;AACL,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK;AAClC,QAAQ,OAAO,YAAY,CAAC,GAAG,EAAE;AACjC,YAAY,UAAU,EAAE,QAAQ;AAChC,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,OAAO,EAAE,CAAC,IAAI,EAAE,cAAc,KAAK;AACvC,QAAQ,OAAO,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;AAC5D,KAAK;AACL,IAAI,IAAI,EAAE,CAAC,GAAG,EAAE,SAAS,KAAK;AAC9B,QAAQ,IAAI,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACvD,YAAY,GAAG,CAAC,YAAY,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAC5D,YAAY,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC;AACjC,SAAS;AACT,KAAK;AACL,CAAC,CAAC;AACF,MAAM,eAAe,GAAG;AACxB,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,sBAAsB,CAAC,CAAC,CAAC;AAC1C,IAAI,OAAO,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,KAAK;AACtC,QAAQ,YAAY,CAAC,CAAC,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AAChD,QAAQ,IAAI,CAAC,CAAC,UAAU,EAAE;AAC1B,YAAY,YAAY,CAAC,CAAC,CAAC,UAAU,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AACzD,SAAS;AACT,KAAK;AACL,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC;AAC/D,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC;AACvC,IAAI,IAAI,EAAE,CAAC,KAAK,EAAE,SAAS,KAAK;AAChC,QAAQ,KAAK,CAAC,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC3C,QAAQ,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC7C,QAAQ,IAAI,KAAK,CAAC,UAAU,EAAE;AAC9B,YAAY,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC3D,SAAS;AACT,KAAK;AACL,CAAC,CAAC;AACF,MAAM,kBAAkB,GAAG;AAC3B,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,gBAAgB,CAAC,CAAC,CAAC;AACpC,IAAI,OAAO,EAAE,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,KAAK;AACxC,QAAQ,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AACpD,QAAQ,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AACtD,KAAK;AACL,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK;AAClC,QAAQ,OAAO,iBAAiB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAChD,KAAK;AACL,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;AACvB,QAAQ,OAAO,mBAAmB,CAAC,IAAI,CAAC,CAAC;AACzC,KAAK;AACL,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,SAAS,KAAK;AACnC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,UAAU,EAAE;AAC5C,YAAY,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC/D,YAAY,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AACnE,SAAS;AACT,aAAa,IAAI,QAAQ,CAAC,MAAM,KAAK,UAAU,EAAE;AACjD,YAAY,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACtD,YAAY,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;AAChC,YAAY,QAAQ,CAAC,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACzD,YAAY,QAAQ,CAAC,OAAO,GAAG,CAAC,CAAC;AACjC,SAAS;AACT,KAAK;AACL,CAAC,CAAC;AACF,MAAM,aAAa,GAAG;AACtB,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,GAAG;AACjC,IAAI,SAAS,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI;AAChC,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC;AACpC,IAAI,IAAI,EAAE,SAAS;AACnB,CAAC,CAAC;AACF,MAAM,cAAc,GAAG;AACvB,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,IAAI;AAClC,IAAI,SAAS,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,WAAW,EAAE;AACzC,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC;AACrC,IAAI,IAAI,EAAE,SAAS;AACnB,CAAC,CAAC;AACF,MAAM,eAAe,GAAG;AACxB,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,MAAM;AACpC,IAAI,SAAS,EAAE,CAAC,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;AACpD,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;AACvB,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACxC,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AAC7C,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AAC3C,QAAQ,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACzC,KAAK;AACL,IAAI,IAAI,EAAE,SAAS;AACnB,CAAC,CAAC;AACF,MAAM,eAAe,GAAG;AACxB,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,KAAK;AACnC,IAAI,SAAS,EAAE,CAAC,GAAG,KAAK;AACxB,QAAQ,OAAO,GAAG,CAAC,OAAO,CAAC;AAC3B,KAAK;AACL,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;AACvB,QAAQ,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;AACpC,QAAQ,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC;AAC9B,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,IAAI,EAAE,SAAS;AACnB,CAAC,CAAC;AACF,MAAM,kBAAkB,GAAG;AAC3B,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;AAC9B,IAAI,SAAS,EAAE,SAAS;AACxB,IAAI,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,KAAK;AAC7B,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,IAAI,EAAE,SAAS;AACnB,CAAC,CAAC;AACK,MAAM,kBAAkB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAC9D,MAAM,mBAAmB,GAAG;AAC5B,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,GAAG,KAAK,eAAe,CAAC,GAAG,CAAC;AACvC,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK;AAClC,QAAQ,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAC9C,QAAQ,OAAO,YAAY,CAAC,GAAG,EAAE;AACjC,YAAY,UAAU,EAAE,QAAQ;AAChC,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,OAAO,EAAE,CAAC,IAAI,EAAE,cAAc,KAAK;AACvC,QAAQ,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC/C,QAAQ,MAAM,SAAS,GAAG,YAAY,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;AAClF,QAAQ,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;AACtE,QAAQ,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;AACjC,KAAK;AACL,IAAI,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,KAAK;AACpC,QAAQ,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAC;AACpD,QAAQ,IAAI,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACvD,YAAY,GAAG,CAAC,YAAY,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAC5D,YAAY,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC;AACjC,SAAS;AACT,KAAK;AACL,CAAC,CAAC;AACF,MAAM,sBAAsB,GAAG;AAC/B,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,GAAG,KAAK,OAAO,GAAG,KAAK,UAAU,IAAI,GAAG,CAAC,qBAAqB,KAAK,SAAS;AACvF,IAAI,SAAS,EAAE,CAAC,GAAG,KAAK;AACxB,QAAQ,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;AAC9B,KAAK;AACL,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;AACvB,QAAQ,MAAM,EAAE,GAAG,IAAI,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC;AACpD,QAAQ,EAAE,CAAC,qBAAqB,GAAG,IAAI,CAAC;AACxC,QAAQ,OAAO,EAAE,CAAC;AAClB,KAAK;AACL,IAAI,IAAI,EAAE,SAAS;AACnB,CAAC,CAAC;AACF,MAAM,gBAAgB,GAAG;AACzB,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,UAAU;AACxC,IAAI,OAAO,EAAE,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,KAAK;AACxC,QAAQ,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AAC3D,QAAQ,IAAI,KAAK,EAAE;AACnB,YAAY,oBAAoB,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,SAAS,CAAC,CAAC;AACvE,SAAS;AACT,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK;AAClC,QAAQ,OAAO,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AAC5C,KAAK;AACL,IAAI,OAAO,EAAE,CAAC,IAAI,EAAE,cAAc,KAAK;AACvC,QAAQ,OAAO,IAAI,UAAU,CAAC,IAAI,EAAE,cAAc,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC,CAAC;AACpF,KAAK;AACL,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,IAAI,KAAK;AAC5B,QAAQ,MAAM,CAAC,oBAAoB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACrD,KAAK;AACL,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,KAAK;AACjC,QAAQ,MAAM,CAAC,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AACjE,KAAK;AACL,CAAC,CAAC;AACF,MAAM,uBAAuB,GAAG;AAChC,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,aAAa;AAC3C,IAAI,OAAO,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE;AACnC,QAAQ,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AAChD,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK;AAClC,QAAQ,OAAO,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAClD,KAAK;AACL,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;AACvB,QAAQ,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3C,QAAQ,OAAO,IAAI,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;AAC3C,KAAK;AACL,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,KAAK;AACjC,QAAQ,MAAM,CAAC,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC3C,KAAK;AACL,CAAC,CAAC;AACF,MAAM,wBAAwB,GAAG;AACjC,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,OAAO,CAAC,KAAK,QAAQ;AACtC,IAAI,SAAS,EAAE,CAAC,CAAC,KAAK;AACtB,QAAQ,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;AACzB,KAAK;AACL,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;AACvB,QAAQ,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5B,KAAK;AACL,IAAI,IAAI,EAAE,SAAS;AACnB,CAAC,CAAC;AACF,MAAM,WAAW,GAAG;AACpB,IAAI,aAAa;AACjB,IAAI,gBAAgB;AACpB,IAAI,uBAAuB;AAC3B,IAAI,eAAe;AACnB,IAAI,kBAAkB;AACtB,IAAI,aAAa;AACjB,IAAI,cAAc;AAClB,IAAI,eAAe;AACnB,IAAI,eAAe;AACnB,IAAI,kBAAkB;AACtB,IAAI,mBAAmB;AACvB,IAAI,sBAAsB;AAC1B,IAAI,wBAAwB;AAC5B,CAAC,CAAC;AACF,MAAM,oBAAoB,iBAAiB,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC;AACzE,MAAM,YAAY,GAAG,CAAC,GAAG,KAAK;AACrC,IAAI,KAAK,MAAM,CAAC,IAAI,WAAW,EAAE;AACjC,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACzB,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,KAAK;AACL,IAAI,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AACK,MAAM,WAAW,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,KAAK;AACtD,IAAI,KAAK,MAAM,CAAC,IAAI,oBAAoB,EAAE;AAC1C,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACzB,YAAY,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AAC7C,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,KAAK;AACL,IAAI,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AACK,MAAM,cAAc,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,cAAc,KAAK;AACjE,IAAI,KAAK,MAAM,CAAC,IAAI,WAAW,EAAE;AACjC,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACzB,YAAY,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC;AACjC,YAAY,IAAI,CAAC,CAAC,SAAS,EAAE;AAC7B,gBAAgB,KAAK,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;AACpE,aAAa;AACb,YAAY,OAAO,KAAK,CAAC;AACzB,SAAS;AACT,KAAK;AACL,IAAI,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC;AACK,MAAM,YAAY,GAAG,CAAC,SAAS,EAAE,cAAc,EAAE,GAAG,KAAK;AAChE,IAAI,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;AAC9B,IAAI,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;AAC9B,IAAI,OAAO;AACX,QAAQ,OAAO,CAAC,IAAI,EAAE;AACtB,YAAY,KAAK,MAAM,CAAC,IAAI,WAAW,EAAE;AACzC,gBAAgB,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;AACxC,gBAAgB,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;AAC7C,oBAAoB,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;AAC5F,oBAAoB,IAAI,CAAC,CAAC,IAAI,EAAE;AAChC,wBAAwB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAC9C,qBAAqB;AACrB,oBAAoB,IAAI,CAAC,CAAC,IAAI,EAAE;AAChC,wBAAwB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAC9C,qBAAqB;AACrB,oBAAoB,OAAO,KAAK,CAAC;AACjC,iBAAiB;AACjB,aAAa;AACb,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,QAAQ,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE;AACxB,YAAY,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAChD,YAAY,IAAI,UAAU,EAAE;AAC5B,gBAAgB,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;AAC3D,gBAAgB,OAAO,IAAI,CAAC;AAC5B,aAAa;AACb,YAAY,OAAO,KAAK,CAAC;AACzB,SAAS;AACT,QAAQ,IAAI,CAAC,GAAG,EAAE;AAClB,YAAY,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAChD,YAAY,IAAI,UAAU,EAAE;AAC5B,gBAAgB,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;AAChE,gBAAgB,OAAO,IAAI,CAAC;AAC5B,aAAa;AACb,YAAY,OAAO,KAAK,CAAC;AACzB,SAAS;AACT,KAAK,CAAC;AACN,CAAC,CAAC;AACK,MAAM,iBAAiB,GAAG;AACjC,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,cAAc,KAAK;AAClC,QAAQ,OAAO,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,gBAAgB,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;AAC3F,KAAK;AACL,IAAI,GAAG,EAAE,CAAC,GAAG,KAAK;AAClB,QAAQ,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACpC,KAAK;AACL,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK;AAChB,QAAQ,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACnC,KAAK;AACL,CAAC;;AC5TM,MAAM,kBAAkB,GAAG,CAAC,KAAK,KAAK;AAC7C,IAAI,MAAM,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;AAC3B,IAAI,OAAO,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC5C,CAAC,CAAC;AACF,MAAM,mBAAmB,GAAG,CAAC,KAAK,EAAE,IAAI,KAAK;AAC7C,IAAI,MAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;AACzC,IAAI,IAAI,SAAS,IAAI,IAAI,EAAE;AAC3B,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,IAAI,IAAI,eAAe,CAAC,SAAS,CAAC,EAAE;AACpC,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;AACjC,YAAY,OAAO,KAAK,CAAC;AACzB,SAAS;AACT,QAAQ,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAC5B,QAAQ,IAAI,YAAY,CAAC,SAAS,CAAC,EAAE;AACrC,YAAY,OAAO,KAAK,CAAC;AACzB,SAAS;AACT,QAAQ,QAAQ,OAAO,SAAS;AAChC,YAAY,KAAK,QAAQ;AACzB,gBAAgB,IAAI,SAAS,CAAC,SAAS,CAAC;AACxC,oBAAoB,OAAO,KAAK,CAAC;AACjC,gBAAgB,IAAI,aAAa,CAAC,SAAS,CAAC;AAC5C,oBAAoB,OAAO,KAAK,CAAC;AACjC,gBAAgB,IAAI,UAAU,CAAC,SAAS,CAAC;AACzC,oBAAoB,OAAO,KAAK,CAAC;AACjC,gBAAgB,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;AACxC,oBAAoB,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE;AAClD,wBAAwB,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACxD,qBAAqB;AACrB,oBAAoB,OAAO,KAAK,CAAC;AACjC,iBAAiB;AACjB,gBAAgB,IAAI,oBAAoB,CAAC,SAAS,CAAC,EAAE;AACrD,oBAAoB,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;AACjE,wBAAwB,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACxD,qBAAqB;AACrB,oBAAoB,OAAO,KAAK,CAAC;AACjC,iBAAiB;AACjB,gBAAgB,MAAM;AACtB,YAAY,KAAK,SAAS,CAAC;AAC3B,YAAY,KAAK,QAAQ,CAAC;AAC1B,YAAY,KAAK,QAAQ;AACzB,gBAAgB,OAAO,KAAK,CAAC;AAC7B,SAAS;AACT,QAAQ,MAAM,MAAM,CAAC,yBAAyB,EAAE,SAAS,CAAC,CAAC;AAC3D,KAAK;AACL,IAAI,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AACF,MAAM,cAAc,iBAAiB,IAAI,OAAO,EAAE,CAAC;AAC5C,MAAM,eAAe,GAAG,CAAC,GAAG,KAAK;AACxC,IAAI,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;AAC1C,QAAQ,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACxC,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AACK,MAAM,mBAAmB,GAAG,CAAC,GAAG,KAAK;AAC5C,IAAI,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACpC,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,WAAW,GAAG,CAAC,KAAK,KAAK;AACtC,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE;AACvB,QAAQ,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAClC,KAAK;AACL,IAAI,OAAO,KAAK,CAAC;AACjB,EAAE;AACF;AACA;AACA;AACA;AACY,MAAC,OAAO,GAAG,CAAC,CAAC,KAAK;AAC9B,IAAI,OAAO,CAAC,IAAI,CAAC,qFAAqF,CAAC,CAAC;AACxG,IAAI,OAAO,CAAC,CAAC;AACb,EAAE;AAMK,MAAM,WAAW,GAAG,CAAC,GAAG,KAAK;AACpC,IAAI,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE;AAC5B,QAAQ,OAAO,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC;AACvD,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACrC,KAAK;AACL,CAAC,CAAC;AACF;AACA;AACA;AACO,MAAM,WAAW,GAAG,CAAC,KAAK,KAAK;AACtC,IAAI,OAAO,QAAQ,CAAC,KAAK,CAAC,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC;AACpE,CAAC,CAAC;AACK,MAAM,cAAc,GAAG,CAAC,GAAG,KAAK;AACvC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;AACnC,CAAC,CAAC;AACK,MAAM,eAAe,GAAG,CAAC,GAAG,KAAK;AACxC,IAAI,OAAO,GAAG,CAAC,oBAAoB,CAAC,CAAC;AACrC,CAAC,CAAC;AACK,MAAM,aAAa,GAAG,CAAC,GAAG,KAAK;AACtC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;AACnC,CAAC,CAAC;AACK,MAAM,qBAAqB,GAAG,CAAC,GAAG,EAAE,QAAQ,KAAK;AACxD,IAAI,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACxB,IAAI,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,IAAI,IAAI,CAAC,IAAI,EAAE;AACf,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AACL,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;AACjC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;AACtB,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;AACpB,YAAY,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACjC,SAAS;AACT,KAAK;AACL,SAAS;AACT,QAAQ,MAAM,MAAM,GAAG,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpF,QAAQ,IAAI,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;AACpB,YAAY,IAAI,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,SAAS;AACT,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AACK,MAAM,iBAAiB,GAAG,CAAC,GAAG,EAAE,SAAS,KAAK;AACrD,IAAI,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACjC,IAAI,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACxC,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,kBAAkB,CAAC,CAAC;AACtD,IAAI,MAAM,YAAY,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,IAAI,IAAI,IAAI,KAAK,CAAC,EAAE;AACpB,QAAQ,UAAU,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,aAAa,CAAC,CAAC;AACrD,QAAQ,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,KAAK;AACL,SAAS;AACT,QAAQ,UAAU,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,aAAa,CAAC,CAAC;AAC5E,QAAQ,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACxF,KAAK;AACL,IAAI,OAAO,YAAY,CAAC;AACxB,CAAC,CAAC;AACK,MAAM,yBAAyB,GAAG,CAAC,cAAc,KAAK;AAC7D,IAAI,MAAM,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;AACtC,IAAI,MAAM,OAAO,GAAG;AACpB,QAAQ,eAAe,EAAE,CAAC,UAAU,KAAK;AACzC,YAAY,OAAO,IAAI,wBAAwB,CAAC,eAAe,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;AAC7F,SAAS;AACT,QAAQ,UAAU,EAAE,CAAC,KAAK,KAAK;AAC/B,YAAY,MAAM,QAAQ,GAAG,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACxD,YAAY,IAAI,QAAQ,EAAE;AAC1B,gBAAgB,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;AAChD,oBAAoB,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AAChD,iBAAiB;AACjB,gBAAgB,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9C,gBAAgB,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;AACpC,aAAa;AACb,SAAS;AACT,KAAK,CAAC;AACN,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;AAClB,IAAI,OAAO,OAAO,CAAC;AACnB,CAAC,CAAC;AACK,MAAM,wBAAwB,CAAC;AACtC,IAAI,WAAW,CAAC,iBAAiB,EAAE,gBAAgB,EAAE,UAAU,EAAE;AACjE,QAAQ,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;AACnD,QAAQ,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;AACjD,QAAQ,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACzB,QAAQ,IAAI,UAAU,EAAE;AACxB,YAAY,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AACvC,SAAS;AACT,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC;AACnB,KAAK;AACL,IAAI,SAAS,CAAC,IAAI,EAAE;AACpB,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAClC,QAAQ,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE;AACvC,YAAY,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC5C,SAAS;AACT,KAAK;AACL,IAAI,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE;AACjC,QAAQ,IAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACzD,QAAQ,IAAI,CAAC,QAAQ,EAAE;AACvB,YAAY,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,GAAG,QAAQ,GAAG,EAAE,EAAE,CAAC;AAC/D,SAAS;AACT,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;AACzC,YAAY,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACnC,SAAS;AACT,KAAK;AACL,IAAI,YAAY,CAAC,KAAK,EAAE;AACxB,QAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;AACjC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC9C,YAAY,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC;AAC/C,YAAY,IAAI,KAAK,EAAE;AACvB,gBAAgB,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAClC,gBAAgB,CAAC,EAAE,CAAC;AACpB,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,QAAQ,CAAC,GAAG,EAAE;AAClB,QAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;AACjC,QAAQ,MAAM,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7B,QAAQ,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACxC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;AACnG,YAAY,OAAO;AACnB,SAAS;AACT,QAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvB,QAAQ,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACvC,KAAK;AACL,IAAI,YAAY,CAAC,GAAG,EAAE;AACtB,QAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;AACjC,QAAQ,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;AAChC,YAAY,MAAM,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAChD,YAAY,IAAI,GAAG,IAAI,OAAO,IAAI,OAAO,KAAK,GAAG,EAAE;AACnD,gBAAgB,SAAS;AACzB,aAAa;AACb,YAAY,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACrD,SAAS;AACT,KAAK;AACL,CAAC;AACD,MAAM,IAAI,GAAG,CAAC,CAAC,KAAK;AACpB,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;AACnB,QAAQ,MAAM,QAAQ,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAC9C,KAAK;AACL,IAAI,OAAO,CAAC,CAAC;AACb,CAAC;;AChPM,MAAM,KAAK,GAAG,CAAC,KAAK,KAAK;AAChC,IAAI,OAAO,OAAO,KAAK,KAAK,UAAU,IAAI,OAAO,KAAK,CAAC,SAAS,KAAK,UAAU,CAAC;AAChF,CAAC,CAAC;AACK,MAAM,SAAS,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,KAAK;AACjG,IAAI,IAAI,IAAI,EAAE;AACd,QAAQ,kBAAkB,CAAC,UAAU,CAAC,CAAC;AACvC,KAAK;AACL,IAAI,IAAI,YAAY,CAAC;AACrB,IAAI,MAAM,YAAY,GAAG,CAAC,EAAE,KAAK;AACjC,QAAQ,IAAI,CAAC,YAAY,EAAE;AAC3B,YAAY,YAAY,GAAG,EAAE,CAAC;AAC9B,SAAS;AACT,KAAK,CAAC;AACN,IAAI,MAAM,OAAO,GAAG,OAAO,WAAW,KAAK;AAC3C,QAAQ,IAAI,WAAW,EAAE;AACzB,YAAY,YAAY,CAAC,WAAW,CAAC,CAAC;AACtC,SAAS;AACT,QAAQ,IAAI,SAAS,KAAK,IAAI,EAAE;AAChC,YAAY,OAAO,SAAS,CAAC;AAC7B,SAAS;AACT,QAAQ,IAAI,QAAQ,KAAK,IAAI,EAAE;AAC/B,YAAY,QAAQ,SAAS,GAAG,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;AAC3F,SAAS;AACT,aAAa;AACb,YAAY,IAAI,CAAC,KAAK,EAAE;AACxB,gBAAgB,MAAM,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;AAC7D,aAAa;AACb,YAAY,IAAI,CAAC,YAAY,EAAE;AAC/B,gBAAgB,MAAM,MAAM,CAAC,0BAA0B,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AACxE,aAAa;AACb,YAAY,MAAM,OAAO,GAAG,WAAW,EAAE,CAAC,YAAY,CAAC,YAAY,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AACpF,YAAY,QAAQ,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK;AACvD,gBAAgB,QAAQ,SAAS,GAAG,GAAG,EAAE;AACzC,aAAa,CAAC,EAAE;AAChB,SAAS;AACT,KAAK,CAAC;AACN,IAAI,MAAM,WAAW,GAAG,CAAC,WAAW,KAAK;AACzC,QAAQ,OAAO,SAAS,KAAK,IAAI,GAAG,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACrE,KAAK,CAAC;AACN,IAAI,MAAM,QAAQ,GAAG,CAAC,UAAU,EAAE,QAAQ,KAAK;AAC/C,QAAQ,QAAQ,CAAC,GAAG,IAAI,KAAK;AAC7B,YAAY,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC;AAChC,YAAY,MAAM,EAAE,GAAG,WAAW,EAAE,CAAC;AACrC,YAAY,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK;AACpC,gBAAgB,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE;AACpC,oBAAoB,IAAI,QAAQ,IAAI,QAAQ,EAAE,KAAK,KAAK,EAAE;AAC1D,wBAAwB,OAAO;AAC/B,qBAAqB;AACrB,oBAAoB,MAAM,WAAW,GAAG,uBAAuB,CAAC,UAAU,CAAC,CAAC;AAC5E,oBAAoB,MAAM,OAAO,GAAG;AACpC,wBAAwB,GAAG,WAAW;AACtC,wBAAwB,KAAK,EAAE,GAAG;AAClC,qBAAqB,CAAC;AACtB,oBAAoB,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AACrE,oBAAoB,OAAO,MAAM,CAAC,OAAO,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;AACxD,iBAAiB;AACjB,gBAAgB,MAAM,MAAM,CAAC,uBAAuB,CAAC,CAAC;AACtD,aAAa,CAAC,CAAC;AACf,SAAS,EAAE;AACX,KAAK,CAAC;AACN,IAAI,MAAM,uBAAuB,GAAG,CAAC,MAAM,KAAK;AAChD,QAAQ,IAAI,MAAM,IAAI,IAAI,EAAE;AAC5B,YAAY,OAAO,gBAAgB,EAAE,CAAC;AACtC,SAAS;AACT,aAAa,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;AAClC,YAAY,OAAO,yBAAyB,CAAC,MAAM,CAAC,CAAC;AACrD,SAAS;AACT,aAAa;AACb,YAAY,OAAO,MAAM,CAAC;AAC1B,SAAS;AACT,KAAK,CAAC;AACN,IAAI,MAAM,SAAS,GAAG,gBAAgB,GAAG,IAAI,EAAE;AAC/C,QAAQ,MAAM,EAAE,GAAG,QAAQ,EAAE,CAAC;AAC9B,QAAQ,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;AACzC,QAAQ,OAAO,MAAM,CAAC;AACtB,KAAK,CAAC;AACN,IAAI,MAAM,cAAc,GAAG,SAAS,IAAI,MAAM,CAAC;AAC/C,IAAI,MAAM,IAAI,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC;AAC/C,IAAI,MAAM,GAAG,GAAG,SAAS,CAAC;AAC1B,IAAI,MAAM,OAAO,GAAG;AACpB,QAAQ,SAAS,EAAE,MAAM,cAAc;AACvC,QAAQ,OAAO,EAAE,MAAM,IAAI;AAC3B,QAAQ,OAAO;AACf,QAAQ,aAAa,EAAE,WAAW;AAClC,QAAQ,cAAc,EAAE,YAAY;AACpC,QAAQ,OAAO,EAAE,KAAK;AACtB,QAAQ,QAAQ,EAAE,MAAM;AACxB,QAAQ,WAAW,EAAE,SAAS;AAC9B,QAAQ,MAAM,EAAE,IAAI;AACpB,QAAQ,KAAK,EAAE,QAAQ;AACvB,QAAQ,SAAS,EAAE,OAAO;AAC1B,QAAQ,YAAY,EAAE,UAAU;AAChC,QAAQ,KAAK,EAAE,IAAI;AACnB,KAAK,CAAC;AACN,IAAI,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAClD,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACd,IAAI,OAAO,GAAG,CAAC;AACf,CAAC,CAAC;AACK,MAAM,aAAa,GAAG,CAAC,UAAU,KAAK;AAC7C,IAAI,MAAM,KAAK,GAAG,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AAC9C,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;AACpB,QAAQ,OAAO,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AAC3C,KAAK;AACL,IAAI,OAAO,UAAU,CAAC;AACtB,CAAC,CAAC;AACK,SAAS,SAAS,CAAC,GAAG,EAAE;AAC/B,IAAI,IAAI,IAAI,EAAE;AACd,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;AACzB,YAAY,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;AACzC,SAAS;AACT,KAAK;AACL,CAAC;AACM,MAAM,cAAc,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,KAAK;AAC5D,IAAI,SAAS,CAAC,SAAS,EAAE;AACzB,QAAQ,MAAM;AACd,QAAQ,OAAO;AACf,QAAQ,OAAO;AACf,KAAK,CAAC,CAAC;AACP,CAAC,CAAC;AACK,MAAM,SAAS,GAAG,CAAC,SAAS,EAAE,MAAM,KAAK;AAChD,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,EAAE,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AAC/D,QAAQ,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,SAAS,EAAE;AAC1D,YAAY,OAAO,EAAE,KAAK;AAC1B,YAAY,MAAM;AAClB,SAAS,CAAC,CAAC,CAAC;AACZ,KAAK;AACL,CAAC,CAAC;AACF,MAAM,GAAG,GAAG,MAAM;AAClB,IAAI,IAAI,KAAK,IAAI,QAAQ,EAAE,EAAE;AAC7B,QAAQ,OAAO,CAAC,CAAC;AACjB,KAAK;AACL,IAAI,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;AACzC,QAAQ,OAAO,WAAW,CAAC,GAAG,EAAE,CAAC;AACjC,KAAK;AACL,IAAI,OAAO,CAAC,CAAC;AACb,CAAC;;AC5ID,IAAI,eAAe,GAAG,CAAC,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,CAAC,GAAG,CAAC,UAAU,KAAK;AACjC,IAAI,IAAI,CAAC,WAAW,EAAE;AACtB,QAAQ,MAAM,IAAI,KAAK,CAAC,sIAAsI,CAAC,CAAC;AAChK,KAAK;AACL,IAAI,OAAO,SAAS,CAAC,IAAI,EAAE,GAAG,GAAG,eAAe,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACxF;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,YAAY,GAAG,CAAC,YAAY,KAAK;AAC9C;AACA,IAAI,SAAS,aAAa,CAAC,KAAK,EAAE,GAAG,EAAE;AACvC,QAAQ,SAAS,CAAC,YAAY,CAAC,CAAC;AAChC,QAAQ,IAAI,IAAI,EAAE;AAClB,YAAY,MAAM,CAAC,gBAAgB,EAAE,EAAE,MAAM;AAC7C,gBAAgB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AACtD,oBAAoB,IAAI,GAAG,KAAK,UAAU,EAAE;AAC5C,wBAAwB,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACvD,qBAAqB;AACrB,iBAAiB;AACjB,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,MAAM,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,YAAY,CAAC,MAAM,CAAC;AACxD,QAAQ,MAAM,QAAQ,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;AACvD,QAAQ,OAAO,GAAG,CAAC,OAAO,EAAE;AAC5B,YAAY,CAAC,YAAY,GAAG,YAAY;AACxC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;AACjC,YAAY,QAAQ,EAAE,KAAK,CAAC,QAAQ;AACpC,YAAY,KAAK;AACjB,SAAS,EAAE,QAAQ,CAAC,CAAC;AACrB,KAAK;AACL,IAAI,aAAa,CAAC,kBAAkB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AACvD,IAAI,OAAO,aAAa,CAAC;AACzB,EAAE;AACK,MAAM,eAAe,GAAG,CAAC,SAAS,KAAK;AAC9C,IAAI,OAAO,OAAO,SAAS,IAAI,UAAU,IAAI,SAAS,CAAC,kBAAkB,CAAC,KAAK,SAAS,CAAC;AACzF,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,UAAU,GAAG,CAAC,OAAO,KAAK;AACvC,IAAI,OAAO,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;AACpC;;ACpJA;AAIO,MAAM,YAAY,GAAG,CAAC,KAAK,EAAE,GAAG,KAAK;AAC5C;AACA,IAAI,IAAI,CAAC,GAAG;AACZ,QAAQ,GAAG,GAAG,EAAE,CAAC;AACjB,IAAI,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;AAC9B,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;AAC3B,YAAY,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AACpC,SAAS;AACT,aAAa;AACb,YAAY,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3B,SAAS;AACT,KAAK;AACL,IAAI,OAAO,GAAG,CAAC;AACf,CAAC,CAAC;AACF;AACA;AACA;AACO,SAAS,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,QAAQ,EAAE;AAC5C;AACA;AACA;AACA;AACA,IAAI,MAAM,eAAe,GAAG;AAC5B,QAAQ,QAAQ,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,WAAW;AAC7E,KAAK,CAAC;AACN,IAAI,IAAI,GAAG,CAAC;AACZ,IAAI,IAAI,CAAC,CAAC;AACV,IAAI,KAAK,CAAC,IAAI,KAAK,EAAE;AACrB,QAAQ,IAAI,CAAC,IAAI,KAAK;AACtB,YAAY,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3B;AACA,YAAY,eAAe,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1C,KAAK;AACL,IAAI,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;AACvD;;ACnCA;AACA;AACA;AACA;AACA;AACY,MAAC,IAAI,GAAG,CAAC,KAAK,KAAK;AAC/B,IAAI,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,IAAI,OAAO,GAAG,CAAC,OAAO,EAAE;AACxB,QAAQ,CAAC,MAAM,GAAG,EAAE;AACpB,KAAK,EAAE,IAAI,CAAC,CAAC;AACb;;ACbA;AACA;AACA;AACA;AACY,MAAC,OAAO,GAAG,UAAU,CAAC;;ACYlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,MAAM,GAAG,OAAO,MAAM,EAAE,OAAO,EAAE,IAAI,KAAK;AACvD;AACA,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;AAC7B,QAAQ,OAAO,GAAG,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACrC,KAAK;AACL,IAAI,MAAM,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;AACpC,IAAI,MAAM,WAAW,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;AAC3C,IAAI,IAAI,IAAI,IAAI,WAAW,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE;AAC1D,QAAQ,MAAM,MAAM,CAAC,wCAAwC,EAAE,WAAW,CAAC,CAAC;AAC5E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,gBAAgB,CAAC,WAAW,CAAC,CAAC;AAClC,IAAI,MAAM,cAAc,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;AAC1D,IAAI,MAAM,OAAO,GAAG,IAAI,EAAE,OAAO,CAAC;AAClC,IAAI,IAAI,OAAO,EAAE;AACjB,QAAQ,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AACzD,KAAK;AACL,IAAI,cAAc,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;AAChD,IAAI,cAAc,CAAC,eAAe,GAAGG,YAAU,CAAC,WAAW,EAAE,OAAO,EAAE,GAAG,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;AACxG,IAAI,MAAM,SAAS,GAAG,MAAM,cAAc,CAAC,eAAe,CAAC;AAC3D,IAAI,MAAM,aAAa,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;AACnD,EAAE;AACF,MAAMA,YAAU,GAAG,OAAO,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,cAAc,EAAE,WAAW,KAAK;AAChF,IAAI,MAAM,GAAG,GAAG,mBAAmB,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;AACzD,IAAI,MAAM,SAAS,GAAG,GAAG,CAAC,QAAQ,CAAC;AACnC;AACA,IAAI,IAAI;AACR,QAAQ,MAAM,cAAc,GAAG,MAAMJ,aAAW,CAAC,OAAO,CAAC,CAAC;AAC1D,QAAQ,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;AAC3C,QAAQ,MAAM,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7E,KAAK;AACL,IAAI,OAAO,GAAG,EAAE;AAChB,QAAQ,QAAQ,CAAC,GAAG,CAAC,CAAC;AACtB,KAAK;AACL,IAAI,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,gBAAgB,CAAC,CAAC;AAC/D,IAAI,gBAAgB,CAAC,SAAS,CAAC,CAAC;AAChC,IAAI,IAAI,IAAI,EAAE;AACd,QAAQ,kBAAkB,CAAC,WAAW,CAAC,CAAC;AACxC,QAAQ,gBAAgB,CAAC,SAAS,CAAC,CAAC;AACpC,KAAK;AACL,IAAI,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC;AACK,MAAM,UAAU,GAAG,CAAC,QAAQ,KAAK;AACxC,IAAI,OAAO,UAAU,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,eAAe,GAAG,QAAQ,CAAC;AACtE,CAAC,CAAC;AACK,MAAM,gBAAgB,GAAG,CAAC,WAAW,KAAK;AACjD,IAAI,kBAAkB,CAAC,WAAW,EAAE,WAAW,EAAE,OAAO,IAAI,KAAK,CAAC,CAAC;AACnE,IAAI,kBAAkB,CAAC,WAAW,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;AAC/D,IAAI,kBAAkB,CAAC,WAAW,EAAE,UAAU,EAAE,IAAI,GAAG,SAAS,GAAG,KAAK,CAAC,CAAC;AAC1E,CAAC;;AC3DD,MAAM,aAAa,GAAG,gBAAgB,CAAC;AACvC,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;AACvB,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;AACvB,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;AAChB,MAAM,cAAc,GAAG,MAAM;AACpC,IAAI,MAAM,GAAG,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;AAChC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACd,IAAI,OAAO,GAAG,CAAC;AACf,CAAC,CAAC;AACF;AACA;AACA;AACY,MAAC,SAAS,GAAG,OAAO,IAAI,EAAE,IAAI,KAAK;AAC/C,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC;AACvC,IAAI,MAAM,WAAW,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AACnD,IAAI,MAAM,cAAc,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;AAC7D,IAAI,MAAM,GAAG,GAAG,cAAc,EAAE,CAAC;AACjC,IAAI,MAAM,IAAI,GAAG,mBAAmB,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;AAC1D,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC;AAC/C,IAAI,MAAM,MAAM,GAAG;AACnB,QAAQ,IAAI;AACZ,QAAQ,UAAU,EAAE,EAAE;AACtB,QAAQ,iBAAiB,EAAE,SAAS;AACpC,QAAQ,gBAAgB,EAAE,SAAS;AACnC,QAAQ,OAAO,EAAE,IAAI;AACrB,QAAQ,iBAAiB,EAAE,SAAS;AACpC,QAAQ,SAAS,EAAE,IAAI,KAAK,MAAM,GAAG,SAAS,GAAG,EAAE;AACnD,QAAQ,kBAAkB,EAAE,EAAE;AAC9B,KAAK,CAAC;AACN,IAAI,MAAM,mBAAmB,GAAG;AAChC,QAAQ,GAAG,IAAI,CAAC,mBAAmB;AACnC,QAAQ,aAAa,EAAE,QAAQ;AAC/B,QAAQ,WAAW,EAAE,OAAO,IAAI,KAAK;AACrC,QAAQ,UAAU,EAAE,IAAI,GAAG,SAAS,GAAG,KAAK;AAC5C,QAAQ,QAAQ,EAAE,IAAI,CAAC,IAAI;AAC3B,QAAQ,QAAQ,EAAE,IAAI,KAAK,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC;AAC9D,KAAK,CAAC;AACN,IAAI,cAAc,CAAC,SAAS,GAAG;AAC/B,QAAQ,GAAG,EAAE,IAAI,CAAC,GAAG;AACrB,QAAQ,GAAG,IAAI,CAAC,OAAO;AACvB,KAAK,CAAC;AACN,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;AAC1C,IAAI,cAAc,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;AAChD,IAAI,cAAc,CAAC,eAAe,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;AAC/H,IAAI,MAAM,cAAc,CAAC,eAAe,CAAC;AACzC,EAAE;AACK,MAAM,UAAU,GAAG,OAAO,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,IAAI,KAAK;AAChF,IAAI,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;AACzC,IAAI,MAAM,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,WAAW;AACzD,UAAU,CAAC,MAAM,KAAK;AACtB,YAAY,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;AAC1E,YAAY,OAAO,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;AACrE,SAAS;AACT,UAAU,SAAS,CAAC,CAAC;AACrB,IAAI,IAAI,IAAI,EAAE;AACd,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACzC,YAAY,QAAQ,CAAC,4GAA4G,CAAC,CAAC;AACnI,SAAS;AACT,KAAK;AACL,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;AAChC,CAAC,CAAC;AACK,MAAM,eAAe,GAAG,OAAO,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,KAAK;AACtE,IAAI,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AAChC,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;AAC1C,IAAI,IAAI,KAAK,CAAC;AACd,IAAI,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE;AAC/B,QAAQ,MAAM,CAAC,GAAG,SAAS,CAAC;AAC5B,YAAY,KAAK,CAAC,KAAK,EAAE;AACzB,gBAAgB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACpC,gBAAgB,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AAC5C,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;AAC1B,YAAY,OAAO,CAAC,CAAC;AACrB,SAAS;AACT,QAAQ,KAAK,GAAG,CAAC,CAAC;AAClB,KAAK;AACL,SAAS;AACT,QAAQ,KAAK,GAAG,SAAS,CAAC;AAC1B,KAAK;AACL,IAAI,WAAW,MAAM,KAAK,IAAI,KAAK,EAAE;AACrC,QAAQ,MAAM,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;AACnE,QAAQ,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AACpC,KAAK;AACL,CAAC,CAAC;AACK,MAAM,iBAAiB,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,KAAK;AAClG,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAC7B,IAAI,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC;AAC1C,IAAI,IAAI,SAAS,EAAE;AACnB,QAAQ,KAAK,CAAC,cAAc,GAAG,SAAS,CAAC;AACzC,QAAQ,OAAO,kBAAkB,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;AACnF,KAAK;AACL,IAAI,IAAI,cAAc,GAAG,QAAQ,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;AACnE,IAAI,MAAM,MAAM,GAAG,MAAM,IAAI,KAAK,CAAC;AACnC,IAAI,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;AAC3D,IAAI,IAAI,MAAM,EAAE;AAChB,QAAQ,aAAa,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,mCAAmC,CAAC,CAAC;AACjF,QAAQ,cAAc,IAAI,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;AAC3D,KAAK;AACL,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE;AACrB,QAAQ,cAAc,IAAI,SAAS,GAAG,GAAG,CAAC;AAC1C,KAAK;AACL,IAAI,cAAc,IAAI,KAAK,CAAC;AAC5B,IAAI,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AACjC,IAAI,IAAI,UAAU,EAAE;AACpB,QAAQ,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;AACvC,YAAY,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACjE,SAAS;AACT,KAAK;AACL,IAAI,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AACxE,IAAI,OAAO,IAAI,CAAC,OAAO,EAAE,MAAM;AAC/B;AACA,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE;AACrC,YAAY,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AACxC,YAAY,OAAO;AACnB,SAAS;AACT,QAAQ,IAAI,OAAO,CAAC;AACpB,QAAQ,IAAI,MAAM,EAAE;AACpB,YAAY,aAAa,CAAC,GAAG,EAAE,gCAAgC,CAAC,CAAC;AACjE,YAAY,MAAM,OAAO,GAAG,MAAM,CAAC,iBAAiB,GAAG,GAAG,CAAC,CAAC;AAC5D,YAAY,IAAI,OAAO,EAAE;AACzB,gBAAgB,MAAM,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;AAC1D,gBAAgB,OAAO,GAAG,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,gBAAgB,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AACvF,aAAa;AACb,SAAS;AACT;AACA,QAAQ,IAAI,WAAW,EAAE;AACzB,YAAY,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,MAAM,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;AAC/D,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC,OAAO,EAAE,MAAM;AACnC,YAAY,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AACxC,SAAS,CAAC,CAAC;AACX,KAAK,CAAC,CAAC;AACP,CAAC,CAAC;AACF,MAAM,aAAa,GAAG,CAAC,UAAU,CAAC,CAAC;AAC5B,MAAM,gBAAgB,GAAG,CAAC,UAAU,KAAK;AAChD,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;AAClB,IAAI,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AAChD,QAAQ,IAAI,IAAI,KAAK,yBAAyB,EAAE;AAChD,YAAY,SAAS;AACrB,SAAS;AACT,QAAQ,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,IAAI,IAAI,EAAE;AAC3B,YAAY,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;AAC5E,SAAS;AACT,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AACK,MAAM,uBAAuB,GAAG,CAAC,UAAU,KAAK;AACvD,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;AAClB,IAAI,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AAChD,QAAQ,IAAI,IAAI,KAAK,UAAU,EAAE;AACjC,YAAY,SAAS;AACrB,SAAS;AACT,QAAQ,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,IAAI,IAAI,EAAE;AAC3B,YAAY,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,EAAE,CAAC,CAAC;AAC1E,SAAS;AACT,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AACK,MAAM,qBAAqB,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,KAAK;AACtE,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,OAAO,GAAG,gBAAgB,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;AACrE,IAAI,MAAM,KAAK,GAAG,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAC3C,IAAI,IAAI,KAAK,EAAE;AACf,QAAQ,OAAO;AACf,KAAK;AACL;AACA,IAAI,MAAM,SAAS,GAAG,UAAU,CAAC,uBAAuB,CAAC;AACzD,IAAI,IAAI,SAAS,IAAI,IAAI,EAAE;AAC3B,QAAQ,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAChC,KAAK;AACL,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC;AACK,MAAM,kBAAkB,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,KAAK;AACvF,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAC7B,IAAI,iBAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;AACvD,IAAI,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK;AAC/D,QAAQ,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC;AAC5C,QAAQ,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC;AAChC,QAAQ,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AAC3E,QAAQ,iBAAiB,CAAC,YAAY,GAAG,WAAW,CAAC;AACrD,QAAQ,iBAAiB,CAAC,WAAW,GAAG,MAAM,CAAC;AAC/C,QAAQ,MAAM,gBAAgB,GAAG;AACjC,YAAY,GAAG,MAAM;AACrB,YAAY,IAAI,EAAE,MAAM;AACxB,SAAS,CAAC;AACV,QAAQ,MAAM,aAAa,GAAG;AAC9B,YAAY,GAAG,MAAM;AACrB,YAAY,iBAAiB,EAAE,sBAAsB,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC;AAC7E,YAAY,gBAAgB;AAC5B,YAAY,IAAI,EAAE,MAAM;AACxB,YAAY,iBAAiB;AAC7B,SAAS,CAAC;AACV,QAAQ,MAAM,UAAU,GAAG,EAAE,CAAC;AAC9B,QAAQ,IAAI,KAAK,CAAC,cAAc,EAAE;AAClC,YAAY,MAAM,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,CAAC;AAC/C,YAAY,MAAM,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC;AACjE,YAAY,KAAK,MAAM,KAAK,IAAI,KAAK,CAAC,cAAc,EAAE;AACtD,gBAAgB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;AACxC,oBAAoB,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO;AAC3C,oBAAoB,uBAAuB,EAAE,KAAK,CAAC,OAAO;AAC1D,iBAAiB,CAAC,CAAC,CAAC;AACpB,aAAa;AACb,SAAS;AACT,QAAQ,MAAM,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChD,QAAQ,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,GAAG,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC;AACzF,QAAQ,MAAM,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE;AAC7C,YAAY,CAAC,YAAY,GAAG,OAAO;AACnC,YAAY,CAAC,UAAU,GAAG,KAAK;AAC/B,YAAY,QAAQ,EAAE,GAAG,CAAC,IAAI;AAC9B,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AACrB,QAAQ,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;AAC3B,QAAQ,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtC,QAAQ,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;AACtC,QAAQ,OAAO,iBAAiB,CAAC,aAAa,EAAE,KAAK,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,MAAM,KAAK;AAC7G,YAAY,IAAI,KAAK,CAAC,OAAO,GAAG,8BAA8B,EAAE;AAChE,gBAAgB,OAAO,CAAC,mEAAmE,CAAC,CAAC;AAC7F,aAAa;AACb,YAAY,IAAI,WAAW,EAAE;AAC7B,gBAAgB,OAAO,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,MAAM,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;AAChG,aAAa;AACb,iBAAiB;AACjB,gBAAgB,OAAO,gBAAgB,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AAC/D,aAAa;AACb,SAAS,CAAC,CAAC;AACX,KAAK,CAAC,CAAC;AACP,CAAC,CAAC;AACF,MAAM,gBAAgB,GAAG,CAAC,UAAU,EAAE,MAAM,KAAK;AACjD,IAAI,MAAM,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;AAC3D,IAAI,IAAI,iBAAiB,EAAE;AAC3B,QAAQ,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,KAAK;AACvE,YAAY,MAAM,KAAK,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AACtD,YAAY,IAAI,KAAK,EAAE;AACvB,gBAAgB,OAAO,GAAG,CAAC,YAAY,EAAE;AACzC,oBAAoB,CAAC,KAAK,GAAG,QAAQ;AACrC,oBAAoB,MAAM,EAAE,EAAE;AAC9B,oBAAoB,aAAa,EAAE,MAAM;AACzC,oBAAoB,QAAQ,EAAE,KAAK;AACnC,iBAAiB,CAAC,CAAC;AACnB,aAAa;AACb,SAAS,CAAC,CAAC;AACX,QAAQ,OAAO,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;AACpE,KAAK;AACL,CAAC,CAAC;AACF,MAAM,sBAAsB,GAAG,CAAC,QAAQ,EAAE,MAAM,KAAK;AACrD,IAAI,MAAM,YAAY,GAAG,mBAAmB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC/D,IAAI,IAAI,YAAY,KAAK,IAAI,EAAE;AAC/B,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AACL,IAAI,MAAM,OAAO,GAAG,EAAE,CAAC;AACvB,IAAI,KAAK,MAAM,KAAK,IAAI,YAAY,EAAE;AACtC,QAAQ,IAAI,QAAQ,GAAG,EAAE,CAAC;AAC1B,QAAQ,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;AAC9B,YAAY,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AAChD,SAAS;AACT,QAAQ,IAAI,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACtC,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,YAAY,OAAO,CAAC,QAAQ,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC;AAC3C,SAAS;AACT,QAAQ,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1B,KAAK;AACL,IAAI,OAAO,OAAO,CAAC;AACnB,CAAC,CAAC;AACK,MAAM,aAAa,GAAG,CAAC,QAAQ,KAAK;AAC3C,IAAI,MAAM,GAAG,GAAG;AAChB,QAAQ,QAAQ;AAChB,QAAQ,CAAC,KAAK,GAAG,IAAI;AACrB,KAAK,CAAC;AACN,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACd,IAAI,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC3B,CAAC,CAAC;AACK,MAAM,UAAU,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,KAAK;AACxE,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;AAC9B,IAAI,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AACnC,IAAI,IAAI,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,EAAE;AAC7C,QAAQ,OAAO,CAAC,OAAO,IAAI,iBAAiB,CAAC;AAC7C,KAAK;AACL,IAAI,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AACrC,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AAC7B,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACjC,QAAQ,MAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC;AAC7D,QAAQ,MAAM,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC;AACpC,QAAQ,MAAM,MAAM,GAAG,OAAO,KAAK,MAAM,CAAC;AAC1C,QAAQ,IAAI,cAAc,GAAG,GAAG,GAAG,OAAO,CAAC;AAC3C,QAAQ,IAAI,SAAS,GAAG,KAAK,CAAC;AAC9B,QAAQ,aAAa,CAAC,GAAG,CAAC,CAAC;AAC3B,QAAQ,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC/C,YAAY,IAAI,IAAI,KAAK,UAAU;AACnC,gBAAgB,IAAI,KAAK,KAAK;AAC9B,gBAAgB,IAAI,KAAK,OAAO;AAChC,gBAAgB,IAAI,KAAK,WAAW;AACpC,gBAAgB,IAAI,KAAK,yBAAyB,EAAE;AACpD,gBAAgB,SAAS;AACzB,aAAa;AACb,YAAY,IAAI,IAAI,KAAK,KAAK,EAAE;AAChC,gBAAgB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;AACzC,gBAAgB,SAAS;AACzB,aAAa;AACb,YAAY,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;AAC1F,YAAY,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;AAChC,gBAAgB,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;AAC3D,gBAAgB,SAAS;AACzB,aAAa;AACb,YAAY,MAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;AAClD,YAAY,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;AACjC,gBAAgB,IAAI,OAAO,EAAE;AAC7B,oBAAoB,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC;AACrD,oBAAoB,YAAY,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;AAClE,oBAAoB,SAAS,GAAG,IAAI,CAAC;AACrC,iBAAiB;AACjB,gBAAgB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;AACpC,aAAa;AACb,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;AAClD,gBAAgB,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;AACxG,aAAa;AACb,YAAY,MAAM,SAAS,GAAG,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAChE,YAAY,IAAI,SAAS,IAAI,IAAI,EAAE;AACnC,gBAAgB,cAAc;AAC9B,oBAAoB,GAAG,IAAI,KAAK,KAAK,EAAE,GAAG,QAAQ,GAAG,QAAQ,GAAG,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC;AACpG,aAAa;AACb,SAAS;AACT,QAAQ,MAAM,SAAS,GAAG,KAAK,CAAC,EAAE,CAAC;AACnC,QAAQ,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,CAAC;AAC1D,QAAQ,IAAI,QAAQ,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;AAClD,QAAQ,IAAI,OAAO,EAAE;AACrB,YAAY,IAAI,IAAI,EAAE;AACtB,gBAAgB,IAAI,OAAO,KAAK,MAAM,EAAE;AACxC,oBAAoB,MAAM,MAAM,CAAC,uBAAuB,CAAC,CAAC;AAC1D,iBAAiB;AACjB,aAAa;AACb,YAAY,IAAI,OAAO,CAAC,UAAU,EAAE;AACpC,gBAAgB,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC;AACzE,aAAa;AACb,YAAY,IAAI,OAAO,CAAC,OAAO,GAAG,8BAA8B,EAAE;AAClE,gBAAgB,SAAS,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;AAC9C,gBAAgB,OAAO,CAAC,OAAO,IAAI,CAAC,8BAA8B,CAAC;AACnE,aAAa;AACb,SAAS;AACT;AACA,QAAQ,IAAI,MAAM,EAAE;AACpB,YAAY,KAAK,IAAI,OAAO,CAAC;AAC7B,SAAS;AACT,QAAQ,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE;AACvC,YAAY,KAAK,IAAI,OAAO,CAAC;AAC7B,SAAS;AACT,QAAQ,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;AACnC,QAAQ,IAAI,QAAQ,EAAE;AACtB,YAAY,cAAc,IAAI,UAAU,GAAG,QAAQ,GAAG,GAAG,CAAC;AAC1D,SAAS;AACT,QAAQ,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AAClC,YAAY,MAAM,MAAM,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;AACrD,YAAY,KAAK,MAAM,QAAQ,IAAI,MAAM,EAAE;AAC3C,gBAAgB,cAAc,IAAI,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,GAAG,CAAC;AACrG,gBAAgB,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;AACjF,aAAa;AACb,SAAS;AACT,QAAQ,IAAI,GAAG,IAAI,IAAI,EAAE;AACzB,YAAY,cAAc,IAAI,UAAU,GAAG,GAAG,GAAG,GAAG,CAAC;AACrD,SAAS;AACT,QAAQ,IAAI,KAAK,IAAI,KAAK,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,EAAE;AACjE,YAAY,MAAM,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpD,YAAY,cAAc,IAAI,SAAS,GAAG,KAAK,GAAG,GAAG,CAAC;AACtD,YAAY,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;AAC/B,YAAY,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1C,SAAS;AACT,QAAQ,IAAI,KAAK,GAAG,OAAO,EAAE;AAC7B,YAAY,cAAc,IAAI,SAAS,CAAC;AACxC,SAAS;AACT,QAAQ,cAAc,IAAI,GAAG,CAAC;AAC9B,QAAQ,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AACrC,QAAQ,IAAI,aAAa,CAAC,OAAO,CAAC,EAAE;AACpC,YAAY,OAAO;AACnB,SAAS;AACT,QAAQ,MAAM,SAAS,GAAG,KAAK,CAAC,uBAAuB,CAAC;AACxD,QAAQ,IAAI,SAAS,IAAI,IAAI,EAAE;AAC/B,YAAY,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;AAC5C,YAAY,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,YAAY,OAAO;AACnB,SAAS;AACT,QAAQ,IAAI,CAAC,MAAM,EAAE;AACrB,YAAY,KAAK,IAAI,CAAC,OAAO,CAAC;AAC9B,SAAS;AACT,QAAQ,IAAI,OAAO,KAAK,MAAM,EAAE;AAChC,YAAY,KAAK,IAAI,OAAO,CAAC;AAC7B,SAAS;AACT,aAAa;AACb,YAAY,KAAK,IAAI,CAAC,OAAO,CAAC;AAC9B,SAAS;AACT,QAAQ,MAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAC3E,QAAQ,OAAO,IAAI,CAAC,OAAO,EAAE,MAAM;AACnC;AACA,YAAY,IAAI,MAAM,EAAE;AACxB,gBAAgB,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,SAAS,EAAE;AACrD,oBAAoB,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACzE,iBAAiB;AACjB,gBAAgB,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;AAC5C,aAAa;AACb;AACA,YAAY,IAAI,CAAC,WAAW,EAAE;AAC9B,gBAAgB,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,gBAAgB,OAAO;AACvB,aAAa;AACb;AACA,YAAY,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,MAAM;AACnD,gBAAgB,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,aAAa,CAAC,CAAC;AACf,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,IAAI,OAAO,KAAK,OAAO,EAAE;AAC7B,QAAQ,MAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;AACzC,QAAQ,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;AACxC,QAAQ,OAAO,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;AAC7F,KAAK;AACL,IAAI,IAAI,OAAO,KAAK,MAAM,EAAE;AAC5B,QAAQ,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACtC,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,IAAI,OAAO,KAAK,iBAAiB,EAAE;AACvC,QAAQ,OAAO,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAC5D,KAAK;AACL,IAAI,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AAChF,IAAI,OAAO,WAAW,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;AAChE,CAAC,CAAC;AACK,MAAM,WAAW,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,KAAK;AACzE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;AACnD,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AACpD,QAAQ,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/C,KAAK;AACL,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;AAC9B,QAAQ,OAAO,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;AACpE,KAAK;AACL,SAAS,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;AAC5B,QAAQ,OAAO,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AACzD,KAAK;AACL,SAAS,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;AAC7B,QAAQ,MAAM,UAAU,GAAG,KAAK,GAAG,OAAO,CAAC;AAC3C,QAAQ,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC;AACjD,QAAQ,IAAI,KAAK,CAAC;AAClB,QAAQ,IAAI,MAAM,EAAE;AACpB,YAAY,IAAI,CAAC,UAAU,EAAE;AAC7B,gBAAgB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACnC,gBAAgB,MAAM,EAAE,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACrD,gBAAgB,YAAY,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;AAChE,gBAAgB,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,EAAE,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;AACvF,gBAAgB,OAAO;AACvB,aAAa;AACb,iBAAiB;AACjB,gBAAgB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3E,aAAa;AACb,SAAS;AACT,QAAQ,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACrD,QAAQ,OAAO;AACf,KAAK;AACL,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;AAC9B,QAAQ,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AACpC,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC;AAC1F,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,CAAC,oEAAoE,EAAE,IAAI,CAAC,CAAC;AAC5F,KAAK;AACL,CAAC,CAAC;AACF,SAAS,YAAY,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE;AAC3D,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AAC1B,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;AAC5B,QAAQ,OAAO,WAAW,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAChE,KAAK;AACL,IAAI,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AAC/B,QAAQ,OAAO,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AACnE,KAAK;AACL,IAAI,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AAC/B,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,IAAI,YAAY,GAAG,CAAC,CAAC;AACzB,IAAI,MAAM,OAAO,GAAG,EAAE,CAAC;AACvB,IAAI,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,KAAK;AAC1D,QAAQ,MAAM,MAAM,GAAG,EAAE,CAAC;AAC1B,QAAQ,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7B,QAAQ,MAAM,WAAW,GAAG,WAAW;AACvC,cAAc;AACd,gBAAgB,KAAK,CAAC,KAAK,EAAE;AAC7B,oBAAoB,IAAI,YAAY,KAAK,KAAK,EAAE;AAChD,wBAAwB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC5C,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3C,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,cAAc,MAAM,CAAC;AACrB,QAAQ,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;AAC5E,QAAQ,MAAM,IAAI,GAAG,MAAM;AAC3B,YAAY,YAAY,EAAE,CAAC;AAC3B,YAAY,IAAI,OAAO,CAAC,MAAM,GAAG,YAAY,EAAE;AAC/C,gBAAgB,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;AAC9E,aAAa;AACb,SAAS,CAAC;AACV,QAAQ,IAAI,SAAS,CAAC,QAAQ,CAAC,IAAI,WAAW,EAAE;AAChD,YAAY,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnE,SAAS;AACT,aAAa,IAAI,SAAS,CAAC,QAAQ,CAAC,EAAE;AACtC,YAAY,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACvC,SAAS;AACT,aAAa,IAAI,WAAW,EAAE;AAC9B,YAAY,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1C,SAAS;AACT,aAAa;AACb,YAAY,YAAY,EAAE,CAAC;AAC3B,YAAY,OAAO,SAAS,CAAC;AAC7B,SAAS;AACT,KAAK,EAAE,SAAS,CAAC,CAAC;AAClB,CAAC;AACM,MAAM,mBAAmB,GAAG,CAAC,QAAQ,EAAE,MAAM,KAAK;AACzD,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AAC1B,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,MAAM,MAAM,GAAG,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC1D,IAAI,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;AACtD,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AAC5B,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AACK,MAAM,cAAc,GAAG,CAAC,GAAG,KAAK;AACvC,IAAI,IAAI,CAAC,GAAG,EAAE;AACd,QAAQ,OAAO,EAAE,CAAC;AAClB,KAAK;AACL,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AACjC,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AAC5B,QAAQ,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC7B,KAAK;AACL,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE;AAC3B,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;AAC5D,YAAY,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AACnC,YAAY,IAAI,KAAK,EAAE;AACvB,gBAAgB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjC,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5B,CAAC,CAAC;AACK,MAAM,oBAAoB,GAAG,CAAC,QAAQ,EAAE,MAAM,KAAK;AAC1D,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AAC1B,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;AAC3B,QAAQ,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,oBAAoB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;AACxE,KAAK;AACL,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC;AAChC,QAAQ,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;AACjC,QAAQ,QAAQ,CAAC,IAAI,KAAK,MAAM;AAChC,QAAQ,QAAQ,CAAC,IAAI,KAAK,iBAAiB;AAC3C,QAAQ,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;AACnC,QAAQ,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;AAClG,QAAQ,OAAO,mBAAmB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAChD,KAAK;AACL,IAAI,OAAO,QAAQ,CAAC;AACpB,CAAC,CAAC;AACF,MAAM,iBAAiB,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,WAAW,KAAK;AACxD,IAAI,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC1C,IAAI,MAAM,MAAM,GAAG;AACnB,QAAQ,CAAC,kBAAkB,GAAG,gBAAgB;AAC9C,KAAK,CAAC;AACN,IAAI,KAAK,CAAC,OAAO,GAAG,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;AACxE,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AAC3B,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,MAAM,aAAa,IAAI,MAAM,CAAC,UAAU,CAAC;AAC7C,QAAQ,WAAW,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC,CAAC;AAC9C,IAAI,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;AAC7B,QAAQ,IAAI,IAAI,KAAK,UAAU,IAAI,IAAI,KAAK,KAAK,EAAE;AACnD,YAAY,SAAS;AACrB,SAAS;AACT,QAAQ,IAAI,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAAE;AAC3C,YAAY,MAAM,CAAC,iBAAiB,GAAG,IAAI,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;AACnE,SAAS;AACT,aAAa;AACb,YAAY,MAAM,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AAC7C,SAAS;AACT,KAAK;AACL,CAAC,CAAC;AACF,SAAS,cAAc,CAAC,IAAI,EAAE;AAC9B,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;AAC5B,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,SAAS,gBAAgB,CAAC,IAAI,EAAE,KAAK,EAAE;AACvC,IAAI,IAAI,IAAI,KAAK,OAAO,EAAE;AAC1B,QAAQ,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC;AACrC,KAAK;AACL,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,IAAI,EAAE;AAC1C,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,IAAI,KAAK,KAAK,IAAI,EAAE;AACxB,QAAQ,OAAO,EAAE,CAAC;AAClB,KAAK;AACL,IAAI,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;AACzB,CAAC;AACD,MAAM,gBAAgB,GAAG;AACzB,IAAI,KAAK,EAAE,IAAI;AACf,IAAI,KAAK,EAAE,IAAI;AACf,IAAI,MAAM,EAAE,IAAI;AAChB,IAAI,QAAQ,EAAE,IAAI;AAClB,IAAI,QAAQ,EAAE,IAAI;AAClB,CAAC,CAAC;AACF,MAAM,aAAa,GAAG;AACtB,IAAI,IAAI,EAAE,IAAI;AACd,IAAI,IAAI,EAAE,IAAI;AACd,IAAI,QAAQ,EAAE,IAAI;AAClB,IAAI,OAAO,EAAE,IAAI;AACjB,IAAI,EAAE,EAAE,IAAI;AACZ,IAAI,GAAG,EAAE,IAAI;AACb,IAAI,KAAK,EAAE,IAAI;AACf,IAAI,KAAK,EAAE,IAAI;AACf,IAAI,EAAE,EAAE,IAAI;AACZ,IAAI,GAAG,EAAE,IAAI;AACb,IAAI,KAAK,EAAE,IAAI;AACf,IAAI,MAAM,EAAE,IAAI;AAChB,IAAI,IAAI,EAAE,IAAI;AACd,IAAI,IAAI,EAAE,IAAI;AACd,IAAI,KAAK,EAAE,IAAI;AACf,IAAI,MAAM,EAAE,IAAI;AAChB,IAAI,KAAK,EAAE,IAAI;AACf,IAAI,GAAG,EAAE,IAAI;AACb,CAAC,CAAC;AACF,MAAM,WAAW,GAAG,QAAQ,CAAC;AAC7B,MAAM,iBAAiB,GAAG,OAAO,CAAC;AAC3B,MAAM,UAAU,GAAG,CAAC,CAAC,KAAK;AACjC,IAAI,OAAO,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,KAAK;AACzC,QAAQ,QAAQ,CAAC;AACjB,YAAY,KAAK,GAAG;AACpB,gBAAgB,OAAO,OAAO,CAAC;AAC/B,YAAY,KAAK,GAAG;AACpB,gBAAgB,OAAO,MAAM,CAAC;AAC9B,YAAY,KAAK,GAAG;AACpB,gBAAgB,OAAO,MAAM,CAAC;AAC9B,YAAY;AACZ,gBAAgB,OAAO,EAAE,CAAC;AAC1B,SAAS;AACT,KAAK,CAAC,CAAC;AACP,CAAC,CAAC;AACK,MAAM,UAAU,GAAG,CAAC,CAAC,KAAK;AACjC,IAAI,OAAO,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC,KAAK;AAC/C,QAAQ,QAAQ,CAAC;AACjB,YAAY,KAAK,GAAG;AACpB,gBAAgB,OAAO,OAAO,CAAC;AAC/B,YAAY,KAAK,GAAG;AACpB,gBAAgB,OAAO,QAAQ,CAAC;AAChC,YAAY;AACZ,gBAAgB,OAAO,EAAE,CAAC;AAC1B,SAAS;AACT,KAAK,CAAC,CAAC;AACP,CAAC,CAAC;AAIF,MAAM,kBAAkB,GAAG,CAAC,IAAI,KAAK;AACrC,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,QAAQ,KAAK,KAAK,CAAC;AACtD,CAAC;;AC7qBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,QAAQ,GAAG,CAAC,YAAY,EAAE,IAAI,KAAK;AAChD,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;AACnD,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE;AACrB,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,MAAM,KAAK,GAAG,UAAU,CAAC,YAAY,CAAC,GAAG,YAAY,EAAE,GAAG,YAAY,CAAC;AAC3E,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,KAAK,EAAE;AAClC,QAAQ,GAAG,CAAC,KAAK,CAAC,CAAC;AACnB,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,SAAS;AACT,QAAQ,MAAM,cAAc,GAAG,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC;AACzE,QAAQ,MAAM,SAAS,GAAG,IAAI,EAAE,SAAS,IAAI,KAAK,CAAC;AACnD,QAAQ,MAAM,KAAK,GAAG,SAAS,GAAG,gBAAgB,GAAG,CAAC,CAAC;AACvD,QAAQ,MAAM,QAAQ,GAAG,gBAAgB,CAAC,KAAK,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;AACxE,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAC;AACtB,QAAQ,OAAO,QAAQ,CAAC;AACxB,KAAK;AACL;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,MAAM,GAAG,CAAC,OAAO,KAAK;AACnC,IAAI,OAAO,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;AACjC;;ACvCA;AACA;AACA;AACO,SAAS,UAAU,CAAC,GAAG,EAAE,YAAY,EAAE;AAC9C,IAAI,MAAM,GAAG,GAAG,gBAAgB,EAAE,CAAC;AACnC,IAAI,OAAO,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC;AACpF,CAAC;AACD;AACA;AACA;AACA;AACY,MAAC,cAAc,GAAG;;ACZ9B;AAKO,MAAM,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;AAC9B,MAAM,eAAe,GAAG,CAAC,GAAG,EAAE,OAAO,KAAK;AACjD,IAAI,IAAI,IAAI,EAAE;AACd,QAAQ,OAAO,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC7C,KAAK;AACL,IAAI,IAAI,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC5C,IAAI,IAAI,CAAC,QAAQ,EAAE;AACnB,QAAQ,WAAW,CAAC,GAAG,CAAC,OAAO,GAAG,QAAQ,GAAG,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,CAAC;AAC7E,KAAK;AACL,IAAI,OAAO,QAAQ,CAAC;AACpB,CAAC,CAAC;AACK,MAAM,eAAe,GAAG,CAAC,GAAG,EAAE,OAAO,KAAK;AACjD,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;AAC3B,IAAI,MAAM,GAAG,GAAG,EAAE,CAAC;AACnB,IAAI,MAAM,KAAK,GAAG,EAAE,CAAC;AACrB,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC;AAChB,IAAI,IAAI,OAAO,GAAG,GAAG,CAAC;AACtB,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC;AACpB,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AAEnB,IAAI,OAAO,GAAG,GAAG,GAAG,EAAE;AAItB,QAAQ,IAAI,EAAE,GAAG,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;AACvC,QAAQ,IAAI,EAAE,KAAK,SAAS,EAAE;AAC9B,YAAY,GAAG,EAAE,CAAC;AAClB,YAAY,EAAE,GAAG,CAAC,CAAC;AACnB,SAAS;AACT,QAAQ,MAAM,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;AACzC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC9C,YAAY,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAChC,YAAY,MAAM,CAAC,YAAY,EAAE,QAAQ,EAAE,OAAO,CAAC,GAAG,GAAG,CAAC;AAC1D,YAAY,IAAI,YAAY,KAAK,MAAM;AACvC,gBAAgB,YAAY,KAAK,GAAG;AACpC,iBAAiB,YAAY,KAAK,KAAK,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3D,iBAAiB,YAAY,KAAK,UAAU,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE;AACvE,gBAAgB,IAAI,QAAQ,KAAK,EAAE;AACnC,oBAAoB,QAAQ,KAAK,GAAG;AACpC,qBAAqB,QAAQ,KAAK,KAAK,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC;AACvD,qBAAqB,QAAQ,KAAK,SAAS,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC;AAC1E,qBAAqB,QAAQ,KAAK,UAAU,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC,EAAE;AACnE,oBAAoB,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE;AAC3D,wBAAwB,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;AAC5C;AACA,4BAA4B,EAAE,GAAG,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AACzD,yBAAyB;AAGzB;AACA,wBAAwB,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,IAAI,iBAAiB,EAAE;AAC9E,4BAA4B,IAAI,OAAO,KAAK,iBAAiB,EAAE;AAC/D,gCAAgC,IAAI,IAAI,KAAK,YAAY,IAAI,CAAC,sBAAsB,EAAE,EAAE;AACxF;AACA,oCAAoC,IAAI,iBAAiB,CAAC,EAAE,CAAC,EAAE;AAC/D;AACA,wCAAwC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AACvD,qCAAqC;AACrC,yCAAyC;AACzC;AACA,wCAAwC,qBAAqB,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AACvE,qCAAqC;AACrC,oCAAoC,OAAO,EAAE,CAAC;AAC9C,iCAAiC;AACjC,qCAAqC;AACrC,oCAAoC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,EAAE;AAChE;AACA,wCAAwC,MAAM,MAAM,GAAG,QAAQ,IAAI,SAAS,GAAG,CAAC,GAAG,QAAQ,IAAI,iBAAiB,GAAG,CAAC,GAAG,CAAC,CAAC;AACzH,wCAAwC,qBAAqB,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC;AAC5E,qCAAqC;AACrC,iCAAiC;AACjC,6BAA6B;AAC7B,4BAA4B,IAAI,QAAQ,KAAK,SAAS,EAAE;AACxD;AACA;AACA;AACA,gCAAgC,GAAG,EAAE,CAAC;AACtC,gCAAgC,EAAE,GAAG,MAAM,CAAC;AAC5C,6BAA6B;AAC7B,4BAA4B,GAAG;AAC/B,gCAAgC,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC;AAC3D,gCAAgC,IAAI,IAAI,KAAK,YAAY,EAAE;AAC3D;AACA,oCAAoC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AACnD,oCAAoC,OAAO,EAAE,CAAC;AAC9C,iCAAiC;AACjC,6BAA6B,QAAQ,iBAAiB,CAAC,IAAI,CAAC,EAAE;AAC9D,yBAAyB;AACzB,6BAA6B;AAC7B,4BAA4B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7C,4BAA4B,IAAI,IAAI,KAAK,YAAY,IAAI,OAAO,KAAK,IAAI,EAAE;AAC3E,gCAAgC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAC/C,gCAAgC,OAAO,GAAG,GAAG,CAAC;AAC9C,6BAA6B;AAC7B,iCAAiC,IAAI,OAAO,KAAK,aAAa,EAAE;AAChE;AACA,gCAAgC,qBAAqB,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAC/D,6BAA6B;AAC7B,4BAA4B,IAAI,GAAG,OAAO,CAAC;AAE3C,yBAAyB;AACzB,wBAAwB,MAAM;AAC9B,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,QAAQ,MAAM,GAAG,EAAE,CAAC;AACpB,KAAK;AACL,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACxB,IAAI,SAAS,KAAK,CAAC,GAAG,EAAE;AACxB,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;AAE9C,QAAQ,OAAO,GAAG,GAAG,CAAC;AACtB,KAAK;AACL,IAAI,SAAS,qBAAqB,CAAC,GAAG,EAAE;AACxC,QAAQ,IAAI,IAAI,KAAK,YAAY,IAAI,sBAAsB,EAAE;AAC7D,YAAY,OAAO;AACnB,QAAQ,KAAK,CAAC,GAAG,CAAC,CAAC;AACnB,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,4BAA4B,EAAE,OAAO,CAAC,CAAC;AAE7D,KAAK;AACL,IAAI,SAAS,SAAS,CAAC,GAAG,EAAE;AAC5B,QAAQ,IAAI,MAAM,GAAG,CAAC,CAAC;AACvB,QAAQ,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;AAC1C,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;AACzC;AACA,gBAAgB,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;AACtD,oBAAoB,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;AACnC,oBAAoB,MAAM;AAC1B,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,QAAQ,KAAK,EAAE,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;AACtE,YAAY,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;AACrC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjD,gBAAgB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,SAAS,MAAM,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;AAC1F,oBAAoB,SAAS,KAAK,CAAC;AACnC,iBAAiB;AACjB,aAAa;AACb;AACA,YAAY,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;AACvC,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,IAAI,SAAS,sBAAsB,GAAG;AACtC,QAAQ,OAAO,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;AAC1F,KAAK;AACL,CAAC,CAAC;AACF,MAAM,OAAO,GAAG,CAAC,EAAE,KAAK;AACxB,IAAI,QAAQ,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AACjC,SAAS,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC5B,SAAS,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC5B,QAAQ,EAAE,IAAI,IAAI;AAClB,QAAQ,EAAE,KAAK,UAAU;AACzB,QAAQ,EAAE,KAAK,IAAI,EAAE;AACrB,CAAC,CAAC;AACF,MAAM,iBAAiB,GAAG,CAAC,EAAE,KAAK;AAClC,IAAI,OAAO,EAAE,KAAK,KAAK,IAAI,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,YAAY,IAAI,EAAE,KAAK,IAAI,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC;AAC3F,CAAC,CAAC;AACF,MAAM,iBAAiB,GAAG,CAAC,IAAI,KAAK;AACpC,IAAI,QAAQ,IAAI,KAAK,WAAW,IAAI,IAAI,KAAK,cAAc,IAAI,IAAI,KAAK,WAAW,IAAI,IAAI,KAAK,YAAY,EAAE;AAC9G,CAAC,CAAC;AACF,MAAM,YAAY,GAAG,CAAC,EAAE,KAAK;AAC7B,IAAI,OAAO,EAAE,KAAK,KAAK,IAAI,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,OAAO,IAAI,EAAE,KAAK,eAAe,CAAC;AAClF,CAAC,CAAC;AA2BF,MAAM,IAAI,GAAG,CAAC,CAAC;AACf,MAAM,sBAAsB,GAAG,CAAC,CAAC;AACjC,MAAM,YAAY,GAAG,CAAC,CAAC;AACvB,MAAM,uBAAuB,GAAG,CAAC,CAAC;AAClC,MAAM,WAAW,GAAG,CAAC,CAAC;AACtB,MAAM,YAAY,GAAG,CAAC,CAAC;AACvB,MAAM,aAAa,GAAG,CAAC,CAAC;AACxB,MAAM,YAAY,GAAG,CAAC,CAAC;AACvB,MAAM,gBAAgB,GAAG,CAAC,CAAC;AAC3B,MAAM,UAAU,GAAG,CAAC,CAAC;AACrB,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,MAAM,WAAW,GAAG,EAAE,CAAC;AACvB,MAAM,WAAW,GAAG,EAAE,CAAC;AACvB,MAAM,IAAI,GAAG,EAAE,CAAC;AAChB,MAAM,YAAY,GAAG,EAAE,CAAC;AACxB,MAAM,YAAY,GAAG,EAAE,CAAC;AACxB,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAC5B;AACA,MAAM,IAAI,GAAG,EAAE,CAAC;AAChB,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,MAAM,GAAG,GAAG,CAAC,CAAC;AACd,MAAM,KAAK,GAAG,CAAC,CAAC;AAChB,MAAM,SAAS,GAAG,CAAC,CAAC;AACpB,MAAM,UAAU,GAAG,CAAC,CAAC;AACrB,MAAM,GAAG,GAAG,CAAC,CAAC;AACd,MAAM,OAAO,GAAG,EAAE,CAAC;AACnB,MAAM,eAAe,GAAG,EAAE,CAAC;AAC3B,MAAM,KAAK,GAAG,EAAE,CAAC;AACjB,MAAM,YAAY,GAAG,EAAE,CAAC;AACxB,MAAM,IAAI,GAAG,EAAE,CAAC;AAChB,MAAM,YAAY,GAAG,EAAE,CAAC;AACxB,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAC5B,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,MAAM,IAAI,GAAG,EAAE,CAAC;AAChB;AACA,MAAM,IAAI,GAAG,EAAE,CAAC;AAChB,MAAM,GAAG,GAAG,EAAE,CAAC;AACf,MAAM,aAAa,GAAG,EAAE,CAAC;AACzB,MAAM,EAAE,GAAG,EAAE,CAAC;AACd,MAAM,EAAE,GAAG,EAAE,CAAC;AACd,MAAM,KAAK,GAAG,EAAE,CAAC;AACjB,MAAM,SAAS,GAAG,EAAE,CAAC;AACrB;AACA,MAAM,EAAE,GAAG,EAAE,CAAC;AACd,MAAM,CAAC,GAAG,EAAE,CAAC;AACb,MAAM,CAAC,GAAG,EAAE,CAAC;AACb,MAAM,YAAY,GAAG,EAAE,CAAC;AACxB,MAAM,aAAa,GAAG,EAAE,CAAC;AACzB,MAAM,SAAS,GAAG,EAAE,CAAC;AACrB,MAAM,UAAU,GAAG,EAAE,CAAC;AACtB,MAAM,SAAS,GAAG,IAAI,CAAC;AACvB,MAAM,CAAC,GAAG,EAAE,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,CAAC,GAAG,GAAG,CAAC;AACd,MAAM,UAAU,GAAG,GAAG,CAAC;AACvB,MAAM,WAAW,GAAG,GAAG,CAAC;AACxB,MAAM,gBAAgB,gBAAgB,CAAC,MAAM;AAC7C,IAAI,CAAC,GAAG,EAAE,YAAY,EAAE,YAAY,CAAC;AACrC,IAAI,CAAC,GAAG,EAAE,YAAY,EAAE,YAAY,CAAC;AACrC,IAAI,CAAC,GAAG,EAAE,aAAa,EAAE,gBAAgB,EAAE,GAAG,CAAC;AAC/C,CAAC,GAAG,CAAC;AACL,MAAM,aAAa,gBAAgB,CAAC,MAAM;AAC1C,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,YAAY,CAAC;AACjC,QAAQ,CAAC,GAAG,EAAE,YAAY,EAAE,YAAY,CAAC;AACzC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,CAAC;AACxC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,CAAC;AAC5C,QAAQ;AACR,YAAY,GAAG;AACf,YAAY,KAAK;AACjB,YAAY,uBAAuB;AACnC,YAAY,KAAK;AACjB,YAAY,cAAc;AAC1B,YAAY,KAAK;AACjB,YAAY,OAAO;AACnB,YAAY,IAAI;AAChB,YAAY,SAAS;AACrB,YAAY,KAAK;AACjB,SAAS;AACT,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,WAAW,CAAC;AACjC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,sBAAsB,CAAC;AAC5C,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,sBAAsB,CAAC;AAC1C,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,sBAAsB,CAAC;AAC3C,QAAQ,CAAC,GAAG,EAAE,EAAE,EAAE,cAAc,EAAE,UAAU,CAAC;AAC7C,QAAQ,CAAC,GAAG,EAAE,EAAE,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,CAAC;AACnD,QAAQ,CAAC,GAAG,EAAE,EAAE,EAAE,WAAW,CAAC;AAC9B,QAAQ,CAAC,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC;AAC/B,QAAQ,CAAC,aAAa,EAAE,IAAI,EAAE,gBAAgB,CAAC;AAC/C,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC;AAC9B,QAAQ,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC;AAChC,QAAQ,CAAC,GAAG,EAAE,iBAAiB,EAAE,IAAI,CAAC;AACtC,QAAQ,GAAG,gBAAgB;AAC3B,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,iBAAiB,CAAC;AAC3C,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,iBAAiB,CAAC;AAC3C,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,gBAAgB,EAAE,IAAI,CAAC;AACrC,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,iBAAiB,CAAC;AAC3C,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,gBAAgB,EAAE,gBAAgB,CAAC;AACjD,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,iBAAiB,CAAC;AAC3C,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,gBAAgB,EAAE,IAAI,CAAC;AACrC,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC;AAC9B,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC;AAC9B,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,aAAa,EAAE,iBAAiB,CAAC;AAC/C,QAAQ,CAAC,GAAG,EAAE,YAAY,EAAE,YAAY,CAAC;AACzC,QAAQ,CAAC,GAAG,EAAE,YAAY,EAAE,YAAY,CAAC;AACzC,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,iBAAiB,EAAE,IAAI,CAAC;AACtC,QAAQ,GAAG,gBAAgB;AAC3B,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC;AAChC,QAAQ,GAAG,gBAAgB;AAC3B,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC;AAChC,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE,sBAAsB,CAAC;AACnD,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,CAAC;AAC5C,QAAQ,CAAC,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC;AAC/B,QAAQ,GAAG,gBAAgB;AAC3B,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC;AAC/B,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC;AAC9B,QAAQ,GAAG,gBAAgB;AAC3B,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC;AAC9B,QAAQ,CAAC,GAAG,EAAE,UAAU,EAAE,UAAU,CAAC;AACrC,QAAQ,GAAG,gBAAgB;AAC3B,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC;AAChC,QAAQ,CAAC,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC;AAC/B,QAAQ,CAAC,GAAG,EAAE,gBAAgB,EAAE,gBAAgB,CAAC;AACjD,QAAQ,GAAG,gBAAgB;AAC3B,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,YAAY,EAAE,IAAI,CAAC;AACjC,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,GAAG,EAAE,YAAY,EAAE,IAAI,CAAC;AACjC,KAAK;AACL,IAAI;AACJ;AACA,QAAQ,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC;AACnC,KAAK;AACL,CAAC,GAAG;;ACjXJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,YAAY,GAAG,CAAC,MAAM,KAAK;AACxC,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,GAAG,EAAE,KAAK,CAAC,CAAC;AAC5C,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,UAAU,iBAAiB,iBAAiB,CAAC,YAAY,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,kBAAkB,GAAG,CAAC,MAAM,KAAK;AAC9C,IAAI,OAAO;AACX,QAAQ,OAAO,EAAE,4BAA4B,GAAG,UAAU,CAAC,MAAM,EAAE,eAAe,EAAE,IAAI,CAAC;AACzF,KAAK,CAAC;AACN,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,gBAAgB,iBAAiB,iBAAiB,CAAC,kBAAkB,EAAE;AACpF,MAAM,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,KAAK;AACpD,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC;AACxB,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,kBAAkB,EAAE,CAAC;AACtD,IAAI,IAAI,GAAG,EAAE;AACb,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,MAAM,SAAS,GAAG,GAAG,CAAC,WAAW,CAAC;AACtC,IAAI,MAAM,OAAO,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;AAC1C,IAAI,MAAM,cAAc,GAAG,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC;AAC/D,IAAI,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAChD,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;AACjB,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;AAC/B,QAAQ,KAAK,CAAC,cAAc,GAAG,EAAE,CAAC;AAClC,KAAK;AACL,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;AAC3B,QAAQ,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC;AAC9B,KAAK;AACL,IAAI,IAAI,MAAM,EAAE;AAChB,QAAQ,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;AACrD,KAAK;AACL,IAAI,IAAI,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC,EAAE;AAC3C,QAAQ,OAAO,OAAO,CAAC;AACvB,KAAK;AACL,IAAI,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC3C,IAAI,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;AACvE,IAAI,MAAM,WAAW,GAAG,CAAC,SAAS,KAAK;AACvC,QAAQ,aAAa,CAAC,KAAK,CAAC,cAAc,EAAE,8BAA8B,CAAC,CAAC;AAC5E,QAAQ,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC;AAClC,YAAY,OAAO;AACnB,YAAY,OAAO,EAAE,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC;AAClD,SAAS,CAAC,CAAC;AACX,KAAK,CAAC;AACN,IAAI,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;AAC1B,QAAQ,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;AACnD,KAAK;AACL,SAAS;AACT,QAAQ,WAAW,CAAC,KAAK,CAAC,CAAC;AAC3B,KAAK;AACL,IAAI,OAAO,OAAO,CAAC;AACnB,CAAC;;ACzJD;AACA;AACA;AACY,MAAC,SAAS,GAAG,CAAC,YAAY,KAAK;AAC3C,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;AACnD,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE;AACrB,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,MAAM,cAAc,GAAG,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC;AACrE,IAAI,MAAM,MAAM,GAAG,YAAY,CAAC,YAAY,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;AACzE,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;AAChB,IAAI,OAAO,MAAM,CAAC;AAClB;;ACTA;AACA;AACA;AACY,MAAC,gBAAgB,GAAG,MAAM;AACtC,IAAI,MAAM,KAAK,GAAG,QAAQ,CAAC;AAC3B,QAAQ,KAAK,EAAE,SAAS;AACxB,KAAK,CAAC,CAAC;AACP,IAAI,KAAK,CAAC,gBAAgB,EAAE,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC/D,IAAI,kBAAkB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AAC7C,IAAI,OAAO,KAAK,CAAC;AACjB;;;;"}